// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm32Hfp, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, wasmWasi, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Alias: native => [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, linuxArm32Hfp, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Alias: apple => [iosArm64, iosSimulatorArm64, iosX64, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <org.jetbrains.kotlinx:kotlinx-datetime>
open annotation class kotlinx.datetime.format/FormatStringsInDatetimeFormats : kotlin/Annotation { // kotlinx.datetime.format/FormatStringsInDatetimeFormats|null[0]
    constructor <init>() // kotlinx.datetime.format/FormatStringsInDatetimeFormats.<init>|<init>(){}[0]
}

final enum class kotlinx.datetime.format/AmPmMarker : kotlin/Enum<kotlinx.datetime.format/AmPmMarker> { // kotlinx.datetime.format/AmPmMarker|null[0]
    enum entry AM // kotlinx.datetime.format/AmPmMarker.AM|null[0]
    enum entry PM // kotlinx.datetime.format/AmPmMarker.PM|null[0]

    final val entries // kotlinx.datetime.format/AmPmMarker.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlinx.datetime.format/AmPmMarker> // kotlinx.datetime.format/AmPmMarker.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlinx.datetime.format/AmPmMarker // kotlinx.datetime.format/AmPmMarker.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlinx.datetime.format/AmPmMarker> // kotlinx.datetime.format/AmPmMarker.values|values#static(){}[0]
}

final enum class kotlinx.datetime.format/Padding : kotlin/Enum<kotlinx.datetime.format/Padding> { // kotlinx.datetime.format/Padding|null[0]
    enum entry NONE // kotlinx.datetime.format/Padding.NONE|null[0]
    enum entry SPACE // kotlinx.datetime.format/Padding.SPACE|null[0]
    enum entry ZERO // kotlinx.datetime.format/Padding.ZERO|null[0]

    final val entries // kotlinx.datetime.format/Padding.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlinx.datetime.format/Padding> // kotlinx.datetime.format/Padding.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlinx.datetime.format/Padding // kotlinx.datetime.format/Padding.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlinx.datetime.format/Padding> // kotlinx.datetime.format/Padding.values|values#static(){}[0]
}

final enum class kotlinx.datetime/DayOfWeek : kotlin/Enum<kotlinx.datetime/DayOfWeek> { // kotlinx.datetime/DayOfWeek|null[0]
    enum entry FRIDAY // kotlinx.datetime/DayOfWeek.FRIDAY|null[0]
    enum entry MONDAY // kotlinx.datetime/DayOfWeek.MONDAY|null[0]
    enum entry SATURDAY // kotlinx.datetime/DayOfWeek.SATURDAY|null[0]
    enum entry SUNDAY // kotlinx.datetime/DayOfWeek.SUNDAY|null[0]
    enum entry THURSDAY // kotlinx.datetime/DayOfWeek.THURSDAY|null[0]
    enum entry TUESDAY // kotlinx.datetime/DayOfWeek.TUESDAY|null[0]
    enum entry WEDNESDAY // kotlinx.datetime/DayOfWeek.WEDNESDAY|null[0]

    final val entries // kotlinx.datetime/DayOfWeek.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlinx.datetime/DayOfWeek> // kotlinx.datetime/DayOfWeek.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlinx.datetime/DayOfWeek // kotlinx.datetime/DayOfWeek.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlinx.datetime/DayOfWeek> // kotlinx.datetime/DayOfWeek.values|values#static(){}[0]
}

final enum class kotlinx.datetime/Month : kotlin/Enum<kotlinx.datetime/Month> { // kotlinx.datetime/Month|null[0]
    enum entry APRIL // kotlinx.datetime/Month.APRIL|null[0]
    enum entry AUGUST // kotlinx.datetime/Month.AUGUST|null[0]
    enum entry DECEMBER // kotlinx.datetime/Month.DECEMBER|null[0]
    enum entry FEBRUARY // kotlinx.datetime/Month.FEBRUARY|null[0]
    enum entry JANUARY // kotlinx.datetime/Month.JANUARY|null[0]
    enum entry JULY // kotlinx.datetime/Month.JULY|null[0]
    enum entry JUNE // kotlinx.datetime/Month.JUNE|null[0]
    enum entry MARCH // kotlinx.datetime/Month.MARCH|null[0]
    enum entry MAY // kotlinx.datetime/Month.MAY|null[0]
    enum entry NOVEMBER // kotlinx.datetime/Month.NOVEMBER|null[0]
    enum entry OCTOBER // kotlinx.datetime/Month.OCTOBER|null[0]
    enum entry SEPTEMBER // kotlinx.datetime/Month.SEPTEMBER|null[0]

    final val entries // kotlinx.datetime/Month.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlinx.datetime/Month> // kotlinx.datetime/Month.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlinx.datetime/Month // kotlinx.datetime/Month.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlinx.datetime/Month> // kotlinx.datetime/Month.values|values#static(){}[0]
}

abstract interface kotlinx.datetime/Clock { // kotlinx.datetime/Clock|null[0]
    abstract fun now(): kotlinx.datetime/Instant // kotlinx.datetime/Clock.now|now(){}[0]

    final object Companion // kotlinx.datetime/Clock.Companion|null[0]

    final object System : kotlinx.datetime/Clock { // kotlinx.datetime/Clock.System|null[0]
        final fun now(): kotlinx.datetime/Instant // kotlinx.datetime/Clock.System.now|now(){}[0]
    }
}

sealed interface <#A: kotlin/Any?> kotlinx.datetime.format/DateTimeFormat { // kotlinx.datetime.format/DateTimeFormat|null[0]
    abstract fun <#A1: kotlin.text/Appendable> formatTo(#A1, #A): #A1 // kotlinx.datetime.format/DateTimeFormat.formatTo|formatTo(0:0;1:0){0ยง<kotlin.text.Appendable>}[0]
    abstract fun format(#A): kotlin/String // kotlinx.datetime.format/DateTimeFormat.format|format(1:0){}[0]
    abstract fun parse(kotlin/CharSequence): #A // kotlinx.datetime.format/DateTimeFormat.parse|parse(kotlin.CharSequence){}[0]
    abstract fun parseOrNull(kotlin/CharSequence): #A? // kotlinx.datetime.format/DateTimeFormat.parseOrNull|parseOrNull(kotlin.CharSequence){}[0]

    final object Companion { // kotlinx.datetime.format/DateTimeFormat.Companion|null[0]
        final fun formatAsKotlinBuilderDsl(kotlinx.datetime.format/DateTimeFormat<*>): kotlin/String // kotlinx.datetime.format/DateTimeFormat.Companion.formatAsKotlinBuilderDsl|formatAsKotlinBuilderDsl(kotlinx.datetime.format.DateTimeFormat<*>){}[0]
    }
}

sealed interface kotlinx.datetime.format/DateTimeFormatBuilder { // kotlinx.datetime.format/DateTimeFormatBuilder|null[0]
    abstract fun chars(kotlin/String) // kotlinx.datetime.format/DateTimeFormatBuilder.chars|chars(kotlin.String){}[0]

    sealed interface WithDate : kotlinx.datetime.format/DateTimeFormatBuilder { // kotlinx.datetime.format/DateTimeFormatBuilder.WithDate|null[0]
        abstract fun date(kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDate>) // kotlinx.datetime.format/DateTimeFormatBuilder.WithDate.date|date(kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.LocalDate>){}[0]
        abstract fun dayOfMonth(kotlinx.datetime.format/Padding =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithDate.dayOfMonth|dayOfMonth(kotlinx.datetime.format.Padding){}[0]
        abstract fun dayOfWeek(kotlinx.datetime.format/DayOfWeekNames) // kotlinx.datetime.format/DateTimeFormatBuilder.WithDate.dayOfWeek|dayOfWeek(kotlinx.datetime.format.DayOfWeekNames){}[0]
        abstract fun dayOfYear(kotlinx.datetime.format/Padding =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithDate.dayOfYear|dayOfYear(kotlinx.datetime.format.Padding){}[0]
        abstract fun monthName(kotlinx.datetime.format/MonthNames) // kotlinx.datetime.format/DateTimeFormatBuilder.WithDate.monthName|monthName(kotlinx.datetime.format.MonthNames){}[0]
        abstract fun monthNumber(kotlinx.datetime.format/Padding =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithDate.monthNumber|monthNumber(kotlinx.datetime.format.Padding){}[0]
        abstract fun year(kotlinx.datetime.format/Padding =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithDate.year|year(kotlinx.datetime.format.Padding){}[0]
        abstract fun yearTwoDigits(kotlin/Int) // kotlinx.datetime.format/DateTimeFormatBuilder.WithDate.yearTwoDigits|yearTwoDigits(kotlin.Int){}[0]
    }

    sealed interface WithDateTime : kotlinx.datetime.format/DateTimeFormatBuilder.WithDate, kotlinx.datetime.format/DateTimeFormatBuilder.WithTime { // kotlinx.datetime.format/DateTimeFormatBuilder.WithDateTime|null[0]
        abstract fun dateTime(kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDateTime>) // kotlinx.datetime.format/DateTimeFormatBuilder.WithDateTime.dateTime|dateTime(kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.LocalDateTime>){}[0]
    }

    sealed interface WithDateTimeComponents : kotlinx.datetime.format/DateTimeFormatBuilder.WithDateTime, kotlinx.datetime.format/DateTimeFormatBuilder.WithUtcOffset { // kotlinx.datetime.format/DateTimeFormatBuilder.WithDateTimeComponents|null[0]
        abstract fun dateTimeComponents(kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime.format/DateTimeComponents>) // kotlinx.datetime.format/DateTimeFormatBuilder.WithDateTimeComponents.dateTimeComponents|dateTimeComponents(kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.format.DateTimeComponents>){}[0]
        abstract fun timeZoneId() // kotlinx.datetime.format/DateTimeFormatBuilder.WithDateTimeComponents.timeZoneId|timeZoneId(){}[0]
    }

    sealed interface WithTime : kotlinx.datetime.format/DateTimeFormatBuilder { // kotlinx.datetime.format/DateTimeFormatBuilder.WithTime|null[0]
        abstract fun amPmHour(kotlinx.datetime.format/Padding =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithTime.amPmHour|amPmHour(kotlinx.datetime.format.Padding){}[0]
        abstract fun amPmMarker(kotlin/String, kotlin/String) // kotlinx.datetime.format/DateTimeFormatBuilder.WithTime.amPmMarker|amPmMarker(kotlin.String;kotlin.String){}[0]
        abstract fun hour(kotlinx.datetime.format/Padding =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithTime.hour|hour(kotlinx.datetime.format.Padding){}[0]
        abstract fun minute(kotlinx.datetime.format/Padding =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithTime.minute|minute(kotlinx.datetime.format.Padding){}[0]
        abstract fun second(kotlinx.datetime.format/Padding =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithTime.second|second(kotlinx.datetime.format.Padding){}[0]
        abstract fun secondFraction(kotlin/Int =..., kotlin/Int =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithTime.secondFraction|secondFraction(kotlin.Int;kotlin.Int){}[0]
        abstract fun time(kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalTime>) // kotlinx.datetime.format/DateTimeFormatBuilder.WithTime.time|time(kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.LocalTime>){}[0]
        open fun secondFraction(kotlin/Int) // kotlinx.datetime.format/DateTimeFormatBuilder.WithTime.secondFraction|secondFraction(kotlin.Int){}[0]
    }

    sealed interface WithUtcOffset : kotlinx.datetime.format/DateTimeFormatBuilder { // kotlinx.datetime.format/DateTimeFormatBuilder.WithUtcOffset|null[0]
        abstract fun offset(kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/UtcOffset>) // kotlinx.datetime.format/DateTimeFormatBuilder.WithUtcOffset.offset|offset(kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.UtcOffset>){}[0]
        abstract fun offsetHours(kotlinx.datetime.format/Padding =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithUtcOffset.offsetHours|offsetHours(kotlinx.datetime.format.Padding){}[0]
        abstract fun offsetMinutesOfHour(kotlinx.datetime.format/Padding =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithUtcOffset.offsetMinutesOfHour|offsetMinutesOfHour(kotlinx.datetime.format.Padding){}[0]
        abstract fun offsetSecondsOfMinute(kotlinx.datetime.format/Padding =...) // kotlinx.datetime.format/DateTimeFormatBuilder.WithUtcOffset.offsetSecondsOfMinute|offsetSecondsOfMinute(kotlinx.datetime.format.Padding){}[0]
    }
}

final class kotlinx.datetime.format/DateTimeComponents { // kotlinx.datetime.format/DateTimeComponents|null[0]
    final var amPm // kotlinx.datetime.format/DateTimeComponents.amPm|{}amPm[0]
        final fun <get-amPm>(): kotlinx.datetime.format/AmPmMarker? // kotlinx.datetime.format/DateTimeComponents.amPm.<get-amPm>|<get-amPm>(){}[0]
        final fun <set-amPm>(kotlinx.datetime.format/AmPmMarker?) // kotlinx.datetime.format/DateTimeComponents.amPm.<set-amPm>|<set-amPm>(kotlinx.datetime.format.AmPmMarker?){}[0]
    final var dayOfMonth // kotlinx.datetime.format/DateTimeComponents.dayOfMonth|{}dayOfMonth[0]
        final fun <get-dayOfMonth>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.dayOfMonth.<get-dayOfMonth>|<get-dayOfMonth>(){}[0]
        final fun <set-dayOfMonth>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.dayOfMonth.<set-dayOfMonth>|<set-dayOfMonth>(kotlin.Int?){}[0]
    final var dayOfWeek // kotlinx.datetime.format/DateTimeComponents.dayOfWeek|{}dayOfWeek[0]
        final fun <get-dayOfWeek>(): kotlinx.datetime/DayOfWeek? // kotlinx.datetime.format/DateTimeComponents.dayOfWeek.<get-dayOfWeek>|<get-dayOfWeek>(){}[0]
        final fun <set-dayOfWeek>(kotlinx.datetime/DayOfWeek?) // kotlinx.datetime.format/DateTimeComponents.dayOfWeek.<set-dayOfWeek>|<set-dayOfWeek>(kotlinx.datetime.DayOfWeek?){}[0]
    final var dayOfYear // kotlinx.datetime.format/DateTimeComponents.dayOfYear|{}dayOfYear[0]
        final fun <get-dayOfYear>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.dayOfYear.<get-dayOfYear>|<get-dayOfYear>(){}[0]
        final fun <set-dayOfYear>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.dayOfYear.<set-dayOfYear>|<set-dayOfYear>(kotlin.Int?){}[0]
    final var hour // kotlinx.datetime.format/DateTimeComponents.hour|{}hour[0]
        final fun <get-hour>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.hour.<get-hour>|<get-hour>(){}[0]
        final fun <set-hour>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.hour.<set-hour>|<set-hour>(kotlin.Int?){}[0]
    final var hourOfAmPm // kotlinx.datetime.format/DateTimeComponents.hourOfAmPm|{}hourOfAmPm[0]
        final fun <get-hourOfAmPm>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.hourOfAmPm.<get-hourOfAmPm>|<get-hourOfAmPm>(){}[0]
        final fun <set-hourOfAmPm>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.hourOfAmPm.<set-hourOfAmPm>|<set-hourOfAmPm>(kotlin.Int?){}[0]
    final var minute // kotlinx.datetime.format/DateTimeComponents.minute|{}minute[0]
        final fun <get-minute>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.minute.<get-minute>|<get-minute>(){}[0]
        final fun <set-minute>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.minute.<set-minute>|<set-minute>(kotlin.Int?){}[0]
    final var month // kotlinx.datetime.format/DateTimeComponents.month|{}month[0]
        final fun <get-month>(): kotlinx.datetime/Month? // kotlinx.datetime.format/DateTimeComponents.month.<get-month>|<get-month>(){}[0]
        final fun <set-month>(kotlinx.datetime/Month?) // kotlinx.datetime.format/DateTimeComponents.month.<set-month>|<set-month>(kotlinx.datetime.Month?){}[0]
    final var monthNumber // kotlinx.datetime.format/DateTimeComponents.monthNumber|{}monthNumber[0]
        final fun <get-monthNumber>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.monthNumber.<get-monthNumber>|<get-monthNumber>(){}[0]
        final fun <set-monthNumber>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.monthNumber.<set-monthNumber>|<set-monthNumber>(kotlin.Int?){}[0]
    final var nanosecond // kotlinx.datetime.format/DateTimeComponents.nanosecond|{}nanosecond[0]
        final fun <get-nanosecond>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.nanosecond.<get-nanosecond>|<get-nanosecond>(){}[0]
        final fun <set-nanosecond>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.nanosecond.<set-nanosecond>|<set-nanosecond>(kotlin.Int?){}[0]
    final var offsetHours // kotlinx.datetime.format/DateTimeComponents.offsetHours|{}offsetHours[0]
        final fun <get-offsetHours>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.offsetHours.<get-offsetHours>|<get-offsetHours>(){}[0]
        final fun <set-offsetHours>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.offsetHours.<set-offsetHours>|<set-offsetHours>(kotlin.Int?){}[0]
    final var offsetIsNegative // kotlinx.datetime.format/DateTimeComponents.offsetIsNegative|{}offsetIsNegative[0]
        final fun <get-offsetIsNegative>(): kotlin/Boolean? // kotlinx.datetime.format/DateTimeComponents.offsetIsNegative.<get-offsetIsNegative>|<get-offsetIsNegative>(){}[0]
        final fun <set-offsetIsNegative>(kotlin/Boolean?) // kotlinx.datetime.format/DateTimeComponents.offsetIsNegative.<set-offsetIsNegative>|<set-offsetIsNegative>(kotlin.Boolean?){}[0]
    final var offsetMinutesOfHour // kotlinx.datetime.format/DateTimeComponents.offsetMinutesOfHour|{}offsetMinutesOfHour[0]
        final fun <get-offsetMinutesOfHour>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.offsetMinutesOfHour.<get-offsetMinutesOfHour>|<get-offsetMinutesOfHour>(){}[0]
        final fun <set-offsetMinutesOfHour>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.offsetMinutesOfHour.<set-offsetMinutesOfHour>|<set-offsetMinutesOfHour>(kotlin.Int?){}[0]
    final var offsetSecondsOfMinute // kotlinx.datetime.format/DateTimeComponents.offsetSecondsOfMinute|{}offsetSecondsOfMinute[0]
        final fun <get-offsetSecondsOfMinute>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.offsetSecondsOfMinute.<get-offsetSecondsOfMinute>|<get-offsetSecondsOfMinute>(){}[0]
        final fun <set-offsetSecondsOfMinute>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.offsetSecondsOfMinute.<set-offsetSecondsOfMinute>|<set-offsetSecondsOfMinute>(kotlin.Int?){}[0]
    final var second // kotlinx.datetime.format/DateTimeComponents.second|{}second[0]
        final fun <get-second>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.second.<get-second>|<get-second>(){}[0]
        final fun <set-second>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.second.<set-second>|<set-second>(kotlin.Int?){}[0]
    final var timeZoneId // kotlinx.datetime.format/DateTimeComponents.timeZoneId|{}timeZoneId[0]
        final fun <get-timeZoneId>(): kotlin/String? // kotlinx.datetime.format/DateTimeComponents.timeZoneId.<get-timeZoneId>|<get-timeZoneId>(){}[0]
        final fun <set-timeZoneId>(kotlin/String?) // kotlinx.datetime.format/DateTimeComponents.timeZoneId.<set-timeZoneId>|<set-timeZoneId>(kotlin.String?){}[0]
    final var year // kotlinx.datetime.format/DateTimeComponents.year|<set-year>(kotlin.Int?){}[0]
        final fun <get-year>(): kotlin/Int? // kotlinx.datetime.format/DateTimeComponents.year.<get-year>|<get-year>(){}[0]
        final fun <set-year>(kotlin/Int?) // kotlinx.datetime.format/DateTimeComponents.year.<set-year>|<set-year>(kotlin.Int?){}[0]

    final fun setDate(kotlinx.datetime/LocalDate) // kotlinx.datetime.format/DateTimeComponents.setDate|setDate(kotlinx.datetime.LocalDate){}[0]
    final fun setDateTime(kotlinx.datetime/LocalDateTime) // kotlinx.datetime.format/DateTimeComponents.setDateTime|setDateTime(kotlinx.datetime.LocalDateTime){}[0]
    final fun setDateTimeOffset(kotlinx.datetime/Instant, kotlinx.datetime/UtcOffset) // kotlinx.datetime.format/DateTimeComponents.setDateTimeOffset|setDateTimeOffset(kotlinx.datetime.Instant;kotlinx.datetime.UtcOffset){}[0]
    final fun setDateTimeOffset(kotlinx.datetime/LocalDateTime, kotlinx.datetime/UtcOffset) // kotlinx.datetime.format/DateTimeComponents.setDateTimeOffset|setDateTimeOffset(kotlinx.datetime.LocalDateTime;kotlinx.datetime.UtcOffset){}[0]
    final fun setOffset(kotlinx.datetime/UtcOffset) // kotlinx.datetime.format/DateTimeComponents.setOffset|setOffset(kotlinx.datetime.UtcOffset){}[0]
    final fun setTime(kotlinx.datetime/LocalTime) // kotlinx.datetime.format/DateTimeComponents.setTime|setTime(kotlinx.datetime.LocalTime){}[0]
    final fun toInstantUsingOffset(): kotlinx.datetime/Instant // kotlinx.datetime.format/DateTimeComponents.toInstantUsingOffset|toInstantUsingOffset(){}[0]
    final fun toLocalDate(): kotlinx.datetime/LocalDate // kotlinx.datetime.format/DateTimeComponents.toLocalDate|toLocalDate(){}[0]
    final fun toLocalDateTime(): kotlinx.datetime/LocalDateTime // kotlinx.datetime.format/DateTimeComponents.toLocalDateTime|toLocalDateTime(){}[0]
    final fun toLocalTime(): kotlinx.datetime/LocalTime // kotlinx.datetime.format/DateTimeComponents.toLocalTime|toLocalTime(){}[0]
    final fun toUtcOffset(): kotlinx.datetime/UtcOffset // kotlinx.datetime.format/DateTimeComponents.toUtcOffset|toUtcOffset(){}[0]

    final object Companion { // kotlinx.datetime.format/DateTimeComponents.Companion|null[0]
        final fun Format(kotlin/Function1<kotlinx.datetime.format/DateTimeFormatBuilder.WithDateTimeComponents, kotlin/Unit>): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime.format/DateTimeComponents> // kotlinx.datetime.format/DateTimeComponents.Companion.Format|Format(kotlin.Function1<kotlinx.datetime.format.DateTimeFormatBuilder.WithDateTimeComponents,kotlin.Unit>){}[0]
    }

    final object Formats { // kotlinx.datetime.format/DateTimeComponents.Formats|null[0]
        final val ISO_DATE_TIME_OFFSET // kotlinx.datetime.format/DateTimeComponents.Formats.ISO_DATE_TIME_OFFSET|{}ISO_DATE_TIME_OFFSET[0]
            final fun <get-ISO_DATE_TIME_OFFSET>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime.format/DateTimeComponents> // kotlinx.datetime.format/DateTimeComponents.Formats.ISO_DATE_TIME_OFFSET.<get-ISO_DATE_TIME_OFFSET>|<get-ISO_DATE_TIME_OFFSET>(){}[0]
        final val RFC_1123 // kotlinx.datetime.format/DateTimeComponents.Formats.RFC_1123|{}RFC_1123[0]
            final fun <get-RFC_1123>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime.format/DateTimeComponents> // kotlinx.datetime.format/DateTimeComponents.Formats.RFC_1123.<get-RFC_1123>|<get-RFC_1123>(){}[0]
    }
}

final class kotlinx.datetime.format/DayOfWeekNames { // kotlinx.datetime.format/DayOfWeekNames|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>) // kotlinx.datetime.format/DayOfWeekNames.<init>|<init>(kotlin.collections.List<kotlin.String>){}[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String) // kotlinx.datetime.format/DayOfWeekNames.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

    final val names // kotlinx.datetime.format/DayOfWeekNames.names|{}names[0]
        final fun <get-names>(): kotlin.collections/List<kotlin/String> // kotlinx.datetime.format/DayOfWeekNames.names.<get-names>|<get-names>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime.format/DayOfWeekNames.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.datetime.format/DayOfWeekNames.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlinx.datetime.format/DayOfWeekNames.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.format/DayOfWeekNames.Companion|null[0]
        final val ENGLISH_ABBREVIATED // kotlinx.datetime.format/DayOfWeekNames.Companion.ENGLISH_ABBREVIATED|{}ENGLISH_ABBREVIATED[0]
            final fun <get-ENGLISH_ABBREVIATED>(): kotlinx.datetime.format/DayOfWeekNames // kotlinx.datetime.format/DayOfWeekNames.Companion.ENGLISH_ABBREVIATED.<get-ENGLISH_ABBREVIATED>|<get-ENGLISH_ABBREVIATED>(){}[0]
        final val ENGLISH_FULL // kotlinx.datetime.format/DayOfWeekNames.Companion.ENGLISH_FULL|{}ENGLISH_FULL[0]
            final fun <get-ENGLISH_FULL>(): kotlinx.datetime.format/DayOfWeekNames // kotlinx.datetime.format/DayOfWeekNames.Companion.ENGLISH_FULL.<get-ENGLISH_FULL>|<get-ENGLISH_FULL>(){}[0]
    }
}

final class kotlinx.datetime.format/MonthNames { // kotlinx.datetime.format/MonthNames|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>) // kotlinx.datetime.format/MonthNames.<init>|<init>(kotlin.collections.List<kotlin.String>){}[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String) // kotlinx.datetime.format/MonthNames.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

    final val names // kotlinx.datetime.format/MonthNames.names|{}names[0]
        final fun <get-names>(): kotlin.collections/List<kotlin/String> // kotlinx.datetime.format/MonthNames.names.<get-names>|<get-names>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime.format/MonthNames.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.datetime.format/MonthNames.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlinx.datetime.format/MonthNames.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.format/MonthNames.Companion|null[0]
        final val ENGLISH_ABBREVIATED // kotlinx.datetime.format/MonthNames.Companion.ENGLISH_ABBREVIATED|{}ENGLISH_ABBREVIATED[0]
            final fun <get-ENGLISH_ABBREVIATED>(): kotlinx.datetime.format/MonthNames // kotlinx.datetime.format/MonthNames.Companion.ENGLISH_ABBREVIATED.<get-ENGLISH_ABBREVIATED>|<get-ENGLISH_ABBREVIATED>(){}[0]
        final val ENGLISH_FULL // kotlinx.datetime.format/MonthNames.Companion.ENGLISH_FULL|{}ENGLISH_FULL[0]
            final fun <get-ENGLISH_FULL>(): kotlinx.datetime.format/MonthNames // kotlinx.datetime.format/MonthNames.Companion.ENGLISH_FULL.<get-ENGLISH_FULL>|<get-ENGLISH_FULL>(){}[0]
    }
}

final class kotlinx.datetime/DatePeriod : kotlinx.datetime/DateTimePeriod { // kotlinx.datetime/DatePeriod|null[0]
    constructor <init>(kotlin/Int =..., kotlin/Int =..., kotlin/Int =...) // kotlinx.datetime/DatePeriod.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int){}[0]

    final val days // kotlinx.datetime/DatePeriod.days|{}days[0]
        final fun <get-days>(): kotlin/Int // kotlinx.datetime/DatePeriod.days.<get-days>|<get-days>(){}[0]
    final val hours // kotlinx.datetime/DatePeriod.hours|{}hours[0]
        final fun <get-hours>(): kotlin/Int // kotlinx.datetime/DatePeriod.hours.<get-hours>|<get-hours>(){}[0]
    final val minutes // kotlinx.datetime/DatePeriod.minutes|{}minutes[0]
        final fun <get-minutes>(): kotlin/Int // kotlinx.datetime/DatePeriod.minutes.<get-minutes>|<get-minutes>(){}[0]
    final val nanoseconds // kotlinx.datetime/DatePeriod.nanoseconds|{}nanoseconds[0]
        final fun <get-nanoseconds>(): kotlin/Int // kotlinx.datetime/DatePeriod.nanoseconds.<get-nanoseconds>|<get-nanoseconds>(){}[0]
    final val seconds // kotlinx.datetime/DatePeriod.seconds|{}seconds[0]
        final fun <get-seconds>(): kotlin/Int // kotlinx.datetime/DatePeriod.seconds.<get-seconds>|<get-seconds>(){}[0]

    final object Companion { // kotlinx.datetime/DatePeriod.Companion|null[0]
        final fun parse(kotlin/String): kotlinx.datetime/DatePeriod // kotlinx.datetime/DatePeriod.Companion.parse|parse(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/DatePeriod> // kotlinx.datetime/DatePeriod.Companion.serializer|serializer(){}[0]
    }
}

final class kotlinx.datetime/DateTimeArithmeticException : kotlin/RuntimeException { // kotlinx.datetime/DateTimeArithmeticException|null[0]
    constructor <init>() // kotlinx.datetime/DateTimeArithmeticException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String) // kotlinx.datetime/DateTimeArithmeticException.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/Throwable) // kotlinx.datetime/DateTimeArithmeticException.<init>|<init>(kotlin.String;kotlin.Throwable){}[0]
    constructor <init>(kotlin/Throwable) // kotlinx.datetime/DateTimeArithmeticException.<init>|<init>(kotlin.Throwable){}[0]
}

final class kotlinx.datetime/FixedOffsetTimeZone : kotlinx.datetime/TimeZone { // kotlinx.datetime/FixedOffsetTimeZone|null[0]
    constructor <init>(kotlinx.datetime/UtcOffset) // kotlinx.datetime/FixedOffsetTimeZone.<init>|<init>(kotlinx.datetime.UtcOffset){}[0]

    final val offset // kotlinx.datetime/FixedOffsetTimeZone.offset|{}offset[0]
        final fun <get-offset>(): kotlinx.datetime/UtcOffset // kotlinx.datetime/FixedOffsetTimeZone.offset.<get-offset>|<get-offset>(){}[0]
    final val totalSeconds // kotlinx.datetime/FixedOffsetTimeZone.totalSeconds|{}totalSeconds[0]
        final fun <get-totalSeconds>(): kotlin/Int // kotlinx.datetime/FixedOffsetTimeZone.totalSeconds.<get-totalSeconds>|<get-totalSeconds>(){}[0]

    final object Companion { // kotlinx.datetime/FixedOffsetTimeZone.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/FixedOffsetTimeZone> // kotlinx.datetime/FixedOffsetTimeZone.Companion.serializer|serializer(){}[0]
    }

    // Targets: [native, wasmWasi]
    final val id // kotlinx.datetime/FixedOffsetTimeZone.id|{}id[0]
        final fun <get-id>(): kotlin/String // kotlinx.datetime/FixedOffsetTimeZone.id.<get-id>|<get-id>(){}[0]
}

final class kotlinx.datetime/IllegalTimeZoneException : kotlin/IllegalArgumentException { // kotlinx.datetime/IllegalTimeZoneException|null[0]
    constructor <init>() // kotlinx.datetime/IllegalTimeZoneException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String) // kotlinx.datetime/IllegalTimeZoneException.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/Throwable) // kotlinx.datetime/IllegalTimeZoneException.<init>|<init>(kotlin.String;kotlin.Throwable){}[0]
    constructor <init>(kotlin/Throwable) // kotlinx.datetime/IllegalTimeZoneException.<init>|<init>(kotlin.Throwable){}[0]
}

final class kotlinx.datetime/Instant : kotlin/Comparable<kotlinx.datetime/Instant> { // kotlinx.datetime/Instant|null[0]
    final val epochSeconds // kotlinx.datetime/Instant.epochSeconds|{}epochSeconds[0]
        final fun <get-epochSeconds>(): kotlin/Long // kotlinx.datetime/Instant.epochSeconds.<get-epochSeconds>|<get-epochSeconds>(){}[0]
    final val nanosecondsOfSecond // kotlinx.datetime/Instant.nanosecondsOfSecond|{}nanosecondsOfSecond[0]
        final fun <get-nanosecondsOfSecond>(): kotlin/Int // kotlinx.datetime/Instant.nanosecondsOfSecond.<get-nanosecondsOfSecond>|<get-nanosecondsOfSecond>(){}[0]

    final fun compareTo(kotlinx.datetime/Instant): kotlin/Int // kotlinx.datetime/Instant.compareTo|compareTo(kotlinx.datetime.Instant){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime/Instant.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.datetime/Instant.hashCode|hashCode(){}[0]
    final fun minus(kotlin.time/Duration): kotlinx.datetime/Instant // kotlinx.datetime/Instant.minus|minus(kotlin.time.Duration){}[0]
    final fun minus(kotlinx.datetime/Instant): kotlin.time/Duration // kotlinx.datetime/Instant.minus|minus(kotlinx.datetime.Instant){}[0]
    final fun plus(kotlin.time/Duration): kotlinx.datetime/Instant // kotlinx.datetime/Instant.plus|plus(kotlin.time.Duration){}[0]
    final fun toEpochMilliseconds(): kotlin/Long // kotlinx.datetime/Instant.toEpochMilliseconds|toEpochMilliseconds(){}[0]
    final fun toString(): kotlin/String // kotlinx.datetime/Instant.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime/Instant.Companion|null[0]
        final val DISTANT_FUTURE // kotlinx.datetime/Instant.Companion.DISTANT_FUTURE|{}DISTANT_FUTURE[0]
            final fun <get-DISTANT_FUTURE>(): kotlinx.datetime/Instant // kotlinx.datetime/Instant.Companion.DISTANT_FUTURE.<get-DISTANT_FUTURE>|<get-DISTANT_FUTURE>(){}[0]
        final val DISTANT_PAST // kotlinx.datetime/Instant.Companion.DISTANT_PAST|{}DISTANT_PAST[0]
            final fun <get-DISTANT_PAST>(): kotlinx.datetime/Instant // kotlinx.datetime/Instant.Companion.DISTANT_PAST.<get-DISTANT_PAST>|<get-DISTANT_PAST>(){}[0]

        final fun fromEpochMilliseconds(kotlin/Long): kotlinx.datetime/Instant // kotlinx.datetime/Instant.Companion.fromEpochMilliseconds|fromEpochMilliseconds(kotlin.Long){}[0]
        final fun fromEpochSeconds(kotlin/Long, kotlin/Int): kotlinx.datetime/Instant // kotlinx.datetime/Instant.Companion.fromEpochSeconds|fromEpochSeconds(kotlin.Long;kotlin.Int){}[0]
        final fun fromEpochSeconds(kotlin/Long, kotlin/Long =...): kotlinx.datetime/Instant // kotlinx.datetime/Instant.Companion.fromEpochSeconds|fromEpochSeconds(kotlin.Long;kotlin.Long){}[0]
        final fun now(): kotlinx.datetime/Instant // kotlinx.datetime/Instant.Companion.now|now(){}[0]
        final fun parse(kotlin/CharSequence, kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime.format/DateTimeComponents> =...): kotlinx.datetime/Instant // kotlinx.datetime/Instant.Companion.parse|parse(kotlin.CharSequence;kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.format.DateTimeComponents>){}[0]
        final fun parse(kotlin/String): kotlinx.datetime/Instant // kotlinx.datetime/Instant.Companion.parse|parse(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/Instant> // kotlinx.datetime/Instant.Companion.serializer|serializer(){}[0]
    }
}

final class kotlinx.datetime/LocalDate : kotlin/Comparable<kotlinx.datetime/LocalDate> { // kotlinx.datetime/LocalDate|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int) // kotlinx.datetime/LocalDate.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlinx.datetime/Month, kotlin/Int) // kotlinx.datetime/LocalDate.<init>|<init>(kotlin.Int;kotlinx.datetime.Month;kotlin.Int){}[0]

    final val dayOfMonth // kotlinx.datetime/LocalDate.dayOfMonth|{}dayOfMonth[0]
        final fun <get-dayOfMonth>(): kotlin/Int // kotlinx.datetime/LocalDate.dayOfMonth.<get-dayOfMonth>|<get-dayOfMonth>(){}[0]
    final val dayOfWeek // kotlinx.datetime/LocalDate.dayOfWeek|{}dayOfWeek[0]
        final fun <get-dayOfWeek>(): kotlinx.datetime/DayOfWeek // kotlinx.datetime/LocalDate.dayOfWeek.<get-dayOfWeek>|<get-dayOfWeek>(){}[0]
    final val dayOfYear // kotlinx.datetime/LocalDate.dayOfYear|{}dayOfYear[0]
        final fun <get-dayOfYear>(): kotlin/Int // kotlinx.datetime/LocalDate.dayOfYear.<get-dayOfYear>|<get-dayOfYear>(){}[0]
    final val monthNumber // kotlinx.datetime/LocalDate.monthNumber|{}monthNumber[0]
        final fun <get-monthNumber>(): kotlin/Int // kotlinx.datetime/LocalDate.monthNumber.<get-monthNumber>|<get-monthNumber>(){}[0]
    final val year // kotlinx.datetime/LocalDate.year|{}year[0]
        final fun <get-year>(): kotlin/Int // kotlinx.datetime/LocalDate.year.<get-year>|<get-year>(){}[0]

    final fun compareTo(kotlinx.datetime/LocalDate): kotlin/Int // kotlinx.datetime/LocalDate.compareTo|compareTo(kotlinx.datetime.LocalDate){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime/LocalDate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.datetime/LocalDate.hashCode|hashCode(){}[0]
    final fun toEpochDays(): kotlin/Int // kotlinx.datetime/LocalDate.toEpochDays|toEpochDays(){}[0]
    final fun toString(): kotlin/String // kotlinx.datetime/LocalDate.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime/LocalDate.Companion|null[0]
        final fun Format(kotlin/Function1<kotlinx.datetime.format/DateTimeFormatBuilder.WithDate, kotlin/Unit>): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDate> // kotlinx.datetime/LocalDate.Companion.Format|Format(kotlin.Function1<kotlinx.datetime.format.DateTimeFormatBuilder.WithDate,kotlin.Unit>){}[0]
        final fun fromEpochDays(kotlin/Int): kotlinx.datetime/LocalDate // kotlinx.datetime/LocalDate.Companion.fromEpochDays|fromEpochDays(kotlin.Int){}[0]
        final fun parse(kotlin/CharSequence, kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDate> =...): kotlinx.datetime/LocalDate // kotlinx.datetime/LocalDate.Companion.parse|parse(kotlin.CharSequence;kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.LocalDate>){}[0]
        final fun parse(kotlin/String): kotlinx.datetime/LocalDate // kotlinx.datetime/LocalDate.Companion.parse|parse(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/LocalDate> // kotlinx.datetime/LocalDate.Companion.serializer|serializer(){}[0]
    }

    final object Formats { // kotlinx.datetime/LocalDate.Formats|null[0]
        final val ISO_BASIC // kotlinx.datetime/LocalDate.Formats.ISO_BASIC|{}ISO_BASIC[0]
            final fun <get-ISO_BASIC>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDate> // kotlinx.datetime/LocalDate.Formats.ISO_BASIC.<get-ISO_BASIC>|<get-ISO_BASIC>(){}[0]

        // Targets: [native, wasmWasi]
        final val ISO // kotlinx.datetime/LocalDate.Formats.ISO|{}ISO[0]
            final fun <get-ISO>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDate> // kotlinx.datetime/LocalDate.Formats.ISO.<get-ISO>|<get-ISO>(){}[0]

        // Targets: [js, wasmJs]
        final val ISO // kotlinx.datetime/LocalDate.Formats.ISO|<get-ISO>(){}[0]
            final fun <get-ISO>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDate> // kotlinx.datetime/LocalDate.Formats.ISO.<get-ISO>|<get-ISO>(){}[0]
    }

    // Targets: [native, wasmWasi]
    final val month // kotlinx.datetime/LocalDate.month|<get-month>(){}[0]
        final fun <get-month>(): kotlinx.datetime/Month // kotlinx.datetime/LocalDate.month.<get-month>|<get-month>(){}[0]

    // Targets: [js, wasmJs]
    final val month // kotlinx.datetime/LocalDate.month|{}month[0]
        final fun <get-month>(): kotlinx.datetime/Month // kotlinx.datetime/LocalDate.month.<get-month>|<get-month>(){}[0]
}

final class kotlinx.datetime/LocalDateTime : kotlin/Comparable<kotlinx.datetime/LocalDateTime> { // kotlinx.datetime/LocalDateTime|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int =..., kotlin/Int =...) // kotlinx.datetime/LocalDateTime.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlinx.datetime/Month, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int =..., kotlin/Int =...) // kotlinx.datetime/LocalDateTime.<init>|<init>(kotlin.Int;kotlinx.datetime.Month;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    constructor <init>(kotlinx.datetime/LocalDate, kotlinx.datetime/LocalTime) // kotlinx.datetime/LocalDateTime.<init>|<init>(kotlinx.datetime.LocalDate;kotlinx.datetime.LocalTime){}[0]

    final val date // kotlinx.datetime/LocalDateTime.date|{}date[0]
        final fun <get-date>(): kotlinx.datetime/LocalDate // kotlinx.datetime/LocalDateTime.date.<get-date>|<get-date>(){}[0]
    final val dayOfMonth // kotlinx.datetime/LocalDateTime.dayOfMonth|{}dayOfMonth[0]
        final fun <get-dayOfMonth>(): kotlin/Int // kotlinx.datetime/LocalDateTime.dayOfMonth.<get-dayOfMonth>|<get-dayOfMonth>(){}[0]
    final val dayOfWeek // kotlinx.datetime/LocalDateTime.dayOfWeek|{}dayOfWeek[0]
        final fun <get-dayOfWeek>(): kotlinx.datetime/DayOfWeek // kotlinx.datetime/LocalDateTime.dayOfWeek.<get-dayOfWeek>|<get-dayOfWeek>(){}[0]
    final val dayOfYear // kotlinx.datetime/LocalDateTime.dayOfYear|{}dayOfYear[0]
        final fun <get-dayOfYear>(): kotlin/Int // kotlinx.datetime/LocalDateTime.dayOfYear.<get-dayOfYear>|<get-dayOfYear>(){}[0]
    final val hour // kotlinx.datetime/LocalDateTime.hour|{}hour[0]
        final fun <get-hour>(): kotlin/Int // kotlinx.datetime/LocalDateTime.hour.<get-hour>|<get-hour>(){}[0]
    final val minute // kotlinx.datetime/LocalDateTime.minute|{}minute[0]
        final fun <get-minute>(): kotlin/Int // kotlinx.datetime/LocalDateTime.minute.<get-minute>|<get-minute>(){}[0]
    final val month // kotlinx.datetime/LocalDateTime.month|{}month[0]
        final fun <get-month>(): kotlinx.datetime/Month // kotlinx.datetime/LocalDateTime.month.<get-month>|<get-month>(){}[0]
    final val monthNumber // kotlinx.datetime/LocalDateTime.monthNumber|{}monthNumber[0]
        final fun <get-monthNumber>(): kotlin/Int // kotlinx.datetime/LocalDateTime.monthNumber.<get-monthNumber>|<get-monthNumber>(){}[0]
    final val nanosecond // kotlinx.datetime/LocalDateTime.nanosecond|{}nanosecond[0]
        final fun <get-nanosecond>(): kotlin/Int // kotlinx.datetime/LocalDateTime.nanosecond.<get-nanosecond>|<get-nanosecond>(){}[0]
    final val second // kotlinx.datetime/LocalDateTime.second|{}second[0]
        final fun <get-second>(): kotlin/Int // kotlinx.datetime/LocalDateTime.second.<get-second>|<get-second>(){}[0]
    final val time // kotlinx.datetime/LocalDateTime.time|{}time[0]
        final fun <get-time>(): kotlinx.datetime/LocalTime // kotlinx.datetime/LocalDateTime.time.<get-time>|<get-time>(){}[0]
    final val year // kotlinx.datetime/LocalDateTime.year|{}year[0]
        final fun <get-year>(): kotlin/Int // kotlinx.datetime/LocalDateTime.year.<get-year>|<get-year>(){}[0]

    final fun compareTo(kotlinx.datetime/LocalDateTime): kotlin/Int // kotlinx.datetime/LocalDateTime.compareTo|compareTo(kotlinx.datetime.LocalDateTime){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime/LocalDateTime.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.datetime/LocalDateTime.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlinx.datetime/LocalDateTime.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime/LocalDateTime.Companion|null[0]
        final fun Format(kotlin/Function1<kotlinx.datetime.format/DateTimeFormatBuilder.WithDateTime, kotlin/Unit>): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDateTime> // kotlinx.datetime/LocalDateTime.Companion.Format|Format(kotlin.Function1<kotlinx.datetime.format.DateTimeFormatBuilder.WithDateTime,kotlin.Unit>){}[0]
        final fun parse(kotlin/CharSequence, kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDateTime> =...): kotlinx.datetime/LocalDateTime // kotlinx.datetime/LocalDateTime.Companion.parse|parse(kotlin.CharSequence;kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.LocalDateTime>){}[0]
        final fun parse(kotlin/String): kotlinx.datetime/LocalDateTime // kotlinx.datetime/LocalDateTime.Companion.parse|parse(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/LocalDateTime> // kotlinx.datetime/LocalDateTime.Companion.serializer|serializer(){}[0]
    }

    final object Formats { // kotlinx.datetime/LocalDateTime.Formats|null[0]
        // Targets: [native, wasmWasi]
        final val ISO // kotlinx.datetime/LocalDateTime.Formats.ISO|{}ISO[0]
            final fun <get-ISO>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDateTime> // kotlinx.datetime/LocalDateTime.Formats.ISO.<get-ISO>|<get-ISO>(){}[0]

        // Targets: [js, wasmJs]
        final val ISO // kotlinx.datetime/LocalDateTime.Formats.ISO|<get-ISO>(){}[0]
            final fun <get-ISO>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDateTime> // kotlinx.datetime/LocalDateTime.Formats.ISO.<get-ISO>|<get-ISO>(){}[0]
    }
}

final class kotlinx.datetime/LocalTime : kotlin/Comparable<kotlinx.datetime/LocalTime> { // kotlinx.datetime/LocalTime|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int =..., kotlin/Int =...) // kotlinx.datetime/LocalTime.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

    final val hour // kotlinx.datetime/LocalTime.hour|{}hour[0]
        final fun <get-hour>(): kotlin/Int // kotlinx.datetime/LocalTime.hour.<get-hour>|<get-hour>(){}[0]
    final val minute // kotlinx.datetime/LocalTime.minute|{}minute[0]
        final fun <get-minute>(): kotlin/Int // kotlinx.datetime/LocalTime.minute.<get-minute>|<get-minute>(){}[0]
    final val nanosecond // kotlinx.datetime/LocalTime.nanosecond|{}nanosecond[0]
        final fun <get-nanosecond>(): kotlin/Int // kotlinx.datetime/LocalTime.nanosecond.<get-nanosecond>|<get-nanosecond>(){}[0]
    final val second // kotlinx.datetime/LocalTime.second|{}second[0]
        final fun <get-second>(): kotlin/Int // kotlinx.datetime/LocalTime.second.<get-second>|<get-second>(){}[0]

    final fun compareTo(kotlinx.datetime/LocalTime): kotlin/Int // kotlinx.datetime/LocalTime.compareTo|compareTo(kotlinx.datetime.LocalTime){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime/LocalTime.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.datetime/LocalTime.hashCode|hashCode(){}[0]
    final fun toMillisecondOfDay(): kotlin/Int // kotlinx.datetime/LocalTime.toMillisecondOfDay|toMillisecondOfDay(){}[0]
    final fun toNanosecondOfDay(): kotlin/Long // kotlinx.datetime/LocalTime.toNanosecondOfDay|toNanosecondOfDay(){}[0]
    final fun toSecondOfDay(): kotlin/Int // kotlinx.datetime/LocalTime.toSecondOfDay|toSecondOfDay(){}[0]
    final fun toString(): kotlin/String // kotlinx.datetime/LocalTime.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime/LocalTime.Companion|null[0]
        final fun Format(kotlin/Function1<kotlinx.datetime.format/DateTimeFormatBuilder.WithTime, kotlin/Unit>): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalTime> // kotlinx.datetime/LocalTime.Companion.Format|Format(kotlin.Function1<kotlinx.datetime.format.DateTimeFormatBuilder.WithTime,kotlin.Unit>){}[0]
        final fun fromMillisecondOfDay(kotlin/Int): kotlinx.datetime/LocalTime // kotlinx.datetime/LocalTime.Companion.fromMillisecondOfDay|fromMillisecondOfDay(kotlin.Int){}[0]
        final fun fromNanosecondOfDay(kotlin/Long): kotlinx.datetime/LocalTime // kotlinx.datetime/LocalTime.Companion.fromNanosecondOfDay|fromNanosecondOfDay(kotlin.Long){}[0]
        final fun fromSecondOfDay(kotlin/Int): kotlinx.datetime/LocalTime // kotlinx.datetime/LocalTime.Companion.fromSecondOfDay|fromSecondOfDay(kotlin.Int){}[0]
        final fun parse(kotlin/CharSequence, kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalTime> =...): kotlinx.datetime/LocalTime // kotlinx.datetime/LocalTime.Companion.parse|parse(kotlin.CharSequence;kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.LocalTime>){}[0]
        final fun parse(kotlin/String): kotlinx.datetime/LocalTime // kotlinx.datetime/LocalTime.Companion.parse|parse(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/LocalTime> // kotlinx.datetime/LocalTime.Companion.serializer|serializer(){}[0]
    }

    final object Formats { // kotlinx.datetime/LocalTime.Formats|null[0]
        // Targets: [native, wasmWasi]
        final val ISO // kotlinx.datetime/LocalTime.Formats.ISO|{}ISO[0]
            final fun <get-ISO>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalTime> // kotlinx.datetime/LocalTime.Formats.ISO.<get-ISO>|<get-ISO>(){}[0]

        // Targets: [js, wasmJs]
        final val ISO // kotlinx.datetime/LocalTime.Formats.ISO|<get-ISO>(){}[0]
            final fun <get-ISO>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalTime> // kotlinx.datetime/LocalTime.Formats.ISO.<get-ISO>|<get-ISO>(){}[0]
    }
}

final class kotlinx.datetime/UtcOffset { // kotlinx.datetime/UtcOffset|null[0]
    final val totalSeconds // kotlinx.datetime/UtcOffset.totalSeconds|{}totalSeconds[0]
        final fun <get-totalSeconds>(): kotlin/Int // kotlinx.datetime/UtcOffset.totalSeconds.<get-totalSeconds>|<get-totalSeconds>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime/UtcOffset.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.datetime/UtcOffset.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlinx.datetime/UtcOffset.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime/UtcOffset.Companion|null[0]
        final val ZERO // kotlinx.datetime/UtcOffset.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): kotlinx.datetime/UtcOffset // kotlinx.datetime/UtcOffset.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun Format(kotlin/Function1<kotlinx.datetime.format/DateTimeFormatBuilder.WithUtcOffset, kotlin/Unit>): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/UtcOffset> // kotlinx.datetime/UtcOffset.Companion.Format|Format(kotlin.Function1<kotlinx.datetime.format.DateTimeFormatBuilder.WithUtcOffset,kotlin.Unit>){}[0]
        final fun parse(kotlin/CharSequence, kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/UtcOffset> =...): kotlinx.datetime/UtcOffset // kotlinx.datetime/UtcOffset.Companion.parse|parse(kotlin.CharSequence;kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.UtcOffset>){}[0]
        final fun parse(kotlin/String): kotlinx.datetime/UtcOffset // kotlinx.datetime/UtcOffset.Companion.parse|parse(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/UtcOffset> // kotlinx.datetime/UtcOffset.Companion.serializer|serializer(){}[0]
    }

    final object Formats { // kotlinx.datetime/UtcOffset.Formats|null[0]
        final val ISO // kotlinx.datetime/UtcOffset.Formats.ISO|<get-ISO>(){}[0]
            final fun <get-ISO>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/UtcOffset> // kotlinx.datetime/UtcOffset.Formats.ISO.<get-ISO>|<get-ISO>(){}[0]

        // Targets: [native, wasmWasi]
        final val FOUR_DIGITS // kotlinx.datetime/UtcOffset.Formats.FOUR_DIGITS|{}FOUR_DIGITS[0]
            final fun <get-FOUR_DIGITS>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/UtcOffset> // kotlinx.datetime/UtcOffset.Formats.FOUR_DIGITS.<get-FOUR_DIGITS>|<get-FOUR_DIGITS>(){}[0]

        // Targets: [native, wasmWasi]
        final val ISO_BASIC // kotlinx.datetime/UtcOffset.Formats.ISO_BASIC|{}ISO_BASIC[0]
            final fun <get-ISO_BASIC>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/UtcOffset> // kotlinx.datetime/UtcOffset.Formats.ISO_BASIC.<get-ISO_BASIC>|<get-ISO_BASIC>(){}[0]

        // Targets: [js, wasmJs]
        final val FOUR_DIGITS // kotlinx.datetime/UtcOffset.Formats.FOUR_DIGITS|<get-FOUR_DIGITS>(){}[0]
            final fun <get-FOUR_DIGITS>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/UtcOffset> // kotlinx.datetime/UtcOffset.Formats.FOUR_DIGITS.<get-FOUR_DIGITS>|<get-FOUR_DIGITS>(){}[0]

        // Targets: [js, wasmJs]
        final val ISO_BASIC // kotlinx.datetime/UtcOffset.Formats.ISO_BASIC|<get-ISO_BASIC>(){}[0]
            final fun <get-ISO_BASIC>(): kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/UtcOffset> // kotlinx.datetime/UtcOffset.Formats.ISO_BASIC.<get-ISO_BASIC>|<get-ISO_BASIC>(){}[0]
    }
}

open class kotlinx.datetime/TimeZone { // kotlinx.datetime/TimeZone|null[0]
    final fun (kotlinx.datetime/Instant).toLocalDateTime(): kotlinx.datetime/LocalDateTime // kotlinx.datetime/TimeZone.toLocalDateTime|toLocalDateTime@kotlinx.datetime.Instant(){}[0]
    final fun (kotlinx.datetime/LocalDateTime).toInstant(): kotlinx.datetime/Instant // kotlinx.datetime/TimeZone.toInstant|toInstant@kotlinx.datetime.LocalDateTime(){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime/TimeZone.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime/TimeZone.hashCode|hashCode(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime/TimeZone.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime/TimeZone.Companion|null[0]
        final val UTC // kotlinx.datetime/TimeZone.Companion.UTC|{}UTC[0]
            final fun <get-UTC>(): kotlinx.datetime/FixedOffsetTimeZone // kotlinx.datetime/TimeZone.Companion.UTC.<get-UTC>|<get-UTC>(){}[0]
        final val availableZoneIds // kotlinx.datetime/TimeZone.Companion.availableZoneIds|{}availableZoneIds[0]
            final fun <get-availableZoneIds>(): kotlin.collections/Set<kotlin/String> // kotlinx.datetime/TimeZone.Companion.availableZoneIds.<get-availableZoneIds>|<get-availableZoneIds>(){}[0]

        final fun currentSystemDefault(): kotlinx.datetime/TimeZone // kotlinx.datetime/TimeZone.Companion.currentSystemDefault|currentSystemDefault(){}[0]
        final fun of(kotlin/String): kotlinx.datetime/TimeZone // kotlinx.datetime/TimeZone.Companion.of|of(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/TimeZone> // kotlinx.datetime/TimeZone.Companion.serializer|serializer(){}[0]
    }

    // Targets: [native, wasmWasi]
    open val id // kotlinx.datetime/TimeZone.id|{}id[0]
        open fun <get-id>(): kotlin/String // kotlinx.datetime/TimeZone.id.<get-id>|<get-id>(){}[0]

    // Targets: [js, wasmJs]
    final val id // kotlinx.datetime/TimeZone.id|{}id[0]
        final fun <get-id>(): kotlin/String // kotlinx.datetime/TimeZone.id.<get-id>|<get-id>(){}[0]
}

sealed class kotlinx.datetime/DateTimePeriod { // kotlinx.datetime/DateTimePeriod|null[0]
    constructor <init>() // kotlinx.datetime/DateTimePeriod.<init>|<init>(){}[0]

    abstract val days // kotlinx.datetime/DateTimePeriod.days|{}days[0]
        abstract fun <get-days>(): kotlin/Int // kotlinx.datetime/DateTimePeriod.days.<get-days>|<get-days>(){}[0]
    final val months // kotlinx.datetime/DateTimePeriod.months|{}months[0]
        final fun <get-months>(): kotlin/Int // kotlinx.datetime/DateTimePeriod.months.<get-months>|<get-months>(){}[0]
    final val years // kotlinx.datetime/DateTimePeriod.years|{}years[0]
        final fun <get-years>(): kotlin/Int // kotlinx.datetime/DateTimePeriod.years.<get-years>|<get-years>(){}[0]
    open val hours // kotlinx.datetime/DateTimePeriod.hours|{}hours[0]
        open fun <get-hours>(): kotlin/Int // kotlinx.datetime/DateTimePeriod.hours.<get-hours>|<get-hours>(){}[0]
    open val minutes // kotlinx.datetime/DateTimePeriod.minutes|{}minutes[0]
        open fun <get-minutes>(): kotlin/Int // kotlinx.datetime/DateTimePeriod.minutes.<get-minutes>|<get-minutes>(){}[0]
    open val nanoseconds // kotlinx.datetime/DateTimePeriod.nanoseconds|{}nanoseconds[0]
        open fun <get-nanoseconds>(): kotlin/Int // kotlinx.datetime/DateTimePeriod.nanoseconds.<get-nanoseconds>|<get-nanoseconds>(){}[0]
    open val seconds // kotlinx.datetime/DateTimePeriod.seconds|{}seconds[0]
        open fun <get-seconds>(): kotlin/Int // kotlinx.datetime/DateTimePeriod.seconds.<get-seconds>|<get-seconds>(){}[0]

    open fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime/DateTimePeriod.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime/DateTimePeriod.hashCode|hashCode(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime/DateTimePeriod.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime/DateTimePeriod.Companion|null[0]
        final fun parse(kotlin/String): kotlinx.datetime/DateTimePeriod // kotlinx.datetime/DateTimePeriod.Companion.parse|parse(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/DateTimePeriod> // kotlinx.datetime/DateTimePeriod.Companion.serializer|serializer(){}[0]
    }
}

sealed class kotlinx.datetime/DateTimeUnit { // kotlinx.datetime/DateTimeUnit|null[0]
    constructor <init>() // kotlinx.datetime/DateTimeUnit.<init>|<init>(){}[0]

    abstract fun times(kotlin/Int): kotlinx.datetime/DateTimeUnit // kotlinx.datetime/DateTimeUnit.times|times(kotlin.Int){}[0]
    final fun formatToString(kotlin/Int, kotlin/String): kotlin/String // kotlinx.datetime/DateTimeUnit.formatToString|formatToString(kotlin.Int;kotlin.String){}[0]
    final fun formatToString(kotlin/Long, kotlin/String): kotlin/String // kotlinx.datetime/DateTimeUnit.formatToString|formatToString(kotlin.Long;kotlin.String){}[0]

    final class DayBased : kotlinx.datetime/DateTimeUnit.DateBased { // kotlinx.datetime/DateTimeUnit.DayBased|null[0]
        constructor <init>(kotlin/Int) // kotlinx.datetime/DateTimeUnit.DayBased.<init>|<init>(kotlin.Int){}[0]

        final val days // kotlinx.datetime/DateTimeUnit.DayBased.days|{}days[0]
            final fun <get-days>(): kotlin/Int // kotlinx.datetime/DateTimeUnit.DayBased.days.<get-days>|<get-days>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime/DateTimeUnit.DayBased.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // kotlinx.datetime/DateTimeUnit.DayBased.hashCode|hashCode(){}[0]
        final fun times(kotlin/Int): kotlinx.datetime/DateTimeUnit.DayBased // kotlinx.datetime/DateTimeUnit.DayBased.times|times(kotlin.Int){}[0]
        final fun toString(): kotlin/String // kotlinx.datetime/DateTimeUnit.DayBased.toString|toString(){}[0]

        final object Companion { // kotlinx.datetime/DateTimeUnit.DayBased.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/DateTimeUnit.DayBased> // kotlinx.datetime/DateTimeUnit.DayBased.Companion.serializer|serializer(){}[0]
        }
    }

    final class MonthBased : kotlinx.datetime/DateTimeUnit.DateBased { // kotlinx.datetime/DateTimeUnit.MonthBased|null[0]
        constructor <init>(kotlin/Int) // kotlinx.datetime/DateTimeUnit.MonthBased.<init>|<init>(kotlin.Int){}[0]

        final val months // kotlinx.datetime/DateTimeUnit.MonthBased.months|{}months[0]
            final fun <get-months>(): kotlin/Int // kotlinx.datetime/DateTimeUnit.MonthBased.months.<get-months>|<get-months>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime/DateTimeUnit.MonthBased.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // kotlinx.datetime/DateTimeUnit.MonthBased.hashCode|hashCode(){}[0]
        final fun times(kotlin/Int): kotlinx.datetime/DateTimeUnit.MonthBased // kotlinx.datetime/DateTimeUnit.MonthBased.times|times(kotlin.Int){}[0]
        final fun toString(): kotlin/String // kotlinx.datetime/DateTimeUnit.MonthBased.toString|toString(){}[0]

        final object Companion { // kotlinx.datetime/DateTimeUnit.MonthBased.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/DateTimeUnit.MonthBased> // kotlinx.datetime/DateTimeUnit.MonthBased.Companion.serializer|serializer(){}[0]
        }
    }

    final class TimeBased : kotlinx.datetime/DateTimeUnit { // kotlinx.datetime/DateTimeUnit.TimeBased|null[0]
        constructor <init>(kotlin/Long) // kotlinx.datetime/DateTimeUnit.TimeBased.<init>|<init>(kotlin.Long){}[0]

        final val duration // kotlinx.datetime/DateTimeUnit.TimeBased.duration|{}duration[0]
            final fun <get-duration>(): kotlin.time/Duration // kotlinx.datetime/DateTimeUnit.TimeBased.duration.<get-duration>|<get-duration>(){}[0]
        final val nanoseconds // kotlinx.datetime/DateTimeUnit.TimeBased.nanoseconds|{}nanoseconds[0]
            final fun <get-nanoseconds>(): kotlin/Long // kotlinx.datetime/DateTimeUnit.TimeBased.nanoseconds.<get-nanoseconds>|<get-nanoseconds>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.datetime/DateTimeUnit.TimeBased.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // kotlinx.datetime/DateTimeUnit.TimeBased.hashCode|hashCode(){}[0]
        final fun times(kotlin/Int): kotlinx.datetime/DateTimeUnit.TimeBased // kotlinx.datetime/DateTimeUnit.TimeBased.times|times(kotlin.Int){}[0]
        final fun toString(): kotlin/String // kotlinx.datetime/DateTimeUnit.TimeBased.toString|toString(){}[0]

        final object Companion { // kotlinx.datetime/DateTimeUnit.TimeBased.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/DateTimeUnit.TimeBased> // kotlinx.datetime/DateTimeUnit.TimeBased.Companion.serializer|serializer(){}[0]
        }
    }

    sealed class DateBased : kotlinx.datetime/DateTimeUnit { // kotlinx.datetime/DateTimeUnit.DateBased|null[0]
        constructor <init>() // kotlinx.datetime/DateTimeUnit.DateBased.<init>|<init>(){}[0]

        final object Companion { // kotlinx.datetime/DateTimeUnit.DateBased.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/DateTimeUnit.DateBased> // kotlinx.datetime/DateTimeUnit.DateBased.Companion.serializer|serializer(){}[0]
        }
    }

    final object Companion { // kotlinx.datetime/DateTimeUnit.Companion|null[0]
        final val CENTURY // kotlinx.datetime/DateTimeUnit.Companion.CENTURY|{}CENTURY[0]
            final fun <get-CENTURY>(): kotlinx.datetime/DateTimeUnit.MonthBased // kotlinx.datetime/DateTimeUnit.Companion.CENTURY.<get-CENTURY>|<get-CENTURY>(){}[0]
        final val DAY // kotlinx.datetime/DateTimeUnit.Companion.DAY|{}DAY[0]
            final fun <get-DAY>(): kotlinx.datetime/DateTimeUnit.DayBased // kotlinx.datetime/DateTimeUnit.Companion.DAY.<get-DAY>|<get-DAY>(){}[0]
        final val HOUR // kotlinx.datetime/DateTimeUnit.Companion.HOUR|{}HOUR[0]
            final fun <get-HOUR>(): kotlinx.datetime/DateTimeUnit.TimeBased // kotlinx.datetime/DateTimeUnit.Companion.HOUR.<get-HOUR>|<get-HOUR>(){}[0]
        final val MICROSECOND // kotlinx.datetime/DateTimeUnit.Companion.MICROSECOND|{}MICROSECOND[0]
            final fun <get-MICROSECOND>(): kotlinx.datetime/DateTimeUnit.TimeBased // kotlinx.datetime/DateTimeUnit.Companion.MICROSECOND.<get-MICROSECOND>|<get-MICROSECOND>(){}[0]
        final val MILLISECOND // kotlinx.datetime/DateTimeUnit.Companion.MILLISECOND|{}MILLISECOND[0]
            final fun <get-MILLISECOND>(): kotlinx.datetime/DateTimeUnit.TimeBased // kotlinx.datetime/DateTimeUnit.Companion.MILLISECOND.<get-MILLISECOND>|<get-MILLISECOND>(){}[0]
        final val MINUTE // kotlinx.datetime/DateTimeUnit.Companion.MINUTE|{}MINUTE[0]
            final fun <get-MINUTE>(): kotlinx.datetime/DateTimeUnit.TimeBased // kotlinx.datetime/DateTimeUnit.Companion.MINUTE.<get-MINUTE>|<get-MINUTE>(){}[0]
        final val MONTH // kotlinx.datetime/DateTimeUnit.Companion.MONTH|{}MONTH[0]
            final fun <get-MONTH>(): kotlinx.datetime/DateTimeUnit.MonthBased // kotlinx.datetime/DateTimeUnit.Companion.MONTH.<get-MONTH>|<get-MONTH>(){}[0]
        final val NANOSECOND // kotlinx.datetime/DateTimeUnit.Companion.NANOSECOND|{}NANOSECOND[0]
            final fun <get-NANOSECOND>(): kotlinx.datetime/DateTimeUnit.TimeBased // kotlinx.datetime/DateTimeUnit.Companion.NANOSECOND.<get-NANOSECOND>|<get-NANOSECOND>(){}[0]
        final val QUARTER // kotlinx.datetime/DateTimeUnit.Companion.QUARTER|{}QUARTER[0]
            final fun <get-QUARTER>(): kotlinx.datetime/DateTimeUnit.MonthBased // kotlinx.datetime/DateTimeUnit.Companion.QUARTER.<get-QUARTER>|<get-QUARTER>(){}[0]
        final val SECOND // kotlinx.datetime/DateTimeUnit.Companion.SECOND|{}SECOND[0]
            final fun <get-SECOND>(): kotlinx.datetime/DateTimeUnit.TimeBased // kotlinx.datetime/DateTimeUnit.Companion.SECOND.<get-SECOND>|<get-SECOND>(){}[0]
        final val WEEK // kotlinx.datetime/DateTimeUnit.Companion.WEEK|{}WEEK[0]
            final fun <get-WEEK>(): kotlinx.datetime/DateTimeUnit.DayBased // kotlinx.datetime/DateTimeUnit.Companion.WEEK.<get-WEEK>|<get-WEEK>(){}[0]
        final val YEAR // kotlinx.datetime/DateTimeUnit.Companion.YEAR|{}YEAR[0]
            final fun <get-YEAR>(): kotlinx.datetime/DateTimeUnit.MonthBased // kotlinx.datetime/DateTimeUnit.Companion.YEAR.<get-YEAR>|<get-YEAR>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<kotlinx.datetime/DateTimeUnit> // kotlinx.datetime/DateTimeUnit.Companion.serializer|serializer(){}[0]
    }
}

final object kotlinx.datetime.serializers/DateBasedDateTimeUnitSerializer : kotlinx.serialization.internal/AbstractPolymorphicSerializer<kotlinx.datetime/DateTimeUnit.DateBased> { // kotlinx.datetime.serializers/DateBasedDateTimeUnitSerializer|null[0]
    final val baseClass // kotlinx.datetime.serializers/DateBasedDateTimeUnitSerializer.baseClass|{}baseClass[0]
        final fun <get-baseClass>(): kotlin.reflect/KClass<kotlinx.datetime/DateTimeUnit.DateBased> // kotlinx.datetime.serializers/DateBasedDateTimeUnitSerializer.baseClass.<get-baseClass>|<get-baseClass>(){}[0]
    final val descriptor // kotlinx.datetime.serializers/DateBasedDateTimeUnitSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/DateBasedDateTimeUnitSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun findPolymorphicSerializerOrNull(kotlinx.serialization.encoding/CompositeDecoder, kotlin/String?): kotlinx.serialization/DeserializationStrategy<kotlinx.datetime/DateTimeUnit.DateBased>? // kotlinx.datetime.serializers/DateBasedDateTimeUnitSerializer.findPolymorphicSerializerOrNull|findPolymorphicSerializerOrNull(kotlinx.serialization.encoding.CompositeDecoder;kotlin.String?){}[0]
    final fun findPolymorphicSerializerOrNull(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/DateTimeUnit.DateBased): kotlinx.serialization/SerializationStrategy<kotlinx.datetime/DateTimeUnit.DateBased>? // kotlinx.datetime.serializers/DateBasedDateTimeUnitSerializer.findPolymorphicSerializerOrNull|findPolymorphicSerializerOrNull(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.DateTimeUnit.DateBased){}[0]
}

final object kotlinx.datetime.serializers/DatePeriodComponentSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/DatePeriod> { // kotlinx.datetime.serializers/DatePeriodComponentSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/DatePeriodComponentSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/DatePeriodComponentSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/DatePeriod // kotlinx.datetime.serializers/DatePeriodComponentSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/DatePeriod) // kotlinx.datetime.serializers/DatePeriodComponentSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.DatePeriod){}[0]
}

final object kotlinx.datetime.serializers/DatePeriodIso8601Serializer : kotlinx.serialization/KSerializer<kotlinx.datetime/DatePeriod> { // kotlinx.datetime.serializers/DatePeriodIso8601Serializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/DatePeriodIso8601Serializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/DatePeriodIso8601Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/DatePeriod // kotlinx.datetime.serializers/DatePeriodIso8601Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/DatePeriod) // kotlinx.datetime.serializers/DatePeriodIso8601Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.DatePeriod){}[0]
}

final object kotlinx.datetime.serializers/DateTimePeriodComponentSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/DateTimePeriod> { // kotlinx.datetime.serializers/DateTimePeriodComponentSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/DateTimePeriodComponentSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/DateTimePeriodComponentSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/DateTimePeriod // kotlinx.datetime.serializers/DateTimePeriodComponentSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/DateTimePeriod) // kotlinx.datetime.serializers/DateTimePeriodComponentSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.DateTimePeriod){}[0]
}

final object kotlinx.datetime.serializers/DateTimePeriodIso8601Serializer : kotlinx.serialization/KSerializer<kotlinx.datetime/DateTimePeriod> { // kotlinx.datetime.serializers/DateTimePeriodIso8601Serializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/DateTimePeriodIso8601Serializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/DateTimePeriodIso8601Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/DateTimePeriod // kotlinx.datetime.serializers/DateTimePeriodIso8601Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/DateTimePeriod) // kotlinx.datetime.serializers/DateTimePeriodIso8601Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.DateTimePeriod){}[0]
}

final object kotlinx.datetime.serializers/DateTimeUnitSerializer : kotlinx.serialization.internal/AbstractPolymorphicSerializer<kotlinx.datetime/DateTimeUnit> { // kotlinx.datetime.serializers/DateTimeUnitSerializer|null[0]
    final val baseClass // kotlinx.datetime.serializers/DateTimeUnitSerializer.baseClass|{}baseClass[0]
        final fun <get-baseClass>(): kotlin.reflect/KClass<kotlinx.datetime/DateTimeUnit> // kotlinx.datetime.serializers/DateTimeUnitSerializer.baseClass.<get-baseClass>|<get-baseClass>(){}[0]
    final val descriptor // kotlinx.datetime.serializers/DateTimeUnitSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/DateTimeUnitSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun findPolymorphicSerializerOrNull(kotlinx.serialization.encoding/CompositeDecoder, kotlin/String?): kotlinx.serialization/DeserializationStrategy<kotlinx.datetime/DateTimeUnit>? // kotlinx.datetime.serializers/DateTimeUnitSerializer.findPolymorphicSerializerOrNull|findPolymorphicSerializerOrNull(kotlinx.serialization.encoding.CompositeDecoder;kotlin.String?){}[0]
    final fun findPolymorphicSerializerOrNull(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/DateTimeUnit): kotlinx.serialization/SerializationStrategy<kotlinx.datetime/DateTimeUnit>? // kotlinx.datetime.serializers/DateTimeUnitSerializer.findPolymorphicSerializerOrNull|findPolymorphicSerializerOrNull(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.DateTimeUnit){}[0]
}

final object kotlinx.datetime.serializers/DayBasedDateTimeUnitSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/DateTimeUnit.DayBased> { // kotlinx.datetime.serializers/DayBasedDateTimeUnitSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/DayBasedDateTimeUnitSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/DayBasedDateTimeUnitSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/DateTimeUnit.DayBased // kotlinx.datetime.serializers/DayBasedDateTimeUnitSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/DateTimeUnit.DayBased) // kotlinx.datetime.serializers/DayBasedDateTimeUnitSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.DateTimeUnit.DayBased){}[0]
}

final object kotlinx.datetime.serializers/DayOfWeekSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/DayOfWeek> { // kotlinx.datetime.serializers/DayOfWeekSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/DayOfWeekSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/DayOfWeekSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/DayOfWeek // kotlinx.datetime.serializers/DayOfWeekSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/DayOfWeek) // kotlinx.datetime.serializers/DayOfWeekSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.DayOfWeek){}[0]
}

final object kotlinx.datetime.serializers/FixedOffsetTimeZoneSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/FixedOffsetTimeZone> { // kotlinx.datetime.serializers/FixedOffsetTimeZoneSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/FixedOffsetTimeZoneSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/FixedOffsetTimeZoneSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/FixedOffsetTimeZone // kotlinx.datetime.serializers/FixedOffsetTimeZoneSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/FixedOffsetTimeZone) // kotlinx.datetime.serializers/FixedOffsetTimeZoneSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.FixedOffsetTimeZone){}[0]
}

final object kotlinx.datetime.serializers/InstantComponentSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/Instant> { // kotlinx.datetime.serializers/InstantComponentSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/InstantComponentSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/InstantComponentSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/Instant // kotlinx.datetime.serializers/InstantComponentSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/Instant) // kotlinx.datetime.serializers/InstantComponentSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.Instant){}[0]
}

final object kotlinx.datetime.serializers/InstantIso8601Serializer : kotlinx.serialization/KSerializer<kotlinx.datetime/Instant> { // kotlinx.datetime.serializers/InstantIso8601Serializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/InstantIso8601Serializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/InstantIso8601Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/Instant // kotlinx.datetime.serializers/InstantIso8601Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/Instant) // kotlinx.datetime.serializers/InstantIso8601Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.Instant){}[0]
}

final object kotlinx.datetime.serializers/LocalDateComponentSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/LocalDate> { // kotlinx.datetime.serializers/LocalDateComponentSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/LocalDateComponentSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/LocalDateComponentSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/LocalDate // kotlinx.datetime.serializers/LocalDateComponentSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/LocalDate) // kotlinx.datetime.serializers/LocalDateComponentSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.LocalDate){}[0]
}

final object kotlinx.datetime.serializers/LocalDateIso8601Serializer : kotlinx.serialization/KSerializer<kotlinx.datetime/LocalDate> { // kotlinx.datetime.serializers/LocalDateIso8601Serializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/LocalDateIso8601Serializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/LocalDateIso8601Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/LocalDate // kotlinx.datetime.serializers/LocalDateIso8601Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/LocalDate) // kotlinx.datetime.serializers/LocalDateIso8601Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.LocalDate){}[0]
}

final object kotlinx.datetime.serializers/LocalDateTimeComponentSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/LocalDateTime> { // kotlinx.datetime.serializers/LocalDateTimeComponentSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/LocalDateTimeComponentSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/LocalDateTimeComponentSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/LocalDateTime // kotlinx.datetime.serializers/LocalDateTimeComponentSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/LocalDateTime) // kotlinx.datetime.serializers/LocalDateTimeComponentSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.LocalDateTime){}[0]
}

final object kotlinx.datetime.serializers/LocalDateTimeIso8601Serializer : kotlinx.serialization/KSerializer<kotlinx.datetime/LocalDateTime> { // kotlinx.datetime.serializers/LocalDateTimeIso8601Serializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/LocalDateTimeIso8601Serializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/LocalDateTimeIso8601Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/LocalDateTime // kotlinx.datetime.serializers/LocalDateTimeIso8601Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/LocalDateTime) // kotlinx.datetime.serializers/LocalDateTimeIso8601Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.LocalDateTime){}[0]
}

final object kotlinx.datetime.serializers/LocalTimeComponentSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/LocalTime> { // kotlinx.datetime.serializers/LocalTimeComponentSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/LocalTimeComponentSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/LocalTimeComponentSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/LocalTime // kotlinx.datetime.serializers/LocalTimeComponentSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/LocalTime) // kotlinx.datetime.serializers/LocalTimeComponentSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.LocalTime){}[0]
}

final object kotlinx.datetime.serializers/LocalTimeIso8601Serializer : kotlinx.serialization/KSerializer<kotlinx.datetime/LocalTime> { // kotlinx.datetime.serializers/LocalTimeIso8601Serializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/LocalTimeIso8601Serializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/LocalTimeIso8601Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/LocalTime // kotlinx.datetime.serializers/LocalTimeIso8601Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/LocalTime) // kotlinx.datetime.serializers/LocalTimeIso8601Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.LocalTime){}[0]
}

final object kotlinx.datetime.serializers/MonthBasedDateTimeUnitSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/DateTimeUnit.MonthBased> { // kotlinx.datetime.serializers/MonthBasedDateTimeUnitSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/MonthBasedDateTimeUnitSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/MonthBasedDateTimeUnitSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/DateTimeUnit.MonthBased // kotlinx.datetime.serializers/MonthBasedDateTimeUnitSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/DateTimeUnit.MonthBased) // kotlinx.datetime.serializers/MonthBasedDateTimeUnitSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.DateTimeUnit.MonthBased){}[0]
}

final object kotlinx.datetime.serializers/MonthSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/Month> { // kotlinx.datetime.serializers/MonthSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/MonthSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/MonthSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/Month // kotlinx.datetime.serializers/MonthSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/Month) // kotlinx.datetime.serializers/MonthSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.Month){}[0]
}

final object kotlinx.datetime.serializers/TimeBasedDateTimeUnitSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/DateTimeUnit.TimeBased> { // kotlinx.datetime.serializers/TimeBasedDateTimeUnitSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/TimeBasedDateTimeUnitSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/TimeBasedDateTimeUnitSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/DateTimeUnit.TimeBased // kotlinx.datetime.serializers/TimeBasedDateTimeUnitSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/DateTimeUnit.TimeBased) // kotlinx.datetime.serializers/TimeBasedDateTimeUnitSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.DateTimeUnit.TimeBased){}[0]
}

final object kotlinx.datetime.serializers/TimeZoneSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/TimeZone> { // kotlinx.datetime.serializers/TimeZoneSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/TimeZoneSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/TimeZoneSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/TimeZone // kotlinx.datetime.serializers/TimeZoneSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/TimeZone) // kotlinx.datetime.serializers/TimeZoneSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.TimeZone){}[0]
}

final object kotlinx.datetime.serializers/UtcOffsetSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/UtcOffset> { // kotlinx.datetime.serializers/UtcOffsetSerializer|null[0]
    final val descriptor // kotlinx.datetime.serializers/UtcOffsetSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // kotlinx.datetime.serializers/UtcOffsetSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/UtcOffset // kotlinx.datetime.serializers/UtcOffsetSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/UtcOffset) // kotlinx.datetime.serializers/UtcOffsetSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.UtcOffset){}[0]
}

final val kotlinx.datetime/isDistantFuture // kotlinx.datetime/isDistantFuture|@kotlinx.datetime.Instant{}isDistantFuture[0]
    final fun (kotlinx.datetime/Instant).<get-isDistantFuture>(): kotlin/Boolean // kotlinx.datetime/isDistantFuture.<get-isDistantFuture>|<get-isDistantFuture>@kotlinx.datetime.Instant(){}[0]
final val kotlinx.datetime/isDistantPast // kotlinx.datetime/isDistantPast|@kotlinx.datetime.Instant{}isDistantPast[0]
    final fun (kotlinx.datetime/Instant).<get-isDistantPast>(): kotlin/Boolean // kotlinx.datetime/isDistantPast.<get-isDistantPast>|<get-isDistantPast>@kotlinx.datetime.Instant(){}[0]
final val kotlinx.datetime/isoDayNumber // kotlinx.datetime/isoDayNumber|@kotlinx.datetime.DayOfWeek{}isoDayNumber[0]
    final fun (kotlinx.datetime/DayOfWeek).<get-isoDayNumber>(): kotlin/Int // kotlinx.datetime/isoDayNumber.<get-isoDayNumber>|<get-isoDayNumber>@kotlinx.datetime.DayOfWeek(){}[0]
final val kotlinx.datetime/number // kotlinx.datetime/number|@kotlinx.datetime.Month{}number[0]
    final fun (kotlinx.datetime/Month).<get-number>(): kotlin/Int // kotlinx.datetime/number.<get-number>|<get-number>@kotlinx.datetime.Month(){}[0]

final fun (kotlin.time/Duration).kotlinx.datetime/toDateTimePeriod(): kotlinx.datetime/DateTimePeriod // kotlinx.datetime/toDateTimePeriod|toDateTimePeriod@kotlin.time.Duration(){}[0]
final fun (kotlin.time/TimeSource).kotlinx.datetime/asClock(kotlinx.datetime/Instant): kotlinx.datetime/Clock // kotlinx.datetime/asClock|asClock@kotlin.time.TimeSource(kotlinx.datetime.Instant){}[0]
final fun (kotlin/String).kotlinx.datetime/toDatePeriod(): kotlinx.datetime/DatePeriod // kotlinx.datetime/toDatePeriod|toDatePeriod@kotlin.String(){}[0]
final fun (kotlin/String).kotlinx.datetime/toDateTimePeriod(): kotlinx.datetime/DateTimePeriod // kotlinx.datetime/toDateTimePeriod|toDateTimePeriod@kotlin.String(){}[0]
final fun (kotlin/String).kotlinx.datetime/toInstant(): kotlinx.datetime/Instant // kotlinx.datetime/toInstant|toInstant@kotlin.String(){}[0]
final fun (kotlin/String).kotlinx.datetime/toLocalDate(): kotlinx.datetime/LocalDate // kotlinx.datetime/toLocalDate|toLocalDate@kotlin.String(){}[0]
final fun (kotlin/String).kotlinx.datetime/toLocalDateTime(): kotlinx.datetime/LocalDateTime // kotlinx.datetime/toLocalDateTime|toLocalDateTime@kotlin.String(){}[0]
final fun (kotlin/String).kotlinx.datetime/toLocalTime(): kotlinx.datetime/LocalTime // kotlinx.datetime/toLocalTime|toLocalTime@kotlin.String(){}[0]
final fun (kotlinx.datetime.format/DateTimeComponents.Companion).kotlinx.datetime.format/parse(kotlin/CharSequence, kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime.format/DateTimeComponents>): kotlinx.datetime.format/DateTimeComponents // kotlinx.datetime.format/parse|parse@kotlinx.datetime.format.DateTimeComponents.Companion(kotlin.CharSequence;kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.format.DateTimeComponents>){}[0]
final fun (kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime.format/DateTimeComponents>).kotlinx.datetime.format/format(kotlin/Function1<kotlinx.datetime.format/DateTimeComponents, kotlin/Unit>): kotlin/String // kotlinx.datetime.format/format|format@kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.format.DateTimeComponents>(kotlin.Function1<kotlinx.datetime.format.DateTimeComponents,kotlin.Unit>){}[0]
final fun (kotlinx.datetime.format/DateTimeFormatBuilder).kotlinx.datetime.format/byUnicodePattern(kotlin/String) // kotlinx.datetime.format/byUnicodePattern|byUnicodePattern@kotlinx.datetime.format.DateTimeFormatBuilder(kotlin.String){}[0]
final fun (kotlinx.datetime.format/DateTimeFormatBuilder).kotlinx.datetime.format/char(kotlin/Char) // kotlinx.datetime.format/char|char@kotlinx.datetime.format.DateTimeFormatBuilder(kotlin.Char){}[0]
final fun (kotlinx.datetime/Clock).kotlinx.datetime/asTimeSource(): kotlin.time/TimeSource.WithComparableMarks // kotlinx.datetime/asTimeSource|asTimeSource@kotlinx.datetime.Clock(){}[0]
final fun (kotlinx.datetime/Clock).kotlinx.datetime/todayAt(kotlinx.datetime/TimeZone): kotlinx.datetime/LocalDate // kotlinx.datetime/todayAt|todayAt@kotlinx.datetime.Clock(kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Clock).kotlinx.datetime/todayIn(kotlinx.datetime/TimeZone): kotlinx.datetime/LocalDate // kotlinx.datetime/todayIn|todayIn@kotlinx.datetime.Clock(kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/DatePeriod).kotlinx.datetime/plus(kotlinx.datetime/DatePeriod): kotlinx.datetime/DatePeriod // kotlinx.datetime/plus|plus@kotlinx.datetime.DatePeriod(kotlinx.datetime.DatePeriod){}[0]
final fun (kotlinx.datetime/DateTimePeriod).kotlinx.datetime/plus(kotlinx.datetime/DateTimePeriod): kotlinx.datetime/DateTimePeriod // kotlinx.datetime/plus|plus@kotlinx.datetime.DateTimePeriod(kotlinx.datetime.DateTimePeriod){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/daysUntil(kotlinx.datetime/Instant, kotlinx.datetime/TimeZone): kotlin/Int // kotlinx.datetime/daysUntil|daysUntil@kotlinx.datetime.Instant(kotlinx.datetime.Instant;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/format(kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime.format/DateTimeComponents>, kotlinx.datetime/UtcOffset =...): kotlin/String // kotlinx.datetime/format|format@kotlinx.datetime.Instant(kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.format.DateTimeComponents>;kotlinx.datetime.UtcOffset){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/minus(kotlin/Int, kotlinx.datetime/DateTimeUnit, kotlinx.datetime/TimeZone): kotlinx.datetime/Instant // kotlinx.datetime/minus|minus@kotlinx.datetime.Instant(kotlin.Int;kotlinx.datetime.DateTimeUnit;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/minus(kotlin/Int, kotlinx.datetime/DateTimeUnit.TimeBased): kotlinx.datetime/Instant // kotlinx.datetime/minus|minus@kotlinx.datetime.Instant(kotlin.Int;kotlinx.datetime.DateTimeUnit.TimeBased){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/minus(kotlin/Long, kotlinx.datetime/DateTimeUnit, kotlinx.datetime/TimeZone): kotlinx.datetime/Instant // kotlinx.datetime/minus|minus@kotlinx.datetime.Instant(kotlin.Long;kotlinx.datetime.DateTimeUnit;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/minus(kotlin/Long, kotlinx.datetime/DateTimeUnit.TimeBased): kotlinx.datetime/Instant // kotlinx.datetime/minus|minus@kotlinx.datetime.Instant(kotlin.Long;kotlinx.datetime.DateTimeUnit.TimeBased){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/minus(kotlinx.datetime/DateTimePeriod, kotlinx.datetime/TimeZone): kotlinx.datetime/Instant // kotlinx.datetime/minus|minus@kotlinx.datetime.Instant(kotlinx.datetime.DateTimePeriod;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/minus(kotlinx.datetime/DateTimeUnit, kotlinx.datetime/TimeZone): kotlinx.datetime/Instant // kotlinx.datetime/minus|minus@kotlinx.datetime.Instant(kotlinx.datetime.DateTimeUnit;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/minus(kotlinx.datetime/DateTimeUnit.TimeBased): kotlinx.datetime/Instant // kotlinx.datetime/minus|minus@kotlinx.datetime.Instant(kotlinx.datetime.DateTimeUnit.TimeBased){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/minus(kotlinx.datetime/Instant, kotlinx.datetime/DateTimeUnit, kotlinx.datetime/TimeZone): kotlin/Long // kotlinx.datetime/minus|minus@kotlinx.datetime.Instant(kotlinx.datetime.Instant;kotlinx.datetime.DateTimeUnit;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/minus(kotlinx.datetime/Instant, kotlinx.datetime/DateTimeUnit.TimeBased): kotlin/Long // kotlinx.datetime/minus|minus@kotlinx.datetime.Instant(kotlinx.datetime.Instant;kotlinx.datetime.DateTimeUnit.TimeBased){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/minus(kotlinx.datetime/Instant, kotlinx.datetime/TimeZone): kotlinx.datetime/DateTimePeriod // kotlinx.datetime/minus|minus@kotlinx.datetime.Instant(kotlinx.datetime.Instant;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/monthsUntil(kotlinx.datetime/Instant, kotlinx.datetime/TimeZone): kotlin/Int // kotlinx.datetime/monthsUntil|monthsUntil@kotlinx.datetime.Instant(kotlinx.datetime.Instant;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/offsetIn(kotlinx.datetime/TimeZone): kotlinx.datetime/UtcOffset // kotlinx.datetime/offsetIn|offsetIn@kotlinx.datetime.Instant(kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/periodUntil(kotlinx.datetime/Instant, kotlinx.datetime/TimeZone): kotlinx.datetime/DateTimePeriod // kotlinx.datetime/periodUntil|periodUntil@kotlinx.datetime.Instant(kotlinx.datetime.Instant;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/plus(kotlin/Int, kotlinx.datetime/DateTimeUnit, kotlinx.datetime/TimeZone): kotlinx.datetime/Instant // kotlinx.datetime/plus|plus@kotlinx.datetime.Instant(kotlin.Int;kotlinx.datetime.DateTimeUnit;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/plus(kotlin/Int, kotlinx.datetime/DateTimeUnit.TimeBased): kotlinx.datetime/Instant // kotlinx.datetime/plus|plus@kotlinx.datetime.Instant(kotlin.Int;kotlinx.datetime.DateTimeUnit.TimeBased){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/plus(kotlin/Long, kotlinx.datetime/DateTimeUnit, kotlinx.datetime/TimeZone): kotlinx.datetime/Instant // kotlinx.datetime/plus|plus@kotlinx.datetime.Instant(kotlin.Long;kotlinx.datetime.DateTimeUnit;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/plus(kotlin/Long, kotlinx.datetime/DateTimeUnit.TimeBased): kotlinx.datetime/Instant // kotlinx.datetime/plus|plus@kotlinx.datetime.Instant(kotlin.Long;kotlinx.datetime.DateTimeUnit.TimeBased){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/plus(kotlinx.datetime/DateTimePeriod, kotlinx.datetime/TimeZone): kotlinx.datetime/Instant // kotlinx.datetime/plus|plus@kotlinx.datetime.Instant(kotlinx.datetime.DateTimePeriod;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/plus(kotlinx.datetime/DateTimeUnit, kotlinx.datetime/TimeZone): kotlinx.datetime/Instant // kotlinx.datetime/plus|plus@kotlinx.datetime.Instant(kotlinx.datetime.DateTimeUnit;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/plus(kotlinx.datetime/DateTimeUnit.TimeBased): kotlinx.datetime/Instant // kotlinx.datetime/plus|plus@kotlinx.datetime.Instant(kotlinx.datetime.DateTimeUnit.TimeBased){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/toLocalDateTime(kotlinx.datetime/TimeZone): kotlinx.datetime/LocalDateTime // kotlinx.datetime/toLocalDateTime|toLocalDateTime@kotlinx.datetime.Instant(kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/until(kotlinx.datetime/Instant, kotlinx.datetime/DateTimeUnit, kotlinx.datetime/TimeZone): kotlin/Long // kotlinx.datetime/until|until@kotlinx.datetime.Instant(kotlinx.datetime.Instant;kotlinx.datetime.DateTimeUnit;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/until(kotlinx.datetime/Instant, kotlinx.datetime/DateTimeUnit.TimeBased): kotlin/Long // kotlinx.datetime/until|until@kotlinx.datetime.Instant(kotlinx.datetime.Instant;kotlinx.datetime.DateTimeUnit.TimeBased){}[0]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/yearsUntil(kotlinx.datetime/Instant, kotlinx.datetime/TimeZone): kotlin/Int // kotlinx.datetime/yearsUntil|yearsUntil@kotlinx.datetime.Instant(kotlinx.datetime.Instant;kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/atStartOfDayIn(kotlinx.datetime/TimeZone): kotlinx.datetime/Instant // kotlinx.datetime/atStartOfDayIn|atStartOfDayIn@kotlinx.datetime.LocalDate(kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/atTime(kotlin/Int, kotlin/Int, kotlin/Int =..., kotlin/Int =...): kotlinx.datetime/LocalDateTime // kotlinx.datetime/atTime|atTime@kotlinx.datetime.LocalDate(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/atTime(kotlinx.datetime/LocalTime): kotlinx.datetime/LocalDateTime // kotlinx.datetime/atTime|atTime@kotlinx.datetime.LocalDate(kotlinx.datetime.LocalTime){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/daysUntil(kotlinx.datetime/LocalDate): kotlin/Int // kotlinx.datetime/daysUntil|daysUntil@kotlinx.datetime.LocalDate(kotlinx.datetime.LocalDate){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/format(kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDate>): kotlin/String // kotlinx.datetime/format|format@kotlinx.datetime.LocalDate(kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.LocalDate>){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/minus(kotlin/Int, kotlinx.datetime/DateTimeUnit.DateBased): kotlinx.datetime/LocalDate // kotlinx.datetime/minus|minus@kotlinx.datetime.LocalDate(kotlin.Int;kotlinx.datetime.DateTimeUnit.DateBased){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/minus(kotlin/Long, kotlinx.datetime/DateTimeUnit.DateBased): kotlinx.datetime/LocalDate // kotlinx.datetime/minus|minus@kotlinx.datetime.LocalDate(kotlin.Long;kotlinx.datetime.DateTimeUnit.DateBased){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/minus(kotlinx.datetime/DatePeriod): kotlinx.datetime/LocalDate // kotlinx.datetime/minus|minus@kotlinx.datetime.LocalDate(kotlinx.datetime.DatePeriod){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/minus(kotlinx.datetime/DateTimeUnit.DateBased): kotlinx.datetime/LocalDate // kotlinx.datetime/minus|minus@kotlinx.datetime.LocalDate(kotlinx.datetime.DateTimeUnit.DateBased){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/minus(kotlinx.datetime/LocalDate): kotlinx.datetime/DatePeriod // kotlinx.datetime/minus|minus@kotlinx.datetime.LocalDate(kotlinx.datetime.LocalDate){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/monthsUntil(kotlinx.datetime/LocalDate): kotlin/Int // kotlinx.datetime/monthsUntil|monthsUntil@kotlinx.datetime.LocalDate(kotlinx.datetime.LocalDate){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/periodUntil(kotlinx.datetime/LocalDate): kotlinx.datetime/DatePeriod // kotlinx.datetime/periodUntil|periodUntil@kotlinx.datetime.LocalDate(kotlinx.datetime.LocalDate){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/plus(kotlin/Int, kotlinx.datetime/DateTimeUnit.DateBased): kotlinx.datetime/LocalDate // kotlinx.datetime/plus|plus@kotlinx.datetime.LocalDate(kotlin.Int;kotlinx.datetime.DateTimeUnit.DateBased){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/plus(kotlin/Long, kotlinx.datetime/DateTimeUnit.DateBased): kotlinx.datetime/LocalDate // kotlinx.datetime/plus|plus@kotlinx.datetime.LocalDate(kotlin.Long;kotlinx.datetime.DateTimeUnit.DateBased){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/plus(kotlinx.datetime/DatePeriod): kotlinx.datetime/LocalDate // kotlinx.datetime/plus|plus@kotlinx.datetime.LocalDate(kotlinx.datetime.DatePeriod){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/plus(kotlinx.datetime/DateTimeUnit.DateBased): kotlinx.datetime/LocalDate // kotlinx.datetime/plus|plus@kotlinx.datetime.LocalDate(kotlinx.datetime.DateTimeUnit.DateBased){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/until(kotlinx.datetime/LocalDate, kotlinx.datetime/DateTimeUnit.DateBased): kotlin/Int // kotlinx.datetime/until|until@kotlinx.datetime.LocalDate(kotlinx.datetime.LocalDate;kotlinx.datetime.DateTimeUnit.DateBased){}[0]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/yearsUntil(kotlinx.datetime/LocalDate): kotlin/Int // kotlinx.datetime/yearsUntil|yearsUntil@kotlinx.datetime.LocalDate(kotlinx.datetime.LocalDate){}[0]
final fun (kotlinx.datetime/LocalDateTime).kotlinx.datetime/format(kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalDateTime>): kotlin/String // kotlinx.datetime/format|format@kotlinx.datetime.LocalDateTime(kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.LocalDateTime>){}[0]
final fun (kotlinx.datetime/LocalDateTime).kotlinx.datetime/toInstant(kotlinx.datetime/TimeZone): kotlinx.datetime/Instant // kotlinx.datetime/toInstant|toInstant@kotlinx.datetime.LocalDateTime(kotlinx.datetime.TimeZone){}[0]
final fun (kotlinx.datetime/LocalDateTime).kotlinx.datetime/toInstant(kotlinx.datetime/UtcOffset): kotlinx.datetime/Instant // kotlinx.datetime/toInstant|toInstant@kotlinx.datetime.LocalDateTime(kotlinx.datetime.UtcOffset){}[0]
final fun (kotlinx.datetime/LocalTime).kotlinx.datetime/atDate(kotlin/Int, kotlin/Int, kotlin/Int =...): kotlinx.datetime/LocalDateTime // kotlinx.datetime/atDate|atDate@kotlinx.datetime.LocalTime(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun (kotlinx.datetime/LocalTime).kotlinx.datetime/atDate(kotlin/Int, kotlinx.datetime/Month, kotlin/Int =...): kotlinx.datetime/LocalDateTime // kotlinx.datetime/atDate|atDate@kotlinx.datetime.LocalTime(kotlin.Int;kotlinx.datetime.Month;kotlin.Int){}[0]
final fun (kotlinx.datetime/LocalTime).kotlinx.datetime/atDate(kotlinx.datetime/LocalDate): kotlinx.datetime/LocalDateTime // kotlinx.datetime/atDate|atDate@kotlinx.datetime.LocalTime(kotlinx.datetime.LocalDate){}[0]
final fun (kotlinx.datetime/LocalTime).kotlinx.datetime/format(kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/LocalTime>): kotlin/String // kotlinx.datetime/format|format@kotlinx.datetime.LocalTime(kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.LocalTime>){}[0]
final fun (kotlinx.datetime/TimeZone).kotlinx.datetime/offsetAt(kotlinx.datetime/Instant): kotlinx.datetime/UtcOffset // kotlinx.datetime/offsetAt|offsetAt@kotlinx.datetime.TimeZone(kotlinx.datetime.Instant){}[0]
final fun (kotlinx.datetime/UtcOffset).kotlinx.datetime/asTimeZone(): kotlinx.datetime/FixedOffsetTimeZone // kotlinx.datetime/asTimeZone|asTimeZone@kotlinx.datetime.UtcOffset(){}[0]
final fun (kotlinx.datetime/UtcOffset).kotlinx.datetime/format(kotlinx.datetime.format/DateTimeFormat<kotlinx.datetime/UtcOffset>): kotlin/String // kotlinx.datetime/format|format@kotlinx.datetime.UtcOffset(kotlinx.datetime.format.DateTimeFormat<kotlinx.datetime.UtcOffset>){}[0]
final fun <#A: kotlinx.datetime.format/DateTimeFormatBuilder> (#A).kotlinx.datetime.format/alternativeParsing(kotlin/Array<out kotlin/Function1<#A, kotlin/Unit>>..., kotlin/Function1<#A, kotlin/Unit>) // kotlinx.datetime.format/alternativeParsing|alternativeParsing@0:0(kotlin.Array<out|kotlin.Function1<0:0,kotlin.Unit>>...;kotlin.Function1<0:0,kotlin.Unit>){0ยง<kotlinx.datetime.format.DateTimeFormatBuilder>}[0]
final fun <#A: kotlinx.datetime.format/DateTimeFormatBuilder> (#A).kotlinx.datetime.format/optional(kotlin/String =..., kotlin/Function1<#A, kotlin/Unit>) // kotlinx.datetime.format/optional|optional@0:0(kotlin.String;kotlin.Function1<0:0,kotlin.Unit>){0ยง<kotlinx.datetime.format.DateTimeFormatBuilder>}[0]
final fun kotlinx.datetime/DateTimePeriod(kotlin/Int =..., kotlin/Int =..., kotlin/Int =..., kotlin/Int =..., kotlin/Int =..., kotlin/Int =..., kotlin/Long =...): kotlinx.datetime/DateTimePeriod // kotlinx.datetime/DateTimePeriod|DateTimePeriod(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Long){}[0]
final fun kotlinx.datetime/DayOfWeek(kotlin/Int): kotlinx.datetime/DayOfWeek // kotlinx.datetime/DayOfWeek|DayOfWeek(kotlin.Int){}[0]
final fun kotlinx.datetime/Month(kotlin/Int): kotlinx.datetime/Month // kotlinx.datetime/Month|Month(kotlin.Int){}[0]
final fun kotlinx.datetime/UtcOffset(): kotlinx.datetime/UtcOffset // kotlinx.datetime/UtcOffset|UtcOffset(){}[0]
final fun kotlinx.datetime/UtcOffset(kotlin/Int? =..., kotlin/Int? =..., kotlin/Int? =...): kotlinx.datetime/UtcOffset // kotlinx.datetime/UtcOffset|UtcOffset(kotlin.Int?;kotlin.Int?;kotlin.Int?){}[0]

// Targets: [apple]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/toNSDate(): platform.Foundation/NSDate // kotlinx.datetime/toNSDate|toNSDate@kotlinx.datetime.Instant(){}[0]

// Targets: [apple]
final fun (kotlinx.datetime/LocalDate).kotlinx.datetime/toNSDateComponents(): platform.Foundation/NSDateComponents // kotlinx.datetime/toNSDateComponents|toNSDateComponents@kotlinx.datetime.LocalDate(){}[0]

// Targets: [apple]
final fun (kotlinx.datetime/LocalDateTime).kotlinx.datetime/toNSDateComponents(): platform.Foundation/NSDateComponents // kotlinx.datetime/toNSDateComponents|toNSDateComponents@kotlinx.datetime.LocalDateTime(){}[0]

// Targets: [apple]
final fun (kotlinx.datetime/TimeZone).kotlinx.datetime/toNSTimeZone(): platform.Foundation/NSTimeZone // kotlinx.datetime/toNSTimeZone|toNSTimeZone@kotlinx.datetime.TimeZone(){}[0]

// Targets: [apple]
final fun (platform.Foundation/NSDate).kotlinx.datetime/toKotlinInstant(): kotlinx.datetime/Instant // kotlinx.datetime/toKotlinInstant|toKotlinInstant@platform.Foundation.NSDate(){}[0]

// Targets: [apple]
final fun (platform.Foundation/NSTimeZone).kotlinx.datetime/toKotlinTimeZone(): kotlinx.datetime/TimeZone // kotlinx.datetime/toKotlinTimeZone|toKotlinTimeZone@platform.Foundation.NSTimeZone(){}[0]

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/ChronoField : kotlinx.datetime.internal.JSJoda/TemporalField { // kotlinx.datetime.internal.JSJoda/ChronoField|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ChronoField.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> adjustInto(#A1, kotlin/Int): #A1 // kotlinx.datetime.internal.JSJoda/ChronoField.adjustInto|adjustInto(0:0;kotlin.Int){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun baseUnit(): kotlinx.datetime.internal.JSJoda/TemporalUnit // kotlinx.datetime.internal.JSJoda/ChronoField.baseUnit|baseUnit(){}[0]
    open fun checkValidIntValue(kotlin/Int): kotlin/Int // kotlinx.datetime.internal.JSJoda/ChronoField.checkValidIntValue|checkValidIntValue(kotlin.Int){}[0]
    open fun checkValidValue(kotlin/Int): kotlin/Int // kotlinx.datetime.internal.JSJoda/ChronoField.checkValidValue|checkValidValue(kotlin.Int){}[0]
    open fun displayName(): kotlin/String // kotlinx.datetime.internal.JSJoda/ChronoField.displayName|displayName(){}[0]
    open fun getFrom(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlin/Int // kotlinx.datetime.internal.JSJoda/ChronoField.getFrom|getFrom(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun isDateBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoField.isDateBased|isDateBased(){}[0]
    open fun isSupportedBy(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoField.isSupportedBy|isSupportedBy(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun isTimeBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoField.isTimeBased|isTimeBased(){}[0]
    open fun name(): kotlin/String // kotlinx.datetime.internal.JSJoda/ChronoField.name|name(){}[0]
    open fun range(): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/ChronoField.range|range(){}[0]
    open fun rangeRefinedBy(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/ChronoField.rangeRefinedBy|rangeRefinedBy(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun rangeUnit(): kotlinx.datetime.internal.JSJoda/TemporalUnit // kotlinx.datetime.internal.JSJoda/ChronoField.rangeUnit|rangeUnit(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ChronoField.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ChronoField.Companion|null[0]
        final var ALIGNED_DAY_OF_WEEK_IN_MONTH // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_DAY_OF_WEEK_IN_MONTH|{}ALIGNED_DAY_OF_WEEK_IN_MONTH[0]
            final fun <get-ALIGNED_DAY_OF_WEEK_IN_MONTH>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_DAY_OF_WEEK_IN_MONTH.<get-ALIGNED_DAY_OF_WEEK_IN_MONTH>|<get-ALIGNED_DAY_OF_WEEK_IN_MONTH>(){}[0]
            final fun <set-ALIGNED_DAY_OF_WEEK_IN_MONTH>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_DAY_OF_WEEK_IN_MONTH.<set-ALIGNED_DAY_OF_WEEK_IN_MONTH>|<set-ALIGNED_DAY_OF_WEEK_IN_MONTH>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var ALIGNED_DAY_OF_WEEK_IN_YEAR // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_DAY_OF_WEEK_IN_YEAR|{}ALIGNED_DAY_OF_WEEK_IN_YEAR[0]
            final fun <get-ALIGNED_DAY_OF_WEEK_IN_YEAR>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_DAY_OF_WEEK_IN_YEAR.<get-ALIGNED_DAY_OF_WEEK_IN_YEAR>|<get-ALIGNED_DAY_OF_WEEK_IN_YEAR>(){}[0]
            final fun <set-ALIGNED_DAY_OF_WEEK_IN_YEAR>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_DAY_OF_WEEK_IN_YEAR.<set-ALIGNED_DAY_OF_WEEK_IN_YEAR>|<set-ALIGNED_DAY_OF_WEEK_IN_YEAR>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var ALIGNED_WEEK_OF_MONTH // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_WEEK_OF_MONTH|{}ALIGNED_WEEK_OF_MONTH[0]
            final fun <get-ALIGNED_WEEK_OF_MONTH>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_WEEK_OF_MONTH.<get-ALIGNED_WEEK_OF_MONTH>|<get-ALIGNED_WEEK_OF_MONTH>(){}[0]
            final fun <set-ALIGNED_WEEK_OF_MONTH>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_WEEK_OF_MONTH.<set-ALIGNED_WEEK_OF_MONTH>|<set-ALIGNED_WEEK_OF_MONTH>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var ALIGNED_WEEK_OF_YEAR // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_WEEK_OF_YEAR|{}ALIGNED_WEEK_OF_YEAR[0]
            final fun <get-ALIGNED_WEEK_OF_YEAR>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_WEEK_OF_YEAR.<get-ALIGNED_WEEK_OF_YEAR>|<get-ALIGNED_WEEK_OF_YEAR>(){}[0]
            final fun <set-ALIGNED_WEEK_OF_YEAR>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ALIGNED_WEEK_OF_YEAR.<set-ALIGNED_WEEK_OF_YEAR>|<set-ALIGNED_WEEK_OF_YEAR>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var AMPM_OF_DAY // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.AMPM_OF_DAY|{}AMPM_OF_DAY[0]
            final fun <get-AMPM_OF_DAY>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.AMPM_OF_DAY.<get-AMPM_OF_DAY>|<get-AMPM_OF_DAY>(){}[0]
            final fun <set-AMPM_OF_DAY>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.AMPM_OF_DAY.<set-AMPM_OF_DAY>|<set-AMPM_OF_DAY>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var CLOCK_HOUR_OF_AMPM // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.CLOCK_HOUR_OF_AMPM|{}CLOCK_HOUR_OF_AMPM[0]
            final fun <get-CLOCK_HOUR_OF_AMPM>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.CLOCK_HOUR_OF_AMPM.<get-CLOCK_HOUR_OF_AMPM>|<get-CLOCK_HOUR_OF_AMPM>(){}[0]
            final fun <set-CLOCK_HOUR_OF_AMPM>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.CLOCK_HOUR_OF_AMPM.<set-CLOCK_HOUR_OF_AMPM>|<set-CLOCK_HOUR_OF_AMPM>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var CLOCK_HOUR_OF_DAY // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.CLOCK_HOUR_OF_DAY|{}CLOCK_HOUR_OF_DAY[0]
            final fun <get-CLOCK_HOUR_OF_DAY>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.CLOCK_HOUR_OF_DAY.<get-CLOCK_HOUR_OF_DAY>|<get-CLOCK_HOUR_OF_DAY>(){}[0]
            final fun <set-CLOCK_HOUR_OF_DAY>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.CLOCK_HOUR_OF_DAY.<set-CLOCK_HOUR_OF_DAY>|<set-CLOCK_HOUR_OF_DAY>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var DAY_OF_MONTH // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.DAY_OF_MONTH|{}DAY_OF_MONTH[0]
            final fun <get-DAY_OF_MONTH>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.DAY_OF_MONTH.<get-DAY_OF_MONTH>|<get-DAY_OF_MONTH>(){}[0]
            final fun <set-DAY_OF_MONTH>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.DAY_OF_MONTH.<set-DAY_OF_MONTH>|<set-DAY_OF_MONTH>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var DAY_OF_WEEK // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.DAY_OF_WEEK|{}DAY_OF_WEEK[0]
            final fun <get-DAY_OF_WEEK>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.DAY_OF_WEEK.<get-DAY_OF_WEEK>|<get-DAY_OF_WEEK>(){}[0]
            final fun <set-DAY_OF_WEEK>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.DAY_OF_WEEK.<set-DAY_OF_WEEK>|<set-DAY_OF_WEEK>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var DAY_OF_YEAR // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.DAY_OF_YEAR|{}DAY_OF_YEAR[0]
            final fun <get-DAY_OF_YEAR>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.DAY_OF_YEAR.<get-DAY_OF_YEAR>|<get-DAY_OF_YEAR>(){}[0]
            final fun <set-DAY_OF_YEAR>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.DAY_OF_YEAR.<set-DAY_OF_YEAR>|<set-DAY_OF_YEAR>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var EPOCH_DAY // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.EPOCH_DAY|{}EPOCH_DAY[0]
            final fun <get-EPOCH_DAY>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.EPOCH_DAY.<get-EPOCH_DAY>|<get-EPOCH_DAY>(){}[0]
            final fun <set-EPOCH_DAY>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.EPOCH_DAY.<set-EPOCH_DAY>|<set-EPOCH_DAY>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var ERA // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ERA|{}ERA[0]
            final fun <get-ERA>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ERA.<get-ERA>|<get-ERA>(){}[0]
            final fun <set-ERA>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.ERA.<set-ERA>|<set-ERA>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var HOUR_OF_AMPM // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.HOUR_OF_AMPM|{}HOUR_OF_AMPM[0]
            final fun <get-HOUR_OF_AMPM>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.HOUR_OF_AMPM.<get-HOUR_OF_AMPM>|<get-HOUR_OF_AMPM>(){}[0]
            final fun <set-HOUR_OF_AMPM>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.HOUR_OF_AMPM.<set-HOUR_OF_AMPM>|<set-HOUR_OF_AMPM>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var HOUR_OF_DAY // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.HOUR_OF_DAY|{}HOUR_OF_DAY[0]
            final fun <get-HOUR_OF_DAY>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.HOUR_OF_DAY.<get-HOUR_OF_DAY>|<get-HOUR_OF_DAY>(){}[0]
            final fun <set-HOUR_OF_DAY>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.HOUR_OF_DAY.<set-HOUR_OF_DAY>|<set-HOUR_OF_DAY>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var INSTANT_SECONDS // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.INSTANT_SECONDS|{}INSTANT_SECONDS[0]
            final fun <get-INSTANT_SECONDS>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.INSTANT_SECONDS.<get-INSTANT_SECONDS>|<get-INSTANT_SECONDS>(){}[0]
            final fun <set-INSTANT_SECONDS>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.INSTANT_SECONDS.<set-INSTANT_SECONDS>|<set-INSTANT_SECONDS>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var MICRO_OF_DAY // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MICRO_OF_DAY|{}MICRO_OF_DAY[0]
            final fun <get-MICRO_OF_DAY>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MICRO_OF_DAY.<get-MICRO_OF_DAY>|<get-MICRO_OF_DAY>(){}[0]
            final fun <set-MICRO_OF_DAY>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MICRO_OF_DAY.<set-MICRO_OF_DAY>|<set-MICRO_OF_DAY>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var MICRO_OF_SECOND // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MICRO_OF_SECOND|{}MICRO_OF_SECOND[0]
            final fun <get-MICRO_OF_SECOND>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MICRO_OF_SECOND.<get-MICRO_OF_SECOND>|<get-MICRO_OF_SECOND>(){}[0]
            final fun <set-MICRO_OF_SECOND>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MICRO_OF_SECOND.<set-MICRO_OF_SECOND>|<set-MICRO_OF_SECOND>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var MILLI_OF_DAY // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MILLI_OF_DAY|{}MILLI_OF_DAY[0]
            final fun <get-MILLI_OF_DAY>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MILLI_OF_DAY.<get-MILLI_OF_DAY>|<get-MILLI_OF_DAY>(){}[0]
            final fun <set-MILLI_OF_DAY>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MILLI_OF_DAY.<set-MILLI_OF_DAY>|<set-MILLI_OF_DAY>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var MILLI_OF_SECOND // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MILLI_OF_SECOND|{}MILLI_OF_SECOND[0]
            final fun <get-MILLI_OF_SECOND>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MILLI_OF_SECOND.<get-MILLI_OF_SECOND>|<get-MILLI_OF_SECOND>(){}[0]
            final fun <set-MILLI_OF_SECOND>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MILLI_OF_SECOND.<set-MILLI_OF_SECOND>|<set-MILLI_OF_SECOND>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var MINUTE_OF_DAY // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MINUTE_OF_DAY|{}MINUTE_OF_DAY[0]
            final fun <get-MINUTE_OF_DAY>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MINUTE_OF_DAY.<get-MINUTE_OF_DAY>|<get-MINUTE_OF_DAY>(){}[0]
            final fun <set-MINUTE_OF_DAY>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MINUTE_OF_DAY.<set-MINUTE_OF_DAY>|<set-MINUTE_OF_DAY>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var MINUTE_OF_HOUR // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MINUTE_OF_HOUR|{}MINUTE_OF_HOUR[0]
            final fun <get-MINUTE_OF_HOUR>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MINUTE_OF_HOUR.<get-MINUTE_OF_HOUR>|<get-MINUTE_OF_HOUR>(){}[0]
            final fun <set-MINUTE_OF_HOUR>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MINUTE_OF_HOUR.<set-MINUTE_OF_HOUR>|<set-MINUTE_OF_HOUR>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var MONTH_OF_YEAR // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MONTH_OF_YEAR|{}MONTH_OF_YEAR[0]
            final fun <get-MONTH_OF_YEAR>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MONTH_OF_YEAR.<get-MONTH_OF_YEAR>|<get-MONTH_OF_YEAR>(){}[0]
            final fun <set-MONTH_OF_YEAR>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.MONTH_OF_YEAR.<set-MONTH_OF_YEAR>|<set-MONTH_OF_YEAR>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var NANO_OF_DAY // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.NANO_OF_DAY|{}NANO_OF_DAY[0]
            final fun <get-NANO_OF_DAY>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.NANO_OF_DAY.<get-NANO_OF_DAY>|<get-NANO_OF_DAY>(){}[0]
            final fun <set-NANO_OF_DAY>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.NANO_OF_DAY.<set-NANO_OF_DAY>|<set-NANO_OF_DAY>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var NANO_OF_SECOND // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.NANO_OF_SECOND|{}NANO_OF_SECOND[0]
            final fun <get-NANO_OF_SECOND>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.NANO_OF_SECOND.<get-NANO_OF_SECOND>|<get-NANO_OF_SECOND>(){}[0]
            final fun <set-NANO_OF_SECOND>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.NANO_OF_SECOND.<set-NANO_OF_SECOND>|<set-NANO_OF_SECOND>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var OFFSET_SECONDS // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.OFFSET_SECONDS|{}OFFSET_SECONDS[0]
            final fun <get-OFFSET_SECONDS>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.OFFSET_SECONDS.<get-OFFSET_SECONDS>|<get-OFFSET_SECONDS>(){}[0]
            final fun <set-OFFSET_SECONDS>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.OFFSET_SECONDS.<set-OFFSET_SECONDS>|<set-OFFSET_SECONDS>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var PROLEPTIC_MONTH // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.PROLEPTIC_MONTH|{}PROLEPTIC_MONTH[0]
            final fun <get-PROLEPTIC_MONTH>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.PROLEPTIC_MONTH.<get-PROLEPTIC_MONTH>|<get-PROLEPTIC_MONTH>(){}[0]
            final fun <set-PROLEPTIC_MONTH>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.PROLEPTIC_MONTH.<set-PROLEPTIC_MONTH>|<set-PROLEPTIC_MONTH>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var SECOND_OF_DAY // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.SECOND_OF_DAY|{}SECOND_OF_DAY[0]
            final fun <get-SECOND_OF_DAY>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.SECOND_OF_DAY.<get-SECOND_OF_DAY>|<get-SECOND_OF_DAY>(){}[0]
            final fun <set-SECOND_OF_DAY>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.SECOND_OF_DAY.<set-SECOND_OF_DAY>|<set-SECOND_OF_DAY>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var SECOND_OF_MINUTE // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.SECOND_OF_MINUTE|{}SECOND_OF_MINUTE[0]
            final fun <get-SECOND_OF_MINUTE>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.SECOND_OF_MINUTE.<get-SECOND_OF_MINUTE>|<get-SECOND_OF_MINUTE>(){}[0]
            final fun <set-SECOND_OF_MINUTE>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.SECOND_OF_MINUTE.<set-SECOND_OF_MINUTE>|<set-SECOND_OF_MINUTE>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var YEAR // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.YEAR|{}YEAR[0]
            final fun <get-YEAR>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.YEAR.<get-YEAR>|<get-YEAR>(){}[0]
            final fun <set-YEAR>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.YEAR.<set-YEAR>|<set-YEAR>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
        final var YEAR_OF_ERA // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.YEAR_OF_ERA|{}YEAR_OF_ERA[0]
            final fun <get-YEAR_OF_ERA>(): kotlinx.datetime.internal.JSJoda/ChronoField // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.YEAR_OF_ERA.<get-YEAR_OF_ERA>|<get-YEAR_OF_ERA>(){}[0]
            final fun <set-YEAR_OF_ERA>(kotlinx.datetime.internal.JSJoda/ChronoField) // kotlinx.datetime.internal.JSJoda/ChronoField.Companion.YEAR_OF_ERA.<set-YEAR_OF_ERA>|<set-YEAR_OF_ERA>(kotlinx.datetime.internal.JSJoda.ChronoField){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoField.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoField.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/ChronoLocalDate : kotlinx.datetime.internal.JSJoda/Temporal { // kotlinx.datetime.internal.JSJoda/ChronoLocalDate|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ChronoLocalDate.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/ChronoLocalDate.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun format(kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlin/String // kotlinx.datetime.internal.JSJoda/ChronoLocalDate.format|format(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoLocalDate.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoLocalDate.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/ChronoLocalDateTime : kotlinx.datetime.internal.JSJoda/Temporal { // kotlinx.datetime.internal.JSJoda/ChronoLocalDateTime|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ChronoLocalDateTime.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/ChronoLocalDateTime.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun chronology(): kotlinx.datetime.internal.JSJoda/IsoChronology // kotlinx.datetime.internal.JSJoda/ChronoLocalDateTime.chronology|chronology(){}[0]
    open fun toEpochSecond(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlin/Double // kotlinx.datetime.internal.JSJoda/ChronoLocalDateTime.toEpochSecond|toEpochSecond(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    open fun toInstant(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/ChronoLocalDateTime.toInstant|toInstant(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/ChronoUnit : kotlinx.datetime.internal.JSJoda/TemporalUnit { // kotlinx.datetime.internal.JSJoda/ChronoUnit|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ChronoUnit.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> addTo(#A1, kotlin/Int): #A1 // kotlinx.datetime.internal.JSJoda/ChronoUnit.addTo|addTo(0:0;kotlin.Int){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun between(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/Temporal): kotlin/Int // kotlinx.datetime.internal.JSJoda/ChronoUnit.between|between(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Int // kotlinx.datetime.internal.JSJoda/ChronoUnit.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun duration(): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/ChronoUnit.duration|duration(){}[0]
    open fun isDateBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoUnit.isDateBased|isDateBased(){}[0]
    open fun isDurationEstimated(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoUnit.isDurationEstimated|isDurationEstimated(){}[0]
    open fun isSupportedBy(kotlinx.datetime.internal.JSJoda/Temporal): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoUnit.isSupportedBy|isSupportedBy(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun isTimeBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoUnit.isTimeBased|isTimeBased(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ChronoUnit.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion|null[0]
        final var CENTURIES // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.CENTURIES|{}CENTURIES[0]
            final fun <get-CENTURIES>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.CENTURIES.<get-CENTURIES>|<get-CENTURIES>(){}[0]
            final fun <set-CENTURIES>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.CENTURIES.<set-CENTURIES>|<set-CENTURIES>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var DAYS // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.DAYS|{}DAYS[0]
            final fun <get-DAYS>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.DAYS.<get-DAYS>|<get-DAYS>(){}[0]
            final fun <set-DAYS>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.DAYS.<set-DAYS>|<set-DAYS>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var DECADES // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.DECADES|{}DECADES[0]
            final fun <get-DECADES>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.DECADES.<get-DECADES>|<get-DECADES>(){}[0]
            final fun <set-DECADES>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.DECADES.<set-DECADES>|<set-DECADES>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var ERAS // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.ERAS|{}ERAS[0]
            final fun <get-ERAS>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.ERAS.<get-ERAS>|<get-ERAS>(){}[0]
            final fun <set-ERAS>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.ERAS.<set-ERAS>|<set-ERAS>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var FOREVER // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.FOREVER|{}FOREVER[0]
            final fun <get-FOREVER>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.FOREVER.<get-FOREVER>|<get-FOREVER>(){}[0]
            final fun <set-FOREVER>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.FOREVER.<set-FOREVER>|<set-FOREVER>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var HALF_DAYS // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.HALF_DAYS|{}HALF_DAYS[0]
            final fun <get-HALF_DAYS>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.HALF_DAYS.<get-HALF_DAYS>|<get-HALF_DAYS>(){}[0]
            final fun <set-HALF_DAYS>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.HALF_DAYS.<set-HALF_DAYS>|<set-HALF_DAYS>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var HOURS // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.HOURS|{}HOURS[0]
            final fun <get-HOURS>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.HOURS.<get-HOURS>|<get-HOURS>(){}[0]
            final fun <set-HOURS>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.HOURS.<set-HOURS>|<set-HOURS>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var MICROS // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MICROS|{}MICROS[0]
            final fun <get-MICROS>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MICROS.<get-MICROS>|<get-MICROS>(){}[0]
            final fun <set-MICROS>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MICROS.<set-MICROS>|<set-MICROS>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var MILLENNIA // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MILLENNIA|{}MILLENNIA[0]
            final fun <get-MILLENNIA>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MILLENNIA.<get-MILLENNIA>|<get-MILLENNIA>(){}[0]
            final fun <set-MILLENNIA>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MILLENNIA.<set-MILLENNIA>|<set-MILLENNIA>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var MILLIS // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MILLIS|{}MILLIS[0]
            final fun <get-MILLIS>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MILLIS.<get-MILLIS>|<get-MILLIS>(){}[0]
            final fun <set-MILLIS>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MILLIS.<set-MILLIS>|<set-MILLIS>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var MINUTES // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MINUTES|{}MINUTES[0]
            final fun <get-MINUTES>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MINUTES.<get-MINUTES>|<get-MINUTES>(){}[0]
            final fun <set-MINUTES>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MINUTES.<set-MINUTES>|<set-MINUTES>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var MONTHS // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MONTHS|{}MONTHS[0]
            final fun <get-MONTHS>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MONTHS.<get-MONTHS>|<get-MONTHS>(){}[0]
            final fun <set-MONTHS>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.MONTHS.<set-MONTHS>|<set-MONTHS>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var NANOS // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.NANOS|{}NANOS[0]
            final fun <get-NANOS>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.NANOS.<get-NANOS>|<get-NANOS>(){}[0]
            final fun <set-NANOS>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.NANOS.<set-NANOS>|<set-NANOS>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var SECONDS // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.SECONDS|{}SECONDS[0]
            final fun <get-SECONDS>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.SECONDS.<get-SECONDS>|<get-SECONDS>(){}[0]
            final fun <set-SECONDS>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.SECONDS.<set-SECONDS>|<set-SECONDS>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var WEEKS // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.WEEKS|{}WEEKS[0]
            final fun <get-WEEKS>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.WEEKS.<get-WEEKS>|<get-WEEKS>(){}[0]
            final fun <set-WEEKS>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.WEEKS.<set-WEEKS>|<set-WEEKS>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
        final var YEARS // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.YEARS|{}YEARS[0]
            final fun <get-YEARS>(): kotlinx.datetime.internal.JSJoda/ChronoUnit // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.YEARS.<get-YEARS>|<get-YEARS>(){}[0]
            final fun <set-YEARS>(kotlinx.datetime.internal.JSJoda/ChronoUnit) // kotlinx.datetime.internal.JSJoda/ChronoUnit.Companion.YEARS.<set-YEARS>|<set-YEARS>(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
    }
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime : kotlinx.datetime.internal.JSJoda/Temporal { // kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime.<init>|<init>(){}[0]

    open fun compareTo(kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime): kotlin/Int // kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.ChronoZonedDateTime){}[0]
    open fun format(kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlin/String // kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime.format|format(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    open fun isAfter(kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime.isAfter|isAfter(kotlinx.datetime.internal.JSJoda.ChronoZonedDateTime){}[0]
    open fun isBefore(kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime.isBefore|isBefore(kotlinx.datetime.internal.JSJoda.ChronoZonedDateTime){}[0]
    open fun isEqual(kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime.isEqual|isEqual(kotlinx.datetime.internal.JSJoda.ChronoZonedDateTime){}[0]
    open fun toEpochSecond(): kotlin/Double // kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime.toEpochSecond|toEpochSecond(){}[0]
    open fun toInstant(): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime.toInstant|toInstant(){}[0]

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/DayOfWeek : kotlinx.datetime.internal.JSJoda/TemporalAccessor { // kotlinx.datetime.internal.JSJoda/DayOfWeek|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/DayOfWeek.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/DayOfWeek.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/DayOfWeek): kotlin/Int // kotlinx.datetime.internal.JSJoda/DayOfWeek.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.DayOfWeek){}[0]
    open fun displayName(kotlinx.datetime.internal.JSJoda/TextStyle, kotlinx.datetime.internal.JSJoda/Locale): kotlin/String // kotlinx.datetime.internal.JSJoda/DayOfWeek.displayName|displayName(kotlinx.datetime.internal.JSJoda.TextStyle;kotlinx.datetime.internal.JSJoda.Locale){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/DayOfWeek.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun minus(kotlin/Int): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.minus|minus(kotlin.Int){}[0]
    open fun name(): kotlin/String // kotlinx.datetime.internal.JSJoda/DayOfWeek.name|name(){}[0]
    open fun ordinal(): kotlin/Int // kotlinx.datetime.internal.JSJoda/DayOfWeek.ordinal|ordinal(){}[0]
    open fun plus(kotlin/Int): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.plus|plus(kotlin.Int){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/DayOfWeek.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/DayOfWeek.toString|toString(){}[0]
    open fun value(): kotlin/Int // kotlinx.datetime.internal.JSJoda/DayOfWeek.value|value(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion|null[0]
        final var FRIDAY // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.FRIDAY|{}FRIDAY[0]
            final fun <get-FRIDAY>(): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.FRIDAY.<get-FRIDAY>|<get-FRIDAY>(){}[0]
            final fun <set-FRIDAY>(kotlinx.datetime.internal.JSJoda/DayOfWeek) // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.FRIDAY.<set-FRIDAY>|<set-FRIDAY>(kotlinx.datetime.internal.JSJoda.DayOfWeek){}[0]
        final var FROM // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.FROM|{}FROM[0]
            final fun <get-FROM>(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/DayOfWeek> // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.FROM.<get-FROM>|<get-FROM>(){}[0]
            final fun <set-FROM>(kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/DayOfWeek>) // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.FROM.<set-FROM>|<set-FROM>(kotlinx.datetime.internal.JSJoda.TemporalQuery<kotlinx.datetime.internal.JSJoda.DayOfWeek>){}[0]
        final var MONDAY // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.MONDAY|{}MONDAY[0]
            final fun <get-MONDAY>(): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.MONDAY.<get-MONDAY>|<get-MONDAY>(){}[0]
            final fun <set-MONDAY>(kotlinx.datetime.internal.JSJoda/DayOfWeek) // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.MONDAY.<set-MONDAY>|<set-MONDAY>(kotlinx.datetime.internal.JSJoda.DayOfWeek){}[0]
        final var SATURDAY // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.SATURDAY|{}SATURDAY[0]
            final fun <get-SATURDAY>(): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.SATURDAY.<get-SATURDAY>|<get-SATURDAY>(){}[0]
            final fun <set-SATURDAY>(kotlinx.datetime.internal.JSJoda/DayOfWeek) // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.SATURDAY.<set-SATURDAY>|<set-SATURDAY>(kotlinx.datetime.internal.JSJoda.DayOfWeek){}[0]
        final var SUNDAY // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.SUNDAY|{}SUNDAY[0]
            final fun <get-SUNDAY>(): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.SUNDAY.<get-SUNDAY>|<get-SUNDAY>(){}[0]
            final fun <set-SUNDAY>(kotlinx.datetime.internal.JSJoda/DayOfWeek) // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.SUNDAY.<set-SUNDAY>|<set-SUNDAY>(kotlinx.datetime.internal.JSJoda.DayOfWeek){}[0]
        final var THURSDAY // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.THURSDAY|{}THURSDAY[0]
            final fun <get-THURSDAY>(): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.THURSDAY.<get-THURSDAY>|<get-THURSDAY>(){}[0]
            final fun <set-THURSDAY>(kotlinx.datetime.internal.JSJoda/DayOfWeek) // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.THURSDAY.<set-THURSDAY>|<set-THURSDAY>(kotlinx.datetime.internal.JSJoda.DayOfWeek){}[0]
        final var TUESDAY // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.TUESDAY|{}TUESDAY[0]
            final fun <get-TUESDAY>(): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.TUESDAY.<get-TUESDAY>|<get-TUESDAY>(){}[0]
            final fun <set-TUESDAY>(kotlinx.datetime.internal.JSJoda/DayOfWeek) // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.TUESDAY.<set-TUESDAY>|<set-TUESDAY>(kotlinx.datetime.internal.JSJoda.DayOfWeek){}[0]
        final var WEDNESDAY // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.WEDNESDAY|{}WEDNESDAY[0]
            final fun <get-WEDNESDAY>(): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.WEDNESDAY.<get-WEDNESDAY>|<get-WEDNESDAY>(){}[0]
            final fun <set-WEDNESDAY>(kotlinx.datetime.internal.JSJoda/DayOfWeek) // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.WEDNESDAY.<set-WEDNESDAY>|<set-WEDNESDAY>(kotlinx.datetime.internal.JSJoda.DayOfWeek){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun of(kotlin/Int): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.of|of(kotlin.Int){}[0]
        final fun valueOf(kotlin/String): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/DayOfWeek.Companion.valueOf|valueOf(kotlin.String){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/DayOfWeek.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/DayOfWeek.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/Duration : kotlinx.datetime.internal.JSJoda/TemporalAmount { // kotlinx.datetime.internal.JSJoda/Duration|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/Duration.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> addTo(#A1): #A1 // kotlinx.datetime.internal.JSJoda/Duration.addTo|addTo(0:0){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> subtractFrom(#A1): #A1 // kotlinx.datetime.internal.JSJoda/Duration.subtractFrom|subtractFrom(0:0){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun abs(): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.abs|abs(){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/Duration): kotlin/Int // kotlinx.datetime.internal.JSJoda/Duration.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.Duration){}[0]
    open fun dividedBy(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.dividedBy|dividedBy(kotlin.Int){}[0]
    open fun get(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Int // kotlinx.datetime.internal.JSJoda/Duration.get|get(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun isNegative(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Duration.isNegative|isNegative(){}[0]
    open fun isZero(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Duration.isZero|isZero(){}[0]
    open fun minus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.minus|minus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/Duration): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.minus|minus(kotlinx.datetime.internal.JSJoda.Duration){}[0]
    open fun minusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.minusDays|minusDays(kotlin.Int){}[0]
    open fun minusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.minusHours|minusHours(kotlin.Int){}[0]
    open fun minusMillis(kotlin/Double): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.minusMillis|minusMillis(kotlin.Double){}[0]
    open fun minusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.minusMinutes|minusMinutes(kotlin.Int){}[0]
    open fun minusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.minusNanos|minusNanos(kotlin.Double){}[0]
    open fun minusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.minusSeconds|minusSeconds(kotlin.Int){}[0]
    open fun multipliedBy(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.multipliedBy|multipliedBy(kotlin.Int){}[0]
    open fun nano(): kotlin/Double // kotlinx.datetime.internal.JSJoda/Duration.nano|nano(){}[0]
    open fun negated(): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.negated|negated(){}[0]
    open fun plus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.plus|plus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/Duration): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.plus|plus(kotlinx.datetime.internal.JSJoda.Duration){}[0]
    open fun plusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.plusDays|plusDays(kotlin.Int){}[0]
    open fun plusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.plusHours|plusHours(kotlin.Int){}[0]
    open fun plusMillis(kotlin/Double): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.plusMillis|plusMillis(kotlin.Double){}[0]
    open fun plusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.plusMinutes|plusMinutes(kotlin.Int){}[0]
    open fun plusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.plusNanos|plusNanos(kotlin.Double){}[0]
    open fun plusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.plusSeconds|plusSeconds(kotlin.Int){}[0]
    open fun plusSecondsNanos(kotlin/Int, kotlin/Double): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.plusSecondsNanos|plusSecondsNanos(kotlin.Int;kotlin.Double){}[0]
    open fun seconds(): kotlin/Double // kotlinx.datetime.internal.JSJoda/Duration.seconds|seconds(){}[0]
    open fun toDays(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Duration.toDays|toDays(){}[0]
    open fun toHours(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Duration.toHours|toHours(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/Duration.toJSON|toJSON(){}[0]
    open fun toMillis(): kotlin/Double // kotlinx.datetime.internal.JSJoda/Duration.toMillis|toMillis(){}[0]
    open fun toMinutes(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Duration.toMinutes|toMinutes(){}[0]
    open fun toNanos(): kotlin/Double // kotlinx.datetime.internal.JSJoda/Duration.toNanos|toNanos(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/Duration.toString|toString(){}[0]
    open fun withNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.withNanos|withNanos(kotlin.Double){}[0]
    open fun withSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.withSeconds|withSeconds(kotlin.Int){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/Duration.Companion|null[0]
        final var ZERO // kotlinx.datetime.internal.JSJoda/Duration.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]
            final fun <set-ZERO>(kotlinx.datetime.internal.JSJoda/Duration) // kotlinx.datetime.internal.JSJoda/Duration.Companion.ZERO.<set-ZERO>|<set-ZERO>(kotlinx.datetime.internal.JSJoda.Duration){}[0]

        final fun between(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.Companion.between|between(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.Temporal){}[0]
        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
        final fun of(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.Companion.of|of(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
        final fun ofDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.Companion.ofDays|ofDays(kotlin.Int){}[0]
        final fun ofHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.Companion.ofHours|ofHours(kotlin.Int){}[0]
        final fun ofMillis(kotlin/Double): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.Companion.ofMillis|ofMillis(kotlin.Double){}[0]
        final fun ofMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.Companion.ofMinutes|ofMinutes(kotlin.Int){}[0]
        final fun ofNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.Companion.ofNanos|ofNanos(kotlin.Double){}[0]
        final fun ofSeconds(kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.Companion.ofSeconds|ofSeconds(kotlin.Int;kotlin.Int){}[0]
        final fun parse(kotlin/String): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/Duration.Companion.parse|parse(kotlin.String){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Duration.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Duration.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/Instant : kotlinx.datetime.internal.JSJoda/Temporal { // kotlinx.datetime.internal.JSJoda/Instant|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/Instant.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/Instant.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun atZone(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/Instant.atZone|atZone(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/Instant): kotlin/Int // kotlinx.datetime.internal.JSJoda/Instant.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun epochSecond(): kotlin/Double // kotlinx.datetime.internal.JSJoda/Instant.epochSecond|epochSecond(){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Instant.hashCode|hashCode(){}[0]
    open fun isAfter(kotlinx.datetime.internal.JSJoda/Instant): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Instant.isAfter|isAfter(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun isBefore(kotlinx.datetime.internal.JSJoda/Instant): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Instant.isBefore|isBefore(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Instant.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Instant.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.minus|minus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.minus|minus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun minusMillis(kotlin/Double): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.minusMillis|minusMillis(kotlin.Double){}[0]
    open fun minusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.minusNanos|minusNanos(kotlin.Double){}[0]
    open fun minusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.minusSeconds|minusSeconds(kotlin.Int){}[0]
    open fun nano(): kotlin/Double // kotlinx.datetime.internal.JSJoda/Instant.nano|nano(){}[0]
    open fun plus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.plus|plus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.plus|plus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun plusMillis(kotlin/Double): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.plusMillis|plusMillis(kotlin.Double){}[0]
    open fun plusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.plusNanos|plusNanos(kotlin.Double){}[0]
    open fun plusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.plusSeconds|plusSeconds(kotlin.Int){}[0]
    open fun toEpochMilli(): kotlin/Double // kotlinx.datetime.internal.JSJoda/Instant.toEpochMilli|toEpochMilli(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/Instant.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/Instant.toString|toString(){}[0]
    open fun truncatedTo(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.truncatedTo|truncatedTo(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun until(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Double // kotlinx.datetime.internal.JSJoda/Instant.until|until(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalAdjuster): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.with|with(kotlinx.datetime.internal.JSJoda.TemporalAdjuster){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.with|with(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/Instant.Companion|null[0]
        final var EPOCH // kotlinx.datetime.internal.JSJoda/Instant.Companion.EPOCH|{}EPOCH[0]
            final fun <get-EPOCH>(): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.Companion.EPOCH.<get-EPOCH>|<get-EPOCH>(){}[0]
            final fun <set-EPOCH>(kotlinx.datetime.internal.JSJoda/Instant) // kotlinx.datetime.internal.JSJoda/Instant.Companion.EPOCH.<set-EPOCH>|<set-EPOCH>(kotlinx.datetime.internal.JSJoda.Instant){}[0]
        final var FROM // kotlinx.datetime.internal.JSJoda/Instant.Companion.FROM|{}FROM[0]
            final fun <get-FROM>(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/Instant> // kotlinx.datetime.internal.JSJoda/Instant.Companion.FROM.<get-FROM>|<get-FROM>(){}[0]
            final fun <set-FROM>(kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/Instant>) // kotlinx.datetime.internal.JSJoda/Instant.Companion.FROM.<set-FROM>|<set-FROM>(kotlinx.datetime.internal.JSJoda.TemporalQuery<kotlinx.datetime.internal.JSJoda.Instant>){}[0]
        final var MAX // kotlinx.datetime.internal.JSJoda/Instant.Companion.MAX|{}MAX[0]
            final fun <get-MAX>(): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.Companion.MAX.<get-MAX>|<get-MAX>(){}[0]
            final fun <set-MAX>(kotlinx.datetime.internal.JSJoda/Instant) // kotlinx.datetime.internal.JSJoda/Instant.Companion.MAX.<set-MAX>|<set-MAX>(kotlinx.datetime.internal.JSJoda.Instant){}[0]
        final var MAX_SECONDS // kotlinx.datetime.internal.JSJoda/Instant.Companion.MAX_SECONDS|{}MAX_SECONDS[0]
            final fun <get-MAX_SECONDS>(): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.Companion.MAX_SECONDS.<get-MAX_SECONDS>|<get-MAX_SECONDS>(){}[0]
            final fun <set-MAX_SECONDS>(kotlinx.datetime.internal.JSJoda/Instant) // kotlinx.datetime.internal.JSJoda/Instant.Companion.MAX_SECONDS.<set-MAX_SECONDS>|<set-MAX_SECONDS>(kotlinx.datetime.internal.JSJoda.Instant){}[0]
        final var MIN // kotlinx.datetime.internal.JSJoda/Instant.Companion.MIN|{}MIN[0]
            final fun <get-MIN>(): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.Companion.MIN.<get-MIN>|<get-MIN>(){}[0]
            final fun <set-MIN>(kotlinx.datetime.internal.JSJoda/Instant) // kotlinx.datetime.internal.JSJoda/Instant.Companion.MIN.<set-MIN>|<set-MIN>(kotlinx.datetime.internal.JSJoda.Instant){}[0]
        final var MIN_SECONDS // kotlinx.datetime.internal.JSJoda/Instant.Companion.MIN_SECONDS|{}MIN_SECONDS[0]
            final fun <get-MIN_SECONDS>(): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.Companion.MIN_SECONDS.<get-MIN_SECONDS>|<get-MIN_SECONDS>(){}[0]
            final fun <set-MIN_SECONDS>(kotlinx.datetime.internal.JSJoda/Instant) // kotlinx.datetime.internal.JSJoda/Instant.Companion.MIN_SECONDS.<set-MIN_SECONDS>|<set-MIN_SECONDS>(kotlinx.datetime.internal.JSJoda.Instant){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/Clock): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.Companion.now|now(kotlinx.datetime.internal.JSJoda.Clock){}[0]
        final fun ofEpochMilli(kotlin/Double): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.Companion.ofEpochMilli|ofEpochMilli(kotlin.Double){}[0]
        final fun ofEpochSecond(kotlin/Double, kotlin/Int): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.Companion.ofEpochSecond|ofEpochSecond(kotlin.Double;kotlin.Int){}[0]
        final fun parse(kotlin/String): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Instant.Companion.parse|parse(kotlin.String){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Instant.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Instant.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/LocalDate : kotlinx.datetime.internal.JSJoda/ChronoLocalDate { // kotlinx.datetime.internal.JSJoda/LocalDate|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/LocalDate.<init>|<init>(){}[0]

    open fun atStartOfDay(): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDate.atStartOfDay|atStartOfDay(){}[0]
    open fun atStartOfDay(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/LocalDate.atStartOfDay|atStartOfDay(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
    open fun atTime(kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDate.atTime|atTime(kotlin.Int;kotlin.Int){}[0]
    open fun atTime(kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDate.atTime|atTime(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    open fun atTime(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Double): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDate.atTime|atTime(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Double){}[0]
    open fun atTime(kotlinx.datetime.internal.JSJoda/LocalTime): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDate.atTime|atTime(kotlinx.datetime.internal.JSJoda.LocalTime){}[0]
    open fun chronology(): kotlinx.datetime.internal.JSJoda/IsoChronology // kotlinx.datetime.internal.JSJoda/LocalDate.chronology|chronology(){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/LocalDate): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDate.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.LocalDate){}[0]
    open fun dayOfMonth(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDate.dayOfMonth|dayOfMonth(){}[0]
    open fun dayOfWeek(): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/LocalDate.dayOfWeek|dayOfWeek(){}[0]
    open fun dayOfYear(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDate.dayOfYear|dayOfYear(){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDate.hashCode|hashCode(){}[0]
    open fun isAfter(kotlinx.datetime.internal.JSJoda/LocalDate): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDate.isAfter|isAfter(kotlinx.datetime.internal.JSJoda.LocalDate){}[0]
    open fun isBefore(kotlinx.datetime.internal.JSJoda/LocalDate): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDate.isBefore|isBefore(kotlinx.datetime.internal.JSJoda.LocalDate){}[0]
    open fun isEqual(kotlinx.datetime.internal.JSJoda/LocalDate): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDate.isEqual|isEqual(kotlinx.datetime.internal.JSJoda.LocalDate){}[0]
    open fun isLeapYear(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDate.isLeapYear|isLeapYear(){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDate.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDate.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun isoWeekOfWeekyear(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDate.isoWeekOfWeekyear|isoWeekOfWeekyear(){}[0]
    open fun isoWeekyear(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDate.isoWeekyear|isoWeekyear(){}[0]
    open fun lengthOfMonth(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDate.lengthOfMonth|lengthOfMonth(){}[0]
    open fun lengthOfYear(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDate.lengthOfYear|lengthOfYear(){}[0]
    open fun minus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.minus|minus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.minus|minus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun minusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.minusDays|minusDays(kotlin.Int){}[0]
    open fun minusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.minusMonths|minusMonths(kotlin.Int){}[0]
    open fun minusWeeks(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.minusWeeks|minusWeeks(kotlin.Int){}[0]
    open fun minusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.minusYears|minusYears(kotlin.Int){}[0]
    open fun month(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/LocalDate.month|month(){}[0]
    open fun monthValue(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDate.monthValue|monthValue(){}[0]
    open fun plus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.plus|plus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.plus|plus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun plusDays(kotlin/Double): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.plusDays|plusDays(kotlin.Double){}[0]
    open fun plusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.plusDays|plusDays(kotlin.Int){}[0]
    open fun plusMonths(kotlin/Double): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.plusMonths|plusMonths(kotlin.Double){}[0]
    open fun plusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.plusMonths|plusMonths(kotlin.Int){}[0]
    open fun plusWeeks(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.plusWeeks|plusWeeks(kotlin.Int){}[0]
    open fun plusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.plusYears|plusYears(kotlin.Int){}[0]
    open fun toEpochDay(): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalDate.toEpochDay|toEpochDay(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/LocalDate.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/LocalDate.toString|toString(){}[0]
    open fun until(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalDate.until|until(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun until(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/LocalDate.until|until(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalAdjuster): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.with|with(kotlinx.datetime.internal.JSJoda.TemporalAdjuster){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.with|with(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int){}[0]
    open fun withDayOfMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.withDayOfMonth|withDayOfMonth(kotlin.Int){}[0]
    open fun withDayOfYear(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.withDayOfYear|withDayOfYear(kotlin.Int){}[0]
    open fun withMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.withMonth|withMonth(kotlin.Int){}[0]
    open fun withMonth(kotlinx.datetime.internal.JSJoda/Month): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.withMonth|withMonth(kotlinx.datetime.internal.JSJoda.Month){}[0]
    open fun withYear(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.withYear|withYear(kotlin.Int){}[0]
    open fun year(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDate.year|year(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/LocalDate.Companion|null[0]
        final var EPOCH_0 // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.EPOCH_0|{}EPOCH_0[0]
            final fun <get-EPOCH_0>(): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.EPOCH_0.<get-EPOCH_0>|<get-EPOCH_0>(){}[0]
            final fun <set-EPOCH_0>(kotlinx.datetime.internal.JSJoda/LocalDate) // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.EPOCH_0.<set-EPOCH_0>|<set-EPOCH_0>(kotlinx.datetime.internal.JSJoda.LocalDate){}[0]
        final var FROM // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.FROM|{}FROM[0]
            final fun <get-FROM>(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/LocalDate> // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.FROM.<get-FROM>|<get-FROM>(){}[0]
            final fun <set-FROM>(kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/LocalDate>) // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.FROM.<set-FROM>|<set-FROM>(kotlinx.datetime.internal.JSJoda.TemporalQuery<kotlinx.datetime.internal.JSJoda.LocalDate>){}[0]
        final var MAX // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.MAX|{}MAX[0]
            final fun <get-MAX>(): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.MAX.<get-MAX>|<get-MAX>(){}[0]
            final fun <set-MAX>(kotlinx.datetime.internal.JSJoda/LocalDate) // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.MAX.<set-MAX>|<set-MAX>(kotlinx.datetime.internal.JSJoda.LocalDate){}[0]
        final var MIN // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.MIN|{}MIN[0]
            final fun <get-MIN>(): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.MIN.<get-MIN>|<get-MIN>(){}[0]
            final fun <set-MIN>(kotlinx.datetime.internal.JSJoda/LocalDate) // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.MIN.<set-MIN>|<set-MIN>(kotlinx.datetime.internal.JSJoda.LocalDate){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/Clock): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.now|now(kotlinx.datetime.internal.JSJoda.Clock){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.now|now(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun of(kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.of|of(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun of(kotlin/Int, kotlinx.datetime.internal.JSJoda/Month, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.of|of(kotlin.Int;kotlinx.datetime.internal.JSJoda.Month;kotlin.Int){}[0]
        final fun ofEpochDay(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.ofEpochDay|ofEpochDay(kotlin.Int){}[0]
        final fun ofInstant(kotlinx.datetime.internal.JSJoda/Instant, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.ofInstant|ofInstant(kotlinx.datetime.internal.JSJoda.Instant;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun ofYearDay(kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.ofYearDay|ofYearDay(kotlin.Int;kotlin.Int){}[0]
        final fun parse(kotlin/String): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.parse|parse(kotlin.String){}[0]
        final fun parse(kotlin/String, kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDate.Companion.parse|parse(kotlin.String;kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDate.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDate.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/LocalDateTime : kotlinx.datetime.internal.JSJoda/ChronoLocalDateTime { // kotlinx.datetime.internal.JSJoda/LocalDateTime|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/LocalDateTime.<init>|<init>(){}[0]

    open fun atOffset(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.atOffset|atOffset(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    open fun atZone(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.atZone|atZone(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/LocalDateTime): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDateTime.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]
    open fun dayOfMonth(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDateTime.dayOfMonth|dayOfMonth(){}[0]
    open fun dayOfWeek(): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/LocalDateTime.dayOfWeek|dayOfWeek(){}[0]
    open fun dayOfYear(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDateTime.dayOfYear|dayOfYear(){}[0]
    open fun format(kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlin/String // kotlinx.datetime.internal.JSJoda/LocalDateTime.format|format(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDateTime.hashCode|hashCode(){}[0]
    open fun hour(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDateTime.hour|hour(){}[0]
    open fun isAfter(kotlinx.datetime.internal.JSJoda/LocalDateTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDateTime.isAfter|isAfter(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]
    open fun isBefore(kotlinx.datetime.internal.JSJoda/LocalDateTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDateTime.isBefore|isBefore(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]
    open fun isEqual(kotlinx.datetime.internal.JSJoda/LocalDateTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDateTime.isEqual|isEqual(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDateTime.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDateTime.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.minus|minus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.minus|minus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun minusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.minusDays|minusDays(kotlin.Int){}[0]
    open fun minusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.minusHours|minusHours(kotlin.Int){}[0]
    open fun minusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.minusMinutes|minusMinutes(kotlin.Int){}[0]
    open fun minusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.minusMonths|minusMonths(kotlin.Int){}[0]
    open fun minusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.minusNanos|minusNanos(kotlin.Double){}[0]
    open fun minusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.minusSeconds|minusSeconds(kotlin.Int){}[0]
    open fun minusWeeks(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.minusWeeks|minusWeeks(kotlin.Int){}[0]
    open fun minusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.minusYears|minusYears(kotlin.Int){}[0]
    open fun minute(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDateTime.minute|minute(){}[0]
    open fun month(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/LocalDateTime.month|month(){}[0]
    open fun monthValue(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDateTime.monthValue|monthValue(){}[0]
    open fun nano(): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalDateTime.nano|nano(){}[0]
    open fun plus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.plus|plus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.plus|plus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun plusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.plusDays|plusDays(kotlin.Int){}[0]
    open fun plusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.plusHours|plusHours(kotlin.Int){}[0]
    open fun plusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.plusMinutes|plusMinutes(kotlin.Int){}[0]
    open fun plusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.plusMonths|plusMonths(kotlin.Int){}[0]
    open fun plusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.plusNanos|plusNanos(kotlin.Double){}[0]
    open fun plusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.plusSeconds|plusSeconds(kotlin.Int){}[0]
    open fun plusWeeks(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.plusWeeks|plusWeeks(kotlin.Int){}[0]
    open fun plusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.plusYears|plusYears(kotlin.Int){}[0]
    open fun second(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDateTime.second|second(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/LocalDateTime.toJSON|toJSON(){}[0]
    open fun toLocalDate(): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/LocalDateTime.toLocalDate|toLocalDate(){}[0]
    open fun toLocalTime(): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.toLocalTime|toLocalTime(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/LocalDateTime.toString|toString(){}[0]
    open fun truncatedTo(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.truncatedTo|truncatedTo(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun until(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalDateTime.until|until(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalAdjuster): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.with|with(kotlinx.datetime.internal.JSJoda.TemporalAdjuster){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.with|with(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int){}[0]
    open fun withDayOfMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.withDayOfMonth|withDayOfMonth(kotlin.Int){}[0]
    open fun withDayOfYear(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.withDayOfYear|withDayOfYear(kotlin.Int){}[0]
    open fun withHour(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.withHour|withHour(kotlin.Int){}[0]
    open fun withMinute(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.withMinute|withMinute(kotlin.Int){}[0]
    open fun withMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.withMonth|withMonth(kotlin.Int){}[0]
    open fun withMonth(kotlinx.datetime.internal.JSJoda/Month): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.withMonth|withMonth(kotlinx.datetime.internal.JSJoda.Month){}[0]
    open fun withNano(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.withNano|withNano(kotlin.Int){}[0]
    open fun withSecond(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.withSecond|withSecond(kotlin.Int){}[0]
    open fun withYear(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.withYear|withYear(kotlin.Int){}[0]
    open fun year(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalDateTime.year|year(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion|null[0]
        final var FROM // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.FROM|{}FROM[0]
            final fun <get-FROM>(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/LocalDateTime> // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.FROM.<get-FROM>|<get-FROM>(){}[0]
            final fun <set-FROM>(kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/LocalDateTime>) // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.FROM.<set-FROM>|<set-FROM>(kotlinx.datetime.internal.JSJoda.TemporalQuery<kotlinx.datetime.internal.JSJoda.LocalDateTime>){}[0]
        final var MAX // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.MAX|{}MAX[0]
            final fun <get-MAX>(): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.MAX.<get-MAX>|<get-MAX>(){}[0]
            final fun <set-MAX>(kotlinx.datetime.internal.JSJoda/LocalDateTime) // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.MAX.<set-MAX>|<set-MAX>(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]
        final var MIN // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.MIN|{}MIN[0]
            final fun <get-MIN>(): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.MIN.<get-MIN>|<get-MIN>(){}[0]
            final fun <set-MIN>(kotlinx.datetime.internal.JSJoda/LocalDateTime) // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.MIN.<set-MIN>|<set-MIN>(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/Clock): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.now|now(kotlinx.datetime.internal.JSJoda.Clock){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.now|now(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun of(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.of|of(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun of(kotlin/Int, kotlinx.datetime.internal.JSJoda/Month, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.of|of(kotlin.Int;kotlinx.datetime.internal.JSJoda.Month;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun of(kotlinx.datetime.internal.JSJoda/LocalDate, kotlinx.datetime.internal.JSJoda/LocalTime): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.of|of(kotlinx.datetime.internal.JSJoda.LocalDate;kotlinx.datetime.internal.JSJoda.LocalTime){}[0]
        final fun ofEpochSecond(kotlin/Double, kotlin/Int, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.ofEpochSecond|ofEpochSecond(kotlin.Double;kotlin.Int;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final fun ofEpochSecond(kotlin/Double, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.ofEpochSecond|ofEpochSecond(kotlin.Double;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final fun ofInstant(kotlinx.datetime.internal.JSJoda/Instant, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.ofInstant|ofInstant(kotlinx.datetime.internal.JSJoda.Instant;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun parse(kotlin/String): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalDateTime.Companion.parse|parse(kotlin.String){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDateTime.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalDateTime.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/LocalTime : kotlinx.datetime.internal.JSJoda/Temporal { // kotlinx.datetime.internal.JSJoda/LocalTime|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/LocalTime.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/LocalTime.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun atDate(kotlinx.datetime.internal.JSJoda/LocalDate): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/LocalTime.atDate|atDate(kotlinx.datetime.internal.JSJoda.LocalDate){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/LocalTime): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.LocalTime){}[0]
    open fun format(kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlin/String // kotlinx.datetime.internal.JSJoda/LocalTime.format|format(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.hashCode|hashCode(){}[0]
    open fun hour(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.hour|hour(){}[0]
    open fun isAfter(kotlinx.datetime.internal.JSJoda/LocalTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalTime.isAfter|isAfter(kotlinx.datetime.internal.JSJoda.LocalTime){}[0]
    open fun isBefore(kotlinx.datetime.internal.JSJoda/LocalTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalTime.isBefore|isBefore(kotlinx.datetime.internal.JSJoda.LocalTime){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalTime.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalTime.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.minus|minus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.minus|minus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun minusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.minusHours|minusHours(kotlin.Int){}[0]
    open fun minusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.minusMinutes|minusMinutes(kotlin.Int){}[0]
    open fun minusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.minusNanos|minusNanos(kotlin.Double){}[0]
    open fun minusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.minusSeconds|minusSeconds(kotlin.Int){}[0]
    open fun minute(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.minute|minute(){}[0]
    open fun nano(): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalTime.nano|nano(){}[0]
    open fun plus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.plus|plus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.plus|plus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun plusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.plusHours|plusHours(kotlin.Int){}[0]
    open fun plusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.plusMinutes|plusMinutes(kotlin.Int){}[0]
    open fun plusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.plusNanos|plusNanos(kotlin.Double){}[0]
    open fun plusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.plusSeconds|plusSeconds(kotlin.Int){}[0]
    open fun second(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.second|second(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/LocalTime.toJSON|toJSON(){}[0]
    open fun toNanoOfDay(): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalTime.toNanoOfDay|toNanoOfDay(){}[0]
    open fun toSecondOfDay(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.toSecondOfDay|toSecondOfDay(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/LocalTime.toString|toString(){}[0]
    open fun truncatedTo(kotlinx.datetime.internal.JSJoda/ChronoUnit): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.truncatedTo|truncatedTo(kotlinx.datetime.internal.JSJoda.ChronoUnit){}[0]
    open fun until(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalTime.until|until(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalAdjuster): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.with|with(kotlinx.datetime.internal.JSJoda.TemporalAdjuster){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.with|with(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int){}[0]
    open fun withHour(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.withHour|withHour(kotlin.Int){}[0]
    open fun withMinute(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.withMinute|withMinute(kotlin.Int){}[0]
    open fun withNano(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.withNano|withNano(kotlin.Int){}[0]
    open fun withSecond(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.withSecond|withSecond(kotlin.Int){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/LocalTime.Companion|null[0]
        final var FROM // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.FROM|{}FROM[0]
            final fun <get-FROM>(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/LocalTime> // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.FROM.<get-FROM>|<get-FROM>(){}[0]
            final fun <set-FROM>(kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/LocalTime>) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.FROM.<set-FROM>|<set-FROM>(kotlinx.datetime.internal.JSJoda.TemporalQuery<kotlinx.datetime.internal.JSJoda.LocalTime>){}[0]
        final var HOURS_PER_DAY // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.HOURS_PER_DAY|{}HOURS_PER_DAY[0]
            final fun <get-HOURS_PER_DAY>(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.HOURS_PER_DAY.<get-HOURS_PER_DAY>|<get-HOURS_PER_DAY>(){}[0]
            final fun <set-HOURS_PER_DAY>(kotlin/Int) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.HOURS_PER_DAY.<set-HOURS_PER_DAY>|<set-HOURS_PER_DAY>(kotlin.Int){}[0]
        final var MAX // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MAX|{}MAX[0]
            final fun <get-MAX>(): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MAX.<get-MAX>|<get-MAX>(){}[0]
            final fun <set-MAX>(kotlinx.datetime.internal.JSJoda/LocalTime) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MAX.<set-MAX>|<set-MAX>(kotlinx.datetime.internal.JSJoda.LocalTime){}[0]
        final var MICROS_PER_DAY // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MICROS_PER_DAY|{}MICROS_PER_DAY[0]
            final fun <get-MICROS_PER_DAY>(): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MICROS_PER_DAY.<get-MICROS_PER_DAY>|<get-MICROS_PER_DAY>(){}[0]
            final fun <set-MICROS_PER_DAY>(kotlin/Double) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MICROS_PER_DAY.<set-MICROS_PER_DAY>|<set-MICROS_PER_DAY>(kotlin.Double){}[0]
        final var MIDNIGHT // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MIDNIGHT|{}MIDNIGHT[0]
            final fun <get-MIDNIGHT>(): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MIDNIGHT.<get-MIDNIGHT>|<get-MIDNIGHT>(){}[0]
            final fun <set-MIDNIGHT>(kotlinx.datetime.internal.JSJoda/LocalTime) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MIDNIGHT.<set-MIDNIGHT>|<set-MIDNIGHT>(kotlinx.datetime.internal.JSJoda.LocalTime){}[0]
        final var MILLIS_PER_DAY // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MILLIS_PER_DAY|{}MILLIS_PER_DAY[0]
            final fun <get-MILLIS_PER_DAY>(): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MILLIS_PER_DAY.<get-MILLIS_PER_DAY>|<get-MILLIS_PER_DAY>(){}[0]
            final fun <set-MILLIS_PER_DAY>(kotlin/Double) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MILLIS_PER_DAY.<set-MILLIS_PER_DAY>|<set-MILLIS_PER_DAY>(kotlin.Double){}[0]
        final var MIN // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MIN|{}MIN[0]
            final fun <get-MIN>(): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MIN.<get-MIN>|<get-MIN>(){}[0]
            final fun <set-MIN>(kotlinx.datetime.internal.JSJoda/LocalTime) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MIN.<set-MIN>|<set-MIN>(kotlinx.datetime.internal.JSJoda.LocalTime){}[0]
        final var MINUTES_PER_DAY // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MINUTES_PER_DAY|{}MINUTES_PER_DAY[0]
            final fun <get-MINUTES_PER_DAY>(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MINUTES_PER_DAY.<get-MINUTES_PER_DAY>|<get-MINUTES_PER_DAY>(){}[0]
            final fun <set-MINUTES_PER_DAY>(kotlin/Int) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MINUTES_PER_DAY.<set-MINUTES_PER_DAY>|<set-MINUTES_PER_DAY>(kotlin.Int){}[0]
        final var MINUTES_PER_HOUR // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MINUTES_PER_HOUR|{}MINUTES_PER_HOUR[0]
            final fun <get-MINUTES_PER_HOUR>(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MINUTES_PER_HOUR.<get-MINUTES_PER_HOUR>|<get-MINUTES_PER_HOUR>(){}[0]
            final fun <set-MINUTES_PER_HOUR>(kotlin/Int) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.MINUTES_PER_HOUR.<set-MINUTES_PER_HOUR>|<set-MINUTES_PER_HOUR>(kotlin.Int){}[0]
        final var NANOS_PER_DAY // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_DAY|{}NANOS_PER_DAY[0]
            final fun <get-NANOS_PER_DAY>(): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_DAY.<get-NANOS_PER_DAY>|<get-NANOS_PER_DAY>(){}[0]
            final fun <set-NANOS_PER_DAY>(kotlin/Double) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_DAY.<set-NANOS_PER_DAY>|<set-NANOS_PER_DAY>(kotlin.Double){}[0]
        final var NANOS_PER_HOUR // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_HOUR|{}NANOS_PER_HOUR[0]
            final fun <get-NANOS_PER_HOUR>(): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_HOUR.<get-NANOS_PER_HOUR>|<get-NANOS_PER_HOUR>(){}[0]
            final fun <set-NANOS_PER_HOUR>(kotlin/Double) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_HOUR.<set-NANOS_PER_HOUR>|<set-NANOS_PER_HOUR>(kotlin.Double){}[0]
        final var NANOS_PER_MINUTE // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_MINUTE|{}NANOS_PER_MINUTE[0]
            final fun <get-NANOS_PER_MINUTE>(): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_MINUTE.<get-NANOS_PER_MINUTE>|<get-NANOS_PER_MINUTE>(){}[0]
            final fun <set-NANOS_PER_MINUTE>(kotlin/Double) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_MINUTE.<set-NANOS_PER_MINUTE>|<set-NANOS_PER_MINUTE>(kotlin.Double){}[0]
        final var NANOS_PER_SECOND // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_SECOND|{}NANOS_PER_SECOND[0]
            final fun <get-NANOS_PER_SECOND>(): kotlin/Double // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_SECOND.<get-NANOS_PER_SECOND>|<get-NANOS_PER_SECOND>(){}[0]
            final fun <set-NANOS_PER_SECOND>(kotlin/Double) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NANOS_PER_SECOND.<set-NANOS_PER_SECOND>|<set-NANOS_PER_SECOND>(kotlin.Double){}[0]
        final var NOON // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NOON|{}NOON[0]
            final fun <get-NOON>(): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NOON.<get-NOON>|<get-NOON>(){}[0]
            final fun <set-NOON>(kotlinx.datetime.internal.JSJoda/LocalTime) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.NOON.<set-NOON>|<set-NOON>(kotlinx.datetime.internal.JSJoda.LocalTime){}[0]
        final var SECONDS_PER_DAY // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.SECONDS_PER_DAY|{}SECONDS_PER_DAY[0]
            final fun <get-SECONDS_PER_DAY>(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.SECONDS_PER_DAY.<get-SECONDS_PER_DAY>|<get-SECONDS_PER_DAY>(){}[0]
            final fun <set-SECONDS_PER_DAY>(kotlin/Int) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.SECONDS_PER_DAY.<set-SECONDS_PER_DAY>|<set-SECONDS_PER_DAY>(kotlin.Int){}[0]
        final var SECONDS_PER_HOUR // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.SECONDS_PER_HOUR|{}SECONDS_PER_HOUR[0]
            final fun <get-SECONDS_PER_HOUR>(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.SECONDS_PER_HOUR.<get-SECONDS_PER_HOUR>|<get-SECONDS_PER_HOUR>(){}[0]
            final fun <set-SECONDS_PER_HOUR>(kotlin/Int) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.SECONDS_PER_HOUR.<set-SECONDS_PER_HOUR>|<set-SECONDS_PER_HOUR>(kotlin.Int){}[0]
        final var SECONDS_PER_MINUTE // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.SECONDS_PER_MINUTE|{}SECONDS_PER_MINUTE[0]
            final fun <get-SECONDS_PER_MINUTE>(): kotlin/Int // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.SECONDS_PER_MINUTE.<get-SECONDS_PER_MINUTE>|<get-SECONDS_PER_MINUTE>(){}[0]
            final fun <set-SECONDS_PER_MINUTE>(kotlin/Int) // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.SECONDS_PER_MINUTE.<set-SECONDS_PER_MINUTE>|<set-SECONDS_PER_MINUTE>(kotlin.Int){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/Clock): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.now|now(kotlinx.datetime.internal.JSJoda.Clock){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.now|now(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun of(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.of|of(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun ofInstant(kotlinx.datetime.internal.JSJoda/Instant, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.ofInstant|ofInstant(kotlinx.datetime.internal.JSJoda.Instant;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun ofNanoOfDay(kotlin/Double): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.ofNanoOfDay|ofNanoOfDay(kotlin.Double){}[0]
        final fun ofSecondOfDay(kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.ofSecondOfDay|ofSecondOfDay(kotlin.Int;kotlin.Int){}[0]
        final fun parse(kotlin/String): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/LocalTime.Companion.parse|parse(kotlin.String){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalTime.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/LocalTime.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/Month : kotlinx.datetime.internal.JSJoda/TemporalAccessor { // kotlinx.datetime.internal.JSJoda/Month|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/Month.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/Month.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/Month): kotlin/Int // kotlinx.datetime.internal.JSJoda/Month.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.Month){}[0]
    open fun displayName(kotlinx.datetime.internal.JSJoda/TextStyle, kotlinx.datetime.internal.JSJoda/Locale): kotlin/String // kotlinx.datetime.internal.JSJoda/Month.displayName|displayName(kotlinx.datetime.internal.JSJoda.TextStyle;kotlinx.datetime.internal.JSJoda.Locale){}[0]
    open fun firstDayOfYear(kotlin/Boolean): kotlin/Int // kotlinx.datetime.internal.JSJoda/Month.firstDayOfYear|firstDayOfYear(kotlin.Boolean){}[0]
    open fun firstMonthOfQuarter(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.firstMonthOfQuarter|firstMonthOfQuarter(){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Month.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun length(kotlin/Boolean): kotlin/Int // kotlinx.datetime.internal.JSJoda/Month.length|length(kotlin.Boolean){}[0]
    open fun maxLength(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Month.maxLength|maxLength(){}[0]
    open fun minLength(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Month.minLength|minLength(){}[0]
    open fun minus(kotlin/Int): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.minus|minus(kotlin.Int){}[0]
    open fun name(): kotlin/String // kotlinx.datetime.internal.JSJoda/Month.name|name(){}[0]
    open fun ordinal(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Month.ordinal|ordinal(){}[0]
    open fun plus(kotlin/Int): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.plus|plus(kotlin.Int){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/Month.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/Month.toString|toString(){}[0]
    open fun value(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Month.value|value(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/Month.Companion|null[0]
        final var APRIL // kotlinx.datetime.internal.JSJoda/Month.Companion.APRIL|{}APRIL[0]
            final fun <get-APRIL>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.APRIL.<get-APRIL>|<get-APRIL>(){}[0]
            final fun <set-APRIL>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.APRIL.<set-APRIL>|<set-APRIL>(kotlinx.datetime.internal.JSJoda.Month){}[0]
        final var AUGUST // kotlinx.datetime.internal.JSJoda/Month.Companion.AUGUST|{}AUGUST[0]
            final fun <get-AUGUST>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.AUGUST.<get-AUGUST>|<get-AUGUST>(){}[0]
            final fun <set-AUGUST>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.AUGUST.<set-AUGUST>|<set-AUGUST>(kotlinx.datetime.internal.JSJoda.Month){}[0]
        final var DECEMBER // kotlinx.datetime.internal.JSJoda/Month.Companion.DECEMBER|{}DECEMBER[0]
            final fun <get-DECEMBER>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.DECEMBER.<get-DECEMBER>|<get-DECEMBER>(){}[0]
            final fun <set-DECEMBER>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.DECEMBER.<set-DECEMBER>|<set-DECEMBER>(kotlinx.datetime.internal.JSJoda.Month){}[0]
        final var FEBRUARY // kotlinx.datetime.internal.JSJoda/Month.Companion.FEBRUARY|{}FEBRUARY[0]
            final fun <get-FEBRUARY>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.FEBRUARY.<get-FEBRUARY>|<get-FEBRUARY>(){}[0]
            final fun <set-FEBRUARY>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.FEBRUARY.<set-FEBRUARY>|<set-FEBRUARY>(kotlinx.datetime.internal.JSJoda.Month){}[0]
        final var JANUARY // kotlinx.datetime.internal.JSJoda/Month.Companion.JANUARY|{}JANUARY[0]
            final fun <get-JANUARY>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.JANUARY.<get-JANUARY>|<get-JANUARY>(){}[0]
            final fun <set-JANUARY>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.JANUARY.<set-JANUARY>|<set-JANUARY>(kotlinx.datetime.internal.JSJoda.Month){}[0]
        final var JULY // kotlinx.datetime.internal.JSJoda/Month.Companion.JULY|{}JULY[0]
            final fun <get-JULY>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.JULY.<get-JULY>|<get-JULY>(){}[0]
            final fun <set-JULY>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.JULY.<set-JULY>|<set-JULY>(kotlinx.datetime.internal.JSJoda.Month){}[0]
        final var JUNE // kotlinx.datetime.internal.JSJoda/Month.Companion.JUNE|{}JUNE[0]
            final fun <get-JUNE>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.JUNE.<get-JUNE>|<get-JUNE>(){}[0]
            final fun <set-JUNE>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.JUNE.<set-JUNE>|<set-JUNE>(kotlinx.datetime.internal.JSJoda.Month){}[0]
        final var MARCH // kotlinx.datetime.internal.JSJoda/Month.Companion.MARCH|{}MARCH[0]
            final fun <get-MARCH>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.MARCH.<get-MARCH>|<get-MARCH>(){}[0]
            final fun <set-MARCH>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.MARCH.<set-MARCH>|<set-MARCH>(kotlinx.datetime.internal.JSJoda.Month){}[0]
        final var MAY // kotlinx.datetime.internal.JSJoda/Month.Companion.MAY|{}MAY[0]
            final fun <get-MAY>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.MAY.<get-MAY>|<get-MAY>(){}[0]
            final fun <set-MAY>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.MAY.<set-MAY>|<set-MAY>(kotlinx.datetime.internal.JSJoda.Month){}[0]
        final var NOVEMBER // kotlinx.datetime.internal.JSJoda/Month.Companion.NOVEMBER|{}NOVEMBER[0]
            final fun <get-NOVEMBER>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.NOVEMBER.<get-NOVEMBER>|<get-NOVEMBER>(){}[0]
            final fun <set-NOVEMBER>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.NOVEMBER.<set-NOVEMBER>|<set-NOVEMBER>(kotlinx.datetime.internal.JSJoda.Month){}[0]
        final var OCTOBER // kotlinx.datetime.internal.JSJoda/Month.Companion.OCTOBER|{}OCTOBER[0]
            final fun <get-OCTOBER>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.OCTOBER.<get-OCTOBER>|<get-OCTOBER>(){}[0]
            final fun <set-OCTOBER>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.OCTOBER.<set-OCTOBER>|<set-OCTOBER>(kotlinx.datetime.internal.JSJoda.Month){}[0]
        final var SEPTEMBER // kotlinx.datetime.internal.JSJoda/Month.Companion.SEPTEMBER|{}SEPTEMBER[0]
            final fun <get-SEPTEMBER>(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.SEPTEMBER.<get-SEPTEMBER>|<get-SEPTEMBER>(){}[0]
            final fun <set-SEPTEMBER>(kotlinx.datetime.internal.JSJoda/Month) // kotlinx.datetime.internal.JSJoda/Month.Companion.SEPTEMBER.<set-SEPTEMBER>|<set-SEPTEMBER>(kotlinx.datetime.internal.JSJoda.Month){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun of(kotlin/Int): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.of|of(kotlin.Int){}[0]
        final fun valueOf(kotlin/String): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/Month.Companion.valueOf|valueOf(kotlin.String){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Month.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Month.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/MonthDay : kotlinx.datetime.internal.JSJoda/TemporalAccessor { // kotlinx.datetime.internal.JSJoda/MonthDay|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/MonthDay.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/MonthDay.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun atYear(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/MonthDay.atYear|atYear(kotlin.Int){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/MonthDay): kotlin/Int // kotlinx.datetime.internal.JSJoda/MonthDay.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.MonthDay){}[0]
    open fun dayOfMonth(): kotlin/Int // kotlinx.datetime.internal.JSJoda/MonthDay.dayOfMonth|dayOfMonth(){}[0]
    open fun format(kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlin/String // kotlinx.datetime.internal.JSJoda/MonthDay.format|format(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    open fun isAfter(kotlinx.datetime.internal.JSJoda/MonthDay): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/MonthDay.isAfter|isAfter(kotlinx.datetime.internal.JSJoda.MonthDay){}[0]
    open fun isBefore(kotlinx.datetime.internal.JSJoda/MonthDay): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/MonthDay.isBefore|isBefore(kotlinx.datetime.internal.JSJoda.MonthDay){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/MonthDay.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isValidYear(kotlin/Int): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/MonthDay.isValidYear|isValidYear(kotlin.Int){}[0]
    open fun month(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/MonthDay.month|month(){}[0]
    open fun monthValue(): kotlin/Int // kotlinx.datetime.internal.JSJoda/MonthDay.monthValue|monthValue(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/MonthDay.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/MonthDay.toString|toString(){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/Month): kotlinx.datetime.internal.JSJoda/MonthDay // kotlinx.datetime.internal.JSJoda/MonthDay.with|with(kotlinx.datetime.internal.JSJoda.Month){}[0]
    open fun withDayOfMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/MonthDay // kotlinx.datetime.internal.JSJoda/MonthDay.withDayOfMonth|withDayOfMonth(kotlin.Int){}[0]
    open fun withMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/MonthDay // kotlinx.datetime.internal.JSJoda/MonthDay.withMonth|withMonth(kotlin.Int){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/MonthDay.Companion|null[0]
        final var FROM // kotlinx.datetime.internal.JSJoda/MonthDay.Companion.FROM|{}FROM[0]
            final fun <get-FROM>(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/MonthDay> // kotlinx.datetime.internal.JSJoda/MonthDay.Companion.FROM.<get-FROM>|<get-FROM>(){}[0]
            final fun <set-FROM>(kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/MonthDay>) // kotlinx.datetime.internal.JSJoda/MonthDay.Companion.FROM.<set-FROM>|<set-FROM>(kotlinx.datetime.internal.JSJoda.TemporalQuery<kotlinx.datetime.internal.JSJoda.MonthDay>){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/MonthDay // kotlinx.datetime.internal.JSJoda/MonthDay.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/Clock): kotlinx.datetime.internal.JSJoda/MonthDay // kotlinx.datetime.internal.JSJoda/MonthDay.Companion.now|now(kotlinx.datetime.internal.JSJoda.Clock){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/MonthDay // kotlinx.datetime.internal.JSJoda/MonthDay.Companion.now|now(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun of(kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/MonthDay // kotlinx.datetime.internal.JSJoda/MonthDay.Companion.of|of(kotlin.Int;kotlin.Int){}[0]
        final fun of(kotlinx.datetime.internal.JSJoda/Month, kotlin/Int): kotlinx.datetime.internal.JSJoda/MonthDay // kotlinx.datetime.internal.JSJoda/MonthDay.Companion.of|of(kotlinx.datetime.internal.JSJoda.Month;kotlin.Int){}[0]
        final fun parse(kotlin/String, kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlinx.datetime.internal.JSJoda/MonthDay // kotlinx.datetime.internal.JSJoda/MonthDay.Companion.parse|parse(kotlin.String;kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/MonthDay.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/MonthDay.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/OffsetDateTime : kotlinx.datetime.internal.JSJoda/Temporal { // kotlinx.datetime.internal.JSJoda/OffsetDateTime|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/OffsetDateTime.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/OffsetDateTime.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun atZoneSameInstant(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.atZoneSameInstant|atZoneSameInstant(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
    open fun atZoneSimilarLocal(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.atZoneSimilarLocal|atZoneSimilarLocal(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/OffsetDateTime): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetDateTime.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.OffsetDateTime){}[0]
    open fun dayOfMonth(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetDateTime.dayOfMonth|dayOfMonth(){}[0]
    open fun dayOfWeek(): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/OffsetDateTime.dayOfWeek|dayOfWeek(){}[0]
    open fun dayOfYear(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetDateTime.dayOfYear|dayOfYear(){}[0]
    open fun format(kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlin/String // kotlinx.datetime.internal.JSJoda/OffsetDateTime.format|format(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    open fun get(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetDateTime.get|get(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetDateTime.hashCode|hashCode(){}[0]
    open fun hour(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetDateTime.hour|hour(){}[0]
    open fun isAfter(kotlinx.datetime.internal.JSJoda/OffsetDateTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetDateTime.isAfter|isAfter(kotlinx.datetime.internal.JSJoda.OffsetDateTime){}[0]
    open fun isBefore(kotlinx.datetime.internal.JSJoda/OffsetDateTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetDateTime.isBefore|isBefore(kotlinx.datetime.internal.JSJoda.OffsetDateTime){}[0]
    open fun isEqual(kotlinx.datetime.internal.JSJoda/OffsetDateTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetDateTime.isEqual|isEqual(kotlinx.datetime.internal.JSJoda.OffsetDateTime){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetDateTime.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetDateTime.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.minus|minus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.minus|minus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun minusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.minusDays|minusDays(kotlin.Int){}[0]
    open fun minusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.minusHours|minusHours(kotlin.Int){}[0]
    open fun minusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.minusMinutes|minusMinutes(kotlin.Int){}[0]
    open fun minusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.minusMonths|minusMonths(kotlin.Int){}[0]
    open fun minusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.minusNanos|minusNanos(kotlin.Double){}[0]
    open fun minusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.minusSeconds|minusSeconds(kotlin.Int){}[0]
    open fun minusWeeks(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.minusWeeks|minusWeeks(kotlin.Int){}[0]
    open fun minusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.minusYears|minusYears(kotlin.Int){}[0]
    open fun minute(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetDateTime.minute|minute(){}[0]
    open fun month(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/OffsetDateTime.month|month(){}[0]
    open fun monthValue(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetDateTime.monthValue|monthValue(){}[0]
    open fun nano(): kotlin/Double // kotlinx.datetime.internal.JSJoda/OffsetDateTime.nano|nano(){}[0]
    open fun offset(): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/OffsetDateTime.offset|offset(){}[0]
    open fun plus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.plus|plus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.plus|plus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun plusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.plusDays|plusDays(kotlin.Int){}[0]
    open fun plusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.plusHours|plusHours(kotlin.Int){}[0]
    open fun plusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.plusMinutes|plusMinutes(kotlin.Int){}[0]
    open fun plusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.plusMonths|plusMonths(kotlin.Int){}[0]
    open fun plusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.plusNanos|plusNanos(kotlin.Double){}[0]
    open fun plusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.plusSeconds|plusSeconds(kotlin.Int){}[0]
    open fun plusWeeks(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.plusWeeks|plusWeeks(kotlin.Int){}[0]
    open fun plusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.plusYears|plusYears(kotlin.Int){}[0]
    open fun range(kotlinx.datetime.internal.JSJoda/TemporalField): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/OffsetDateTime.range|range(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun second(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetDateTime.second|second(){}[0]
    open fun toEpochSecond(): kotlin/Double // kotlinx.datetime.internal.JSJoda/OffsetDateTime.toEpochSecond|toEpochSecond(){}[0]
    open fun toInstant(): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/OffsetDateTime.toInstant|toInstant(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/OffsetDateTime.toJSON|toJSON(){}[0]
    open fun toLocalDate(): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/OffsetDateTime.toLocalDate|toLocalDate(){}[0]
    open fun toLocalDateTime(): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.toLocalDateTime|toLocalDateTime(){}[0]
    open fun toLocalTime(): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.toLocalTime|toLocalTime(){}[0]
    open fun toOffsetTime(): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.toOffsetTime|toOffsetTime(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/OffsetDateTime.toString|toString(){}[0]
    open fun truncatedTo(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.truncatedTo|truncatedTo(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun until(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Double // kotlinx.datetime.internal.JSJoda/OffsetDateTime.until|until(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalAdjuster): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.with|with(kotlinx.datetime.internal.JSJoda.TemporalAdjuster){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.with|with(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int){}[0]
    open fun withDayOfMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.withDayOfMonth|withDayOfMonth(kotlin.Int){}[0]
    open fun withDayOfYear(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.withDayOfYear|withDayOfYear(kotlin.Int){}[0]
    open fun withHour(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.withHour|withHour(kotlin.Int){}[0]
    open fun withMinute(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.withMinute|withMinute(kotlin.Int){}[0]
    open fun withMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.withMonth|withMonth(kotlin.Int){}[0]
    open fun withNano(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.withNano|withNano(kotlin.Int){}[0]
    open fun withOffsetSameInstant(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.withOffsetSameInstant|withOffsetSameInstant(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    open fun withOffsetSameLocal(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.withOffsetSameLocal|withOffsetSameLocal(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    open fun withSecond(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.withSecond|withSecond(kotlin.Int){}[0]
    open fun withYear(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.withYear|withYear(kotlin.Int){}[0]
    open fun year(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetDateTime.year|year(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion|null[0]
        final var FROM // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.FROM|{}FROM[0]
            final fun <get-FROM>(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/OffsetDateTime> // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.FROM.<get-FROM>|<get-FROM>(){}[0]
            final fun <set-FROM>(kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/OffsetDateTime>) // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.FROM.<set-FROM>|<set-FROM>(kotlinx.datetime.internal.JSJoda.TemporalQuery<kotlinx.datetime.internal.JSJoda.OffsetDateTime>){}[0]
        final var MAX // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.MAX|{}MAX[0]
            final fun <get-MAX>(): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.MAX.<get-MAX>|<get-MAX>(){}[0]
            final fun <set-MAX>(kotlinx.datetime.internal.JSJoda/OffsetDateTime) // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.MAX.<set-MAX>|<set-MAX>(kotlinx.datetime.internal.JSJoda.OffsetDateTime){}[0]
        final var MIN // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.MIN|{}MIN[0]
            final fun <get-MIN>(): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.MIN.<get-MIN>|<get-MIN>(){}[0]
            final fun <set-MIN>(kotlinx.datetime.internal.JSJoda/OffsetDateTime) // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.MIN.<set-MIN>|<set-MIN>(kotlinx.datetime.internal.JSJoda.OffsetDateTime){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/Clock): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.now|now(kotlinx.datetime.internal.JSJoda.Clock){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.now|now(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun of(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.of|of(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final fun of(kotlinx.datetime.internal.JSJoda/LocalDate, kotlinx.datetime.internal.JSJoda/LocalTime, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.of|of(kotlinx.datetime.internal.JSJoda.LocalDate;kotlinx.datetime.internal.JSJoda.LocalTime;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final fun of(kotlinx.datetime.internal.JSJoda/LocalDateTime, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.of|of(kotlinx.datetime.internal.JSJoda.LocalDateTime;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final fun ofInstant(kotlinx.datetime.internal.JSJoda/Instant, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.ofInstant|ofInstant(kotlinx.datetime.internal.JSJoda.Instant;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun parse(kotlin/String): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetDateTime.Companion.parse|parse(kotlin.String){}[0]
    }

    // Targets: [js]
    open fun <#A1: kotlinx.datetime.internal/InteropInterface> query(kotlinx.datetime.internal.JSJoda/TemporalQuery<#A1>): #A1? // kotlinx.datetime.internal.JSJoda/OffsetDateTime.query|query(kotlinx.datetime.internal.JSJoda.TemporalQuery<0:0>){0ยง<kotlinx.datetime.internal.InteropInterface>}[0]

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetDateTime.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun <#A1: kotlin.js/JsAny> query(kotlinx.datetime.internal.JSJoda/TemporalQuery<#A1>): #A1? // kotlinx.datetime.internal.JSJoda/OffsetDateTime.query|query(kotlinx.datetime.internal.JSJoda.TemporalQuery<0:0>){0ยง<kotlin.js.JsAny>}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetDateTime.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/OffsetTime : kotlinx.datetime.internal.JSJoda/Temporal { // kotlinx.datetime.internal.JSJoda/OffsetTime|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/OffsetTime.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/OffsetTime.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun atDate(kotlinx.datetime.internal.JSJoda/LocalDate): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/OffsetTime.atDate|atDate(kotlinx.datetime.internal.JSJoda.LocalDate){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/OffsetTime): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetTime.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.OffsetTime){}[0]
    open fun format(kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlin/String // kotlinx.datetime.internal.JSJoda/OffsetTime.format|format(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    open fun get(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetTime.get|get(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetTime.hashCode|hashCode(){}[0]
    open fun hour(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetTime.hour|hour(){}[0]
    open fun isAfter(kotlinx.datetime.internal.JSJoda/OffsetTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetTime.isAfter|isAfter(kotlinx.datetime.internal.JSJoda.OffsetTime){}[0]
    open fun isBefore(kotlinx.datetime.internal.JSJoda/OffsetTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetTime.isBefore|isBefore(kotlinx.datetime.internal.JSJoda.OffsetTime){}[0]
    open fun isEqual(kotlinx.datetime.internal.JSJoda/OffsetTime): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetTime.isEqual|isEqual(kotlinx.datetime.internal.JSJoda.OffsetTime){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetTime.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetTime.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.minus|minus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.minus|minus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun minusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.minusHours|minusHours(kotlin.Int){}[0]
    open fun minusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.minusMinutes|minusMinutes(kotlin.Int){}[0]
    open fun minusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.minusNanos|minusNanos(kotlin.Double){}[0]
    open fun minusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.minusSeconds|minusSeconds(kotlin.Int){}[0]
    open fun minute(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetTime.minute|minute(){}[0]
    open fun nano(): kotlin/Double // kotlinx.datetime.internal.JSJoda/OffsetTime.nano|nano(){}[0]
    open fun offset(): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/OffsetTime.offset|offset(){}[0]
    open fun plus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.plus|plus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.plus|plus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun plusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.plusHours|plusHours(kotlin.Int){}[0]
    open fun plusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.plusMinutes|plusMinutes(kotlin.Int){}[0]
    open fun plusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.plusNanos|plusNanos(kotlin.Double){}[0]
    open fun plusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.plusSeconds|plusSeconds(kotlin.Int){}[0]
    open fun range(kotlinx.datetime.internal.JSJoda/TemporalField): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/OffsetTime.range|range(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun second(): kotlin/Int // kotlinx.datetime.internal.JSJoda/OffsetTime.second|second(){}[0]
    open fun toEpochSecond(kotlinx.datetime.internal.JSJoda/LocalDate): kotlin/Double // kotlinx.datetime.internal.JSJoda/OffsetTime.toEpochSecond|toEpochSecond(kotlinx.datetime.internal.JSJoda.LocalDate){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/OffsetTime.toJSON|toJSON(){}[0]
    open fun toLocalTime(): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/OffsetTime.toLocalTime|toLocalTime(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/OffsetTime.toString|toString(){}[0]
    open fun truncatedTo(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.truncatedTo|truncatedTo(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun until(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Double // kotlinx.datetime.internal.JSJoda/OffsetTime.until|until(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalAdjuster): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.with|with(kotlinx.datetime.internal.JSJoda.TemporalAdjuster){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.with|with(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int){}[0]
    open fun withHour(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.withHour|withHour(kotlin.Int){}[0]
    open fun withMinute(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.withMinute|withMinute(kotlin.Int){}[0]
    open fun withNano(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.withNano|withNano(kotlin.Int){}[0]
    open fun withOffsetSameInstant(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.withOffsetSameInstant|withOffsetSameInstant(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    open fun withOffsetSameLocal(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.withOffsetSameLocal|withOffsetSameLocal(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    open fun withSecond(kotlin/Int): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.withSecond|withSecond(kotlin.Int){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion|null[0]
        final var FROM // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.FROM|{}FROM[0]
            final fun <get-FROM>(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/OffsetTime> // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.FROM.<get-FROM>|<get-FROM>(){}[0]
            final fun <set-FROM>(kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/OffsetTime>) // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.FROM.<set-FROM>|<set-FROM>(kotlinx.datetime.internal.JSJoda.TemporalQuery<kotlinx.datetime.internal.JSJoda.OffsetTime>){}[0]
        final var MAX // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.MAX|{}MAX[0]
            final fun <get-MAX>(): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.MAX.<get-MAX>|<get-MAX>(){}[0]
            final fun <set-MAX>(kotlinx.datetime.internal.JSJoda/OffsetTime) // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.MAX.<set-MAX>|<set-MAX>(kotlinx.datetime.internal.JSJoda.OffsetTime){}[0]
        final var MIN // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.MIN|{}MIN[0]
            final fun <get-MIN>(): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.MIN.<get-MIN>|<get-MIN>(){}[0]
            final fun <set-MIN>(kotlinx.datetime.internal.JSJoda/OffsetTime) // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.MIN.<set-MIN>|<set-MIN>(kotlinx.datetime.internal.JSJoda.OffsetTime){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/Clock): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.now|now(kotlinx.datetime.internal.JSJoda.Clock){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.now|now(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun of(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.of|of(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final fun of(kotlinx.datetime.internal.JSJoda/LocalTime, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.of|of(kotlinx.datetime.internal.JSJoda.LocalTime;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final fun ofInstant(kotlinx.datetime.internal.JSJoda/Instant, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.ofInstant|ofInstant(kotlinx.datetime.internal.JSJoda.Instant;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun parse(kotlin/String, kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlinx.datetime.internal.JSJoda/OffsetTime // kotlinx.datetime.internal.JSJoda/OffsetTime.Companion.parse|parse(kotlin.String;kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    }

    // Targets: [js]
    open fun <#A1: kotlinx.datetime.internal/InteropInterface> query(kotlinx.datetime.internal.JSJoda/TemporalQuery<#A1>): #A1? // kotlinx.datetime.internal.JSJoda/OffsetTime.query|query(kotlinx.datetime.internal.JSJoda.TemporalQuery<0:0>){0ยง<kotlinx.datetime.internal.InteropInterface>}[0]

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetTime.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun <#A1: kotlin.js/JsAny> query(kotlinx.datetime.internal.JSJoda/TemporalQuery<#A1>): #A1? // kotlinx.datetime.internal.JSJoda/OffsetTime.query|query(kotlinx.datetime.internal.JSJoda.TemporalQuery<0:0>){0ยง<kotlin.js.JsAny>}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/OffsetTime.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/Period : kotlinx.datetime.internal.JSJoda/TemporalAmount { // kotlinx.datetime.internal.JSJoda/Period|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/Period.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> addTo(#A1): #A1 // kotlinx.datetime.internal.JSJoda/Period.addTo|addTo(0:0){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> subtractFrom(#A1): #A1 // kotlinx.datetime.internal.JSJoda/Period.subtractFrom|subtractFrom(0:0){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun chronology(): kotlinx.datetime.internal.JSJoda/IsoChronology // kotlinx.datetime.internal.JSJoda/Period.chronology|chronology(){}[0]
    open fun days(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Period.days|days(){}[0]
    open fun get(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Int // kotlinx.datetime.internal.JSJoda/Period.get|get(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Period.hashCode|hashCode(){}[0]
    open fun isNegative(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Period.isNegative|isNegative(){}[0]
    open fun isZero(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Period.isZero|isZero(){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.minus|minus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun minusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.minusDays|minusDays(kotlin.Int){}[0]
    open fun minusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.minusMonths|minusMonths(kotlin.Int){}[0]
    open fun minusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.minusYears|minusYears(kotlin.Int){}[0]
    open fun months(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Period.months|months(){}[0]
    open fun multipliedBy(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.multipliedBy|multipliedBy(kotlin.Int){}[0]
    open fun negated(): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.negated|negated(){}[0]
    open fun normalized(): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.normalized|normalized(){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.plus|plus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun plusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.plusDays|plusDays(kotlin.Int){}[0]
    open fun plusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.plusMonths|plusMonths(kotlin.Int){}[0]
    open fun plusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.plusYears|plusYears(kotlin.Int){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/Period.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/Period.toString|toString(){}[0]
    open fun toTotalMonths(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Period.toTotalMonths|toTotalMonths(){}[0]
    open fun withDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.withDays|withDays(kotlin.Int){}[0]
    open fun withMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.withMonths|withMonths(kotlin.Int){}[0]
    open fun withYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.withYears|withYears(kotlin.Int){}[0]
    open fun years(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Period.years|years(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/Period.Companion|null[0]
        final var ZERO // kotlinx.datetime.internal.JSJoda/Period.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]
            final fun <set-ZERO>(kotlinx.datetime.internal.JSJoda/Period) // kotlinx.datetime.internal.JSJoda/Period.Companion.ZERO.<set-ZERO>|<set-ZERO>(kotlinx.datetime.internal.JSJoda.Period){}[0]

        final fun between(kotlinx.datetime.internal.JSJoda/LocalDate, kotlinx.datetime.internal.JSJoda/LocalDate): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.Companion.between|between(kotlinx.datetime.internal.JSJoda.LocalDate;kotlinx.datetime.internal.JSJoda.LocalDate){}[0]
        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
        final fun of(kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.Companion.of|of(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun ofDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.Companion.ofDays|ofDays(kotlin.Int){}[0]
        final fun ofMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.Companion.ofMonths|ofMonths(kotlin.Int){}[0]
        final fun ofWeeks(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.Companion.ofWeeks|ofWeeks(kotlin.Int){}[0]
        final fun ofYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.Companion.ofYears|ofYears(kotlin.Int){}[0]
        final fun parse(kotlin/String): kotlinx.datetime.internal.JSJoda/Period // kotlinx.datetime.internal.JSJoda/Period.Companion.parse|parse(kotlin.String){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Period.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Period.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/Temporal : kotlinx.datetime.internal.JSJoda/TemporalAccessor { // kotlinx.datetime.internal.JSJoda/Temporal|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/Temporal.<init>|<init>(){}[0]

    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Temporal.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Temporal.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/Temporal.minus|minus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/Temporal.minus|minus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun plus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/Temporal.plus|plus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/Temporal.plus|plus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun until(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Double // kotlinx.datetime.internal.JSJoda/Temporal.until|until(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalAdjuster): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/Temporal.with|with(kotlinx.datetime.internal.JSJoda.TemporalAdjuster){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/Temporal.with|with(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/Year : kotlinx.datetime.internal.JSJoda/Temporal { // kotlinx.datetime.internal.JSJoda/Year|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/Year.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/Year.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun atDay(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/Year.atDay|atDay(kotlin.Int){}[0]
    open fun atMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/Year.atMonth|atMonth(kotlin.Int){}[0]
    open fun atMonth(kotlinx.datetime.internal.JSJoda/Month): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/Year.atMonth|atMonth(kotlinx.datetime.internal.JSJoda.Month){}[0]
    open fun atMonthDay(kotlinx.datetime.internal.JSJoda/MonthDay): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/Year.atMonthDay|atMonthDay(kotlinx.datetime.internal.JSJoda.MonthDay){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/Year): kotlin/Int // kotlinx.datetime.internal.JSJoda/Year.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.Year){}[0]
    open fun isAfter(kotlinx.datetime.internal.JSJoda/Year): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Year.isAfter|isAfter(kotlinx.datetime.internal.JSJoda.Year){}[0]
    open fun isBefore(kotlinx.datetime.internal.JSJoda/Year): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Year.isBefore|isBefore(kotlinx.datetime.internal.JSJoda.Year){}[0]
    open fun isLeap(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Year.isLeap|isLeap(){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Year.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Year.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun isValidMonthDay(kotlinx.datetime.internal.JSJoda/MonthDay): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Year.isValidMonthDay|isValidMonthDay(kotlinx.datetime.internal.JSJoda.MonthDay){}[0]
    open fun length(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Year.length|length(){}[0]
    open fun minus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.minus|minus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.minus|minus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun minusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.minusYears|minusYears(kotlin.Int){}[0]
    open fun plus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.plus|plus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.plus|plus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun plusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.plusYears|plusYears(kotlin.Int){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/Year.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/Year.toString|toString(){}[0]
    open fun until(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Double // kotlinx.datetime.internal.JSJoda/Year.until|until(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun value(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Year.value|value(){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalAdjuster): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.with|with(kotlinx.datetime.internal.JSJoda.TemporalAdjuster){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.with|with(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/Year.Companion|null[0]
        final var FROM // kotlinx.datetime.internal.JSJoda/Year.Companion.FROM|{}FROM[0]
            final fun <get-FROM>(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/Year> // kotlinx.datetime.internal.JSJoda/Year.Companion.FROM.<get-FROM>|<get-FROM>(){}[0]
            final fun <set-FROM>(kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/Year>) // kotlinx.datetime.internal.JSJoda/Year.Companion.FROM.<set-FROM>|<set-FROM>(kotlinx.datetime.internal.JSJoda.TemporalQuery<kotlinx.datetime.internal.JSJoda.Year>){}[0]
        final var MAX_VALUE // kotlinx.datetime.internal.JSJoda/Year.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Year.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
            final fun <set-MAX_VALUE>(kotlin/Int) // kotlinx.datetime.internal.JSJoda/Year.Companion.MAX_VALUE.<set-MAX_VALUE>|<set-MAX_VALUE>(kotlin.Int){}[0]
        final var MIN_VALUE // kotlinx.datetime.internal.JSJoda/Year.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/Int // kotlinx.datetime.internal.JSJoda/Year.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
            final fun <set-MIN_VALUE>(kotlin/Int) // kotlinx.datetime.internal.JSJoda/Year.Companion.MIN_VALUE.<set-MIN_VALUE>|<set-MIN_VALUE>(kotlin.Int){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun isLeap(kotlin/Int): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Year.Companion.isLeap|isLeap(kotlin.Int){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/Clock): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.Companion.now|now(kotlinx.datetime.internal.JSJoda.Clock){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.Companion.now|now(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun of(kotlin/Int): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.Companion.of|of(kotlin.Int){}[0]
        final fun parse(kotlin/String, kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlinx.datetime.internal.JSJoda/Year // kotlinx.datetime.internal.JSJoda/Year.Companion.parse|parse(kotlin.String;kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Year.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Year.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/YearMonth : kotlinx.datetime.internal.JSJoda/Temporal { // kotlinx.datetime.internal.JSJoda/YearMonth|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/YearMonth.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/YearMonth.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun atDay(kotlin/Int): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/YearMonth.atDay|atDay(kotlin.Int){}[0]
    open fun atEndOfMonth(): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/YearMonth.atEndOfMonth|atEndOfMonth(){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/YearMonth): kotlin/Int // kotlinx.datetime.internal.JSJoda/YearMonth.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.YearMonth){}[0]
    open fun format(kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlin/String // kotlinx.datetime.internal.JSJoda/YearMonth.format|format(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    open fun isAfter(kotlinx.datetime.internal.JSJoda/YearMonth): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/YearMonth.isAfter|isAfter(kotlinx.datetime.internal.JSJoda.YearMonth){}[0]
    open fun isBefore(kotlinx.datetime.internal.JSJoda/YearMonth): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/YearMonth.isBefore|isBefore(kotlinx.datetime.internal.JSJoda.YearMonth){}[0]
    open fun isLeapYear(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/YearMonth.isLeapYear|isLeapYear(){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/YearMonth.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/YearMonth.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun isValidDay(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/YearMonth.isValidDay|isValidDay(){}[0]
    open fun lengthOfMonth(): kotlin/Int // kotlinx.datetime.internal.JSJoda/YearMonth.lengthOfMonth|lengthOfMonth(){}[0]
    open fun lengthOfYear(): kotlin/Int // kotlinx.datetime.internal.JSJoda/YearMonth.lengthOfYear|lengthOfYear(){}[0]
    open fun minus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.minus|minus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.minus|minus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun minusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.minusMonths|minusMonths(kotlin.Int){}[0]
    open fun minusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.minusYears|minusYears(kotlin.Int){}[0]
    open fun month(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/YearMonth.month|month(){}[0]
    open fun monthValue(): kotlin/Int // kotlinx.datetime.internal.JSJoda/YearMonth.monthValue|monthValue(){}[0]
    open fun plus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.plus|plus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.plus|plus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun plusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.plusMonths|plusMonths(kotlin.Int){}[0]
    open fun plusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.plusYears|plusYears(kotlin.Int){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/YearMonth.toJSON|toJSON(){}[0]
    open fun until(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Double // kotlinx.datetime.internal.JSJoda/YearMonth.until|until(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalAdjuster): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.with|with(kotlinx.datetime.internal.JSJoda.TemporalAdjuster){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.with|with(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int){}[0]
    open fun withMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.withMonth|withMonth(kotlin.Int){}[0]
    open fun withYear(kotlin/Int): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.withYear|withYear(kotlin.Int){}[0]
    open fun year(): kotlin/Int // kotlinx.datetime.internal.JSJoda/YearMonth.year|year(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/YearMonth.Companion|null[0]
        final var FROM // kotlinx.datetime.internal.JSJoda/YearMonth.Companion.FROM|{}FROM[0]
            final fun <get-FROM>(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/YearMonth> // kotlinx.datetime.internal.JSJoda/YearMonth.Companion.FROM.<get-FROM>|<get-FROM>(){}[0]
            final fun <set-FROM>(kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/YearMonth>) // kotlinx.datetime.internal.JSJoda/YearMonth.Companion.FROM.<set-FROM>|<set-FROM>(kotlinx.datetime.internal.JSJoda.TemporalQuery<kotlinx.datetime.internal.JSJoda.YearMonth>){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/Clock): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.Companion.now|now(kotlinx.datetime.internal.JSJoda.Clock){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.Companion.now|now(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun of(kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.Companion.of|of(kotlin.Int;kotlin.Int){}[0]
        final fun of(kotlin/Int, kotlinx.datetime.internal.JSJoda/Month): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.Companion.of|of(kotlin.Int;kotlinx.datetime.internal.JSJoda.Month){}[0]
        final fun parse(kotlin/String, kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlinx.datetime.internal.JSJoda/YearMonth // kotlinx.datetime.internal.JSJoda/YearMonth.Companion.parse|parse(kotlin.String;kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/YearMonth.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/YearMonth.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/ZoneOffset : kotlinx.datetime.internal.JSJoda/ZoneId { // kotlinx.datetime.internal.JSJoda/ZoneOffset|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ZoneOffset.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/ZoneOffset.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun compareTo(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneOffset.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    open fun get(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneOffset.get|get(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneOffset.hashCode|hashCode(){}[0]
    open fun id(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneOffset.id|id(){}[0]
    open fun rules(): kotlinx.datetime.internal.JSJoda/ZoneRules // kotlinx.datetime.internal.JSJoda/ZoneOffset.rules|rules(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneOffset.toString|toString(){}[0]
    open fun totalSeconds(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneOffset.totalSeconds|totalSeconds(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion|null[0]
        final var MAX // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.MAX|{}MAX[0]
            final fun <get-MAX>(): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.MAX.<get-MAX>|<get-MAX>(){}[0]
            final fun <set-MAX>(kotlinx.datetime.internal.JSJoda/ZoneOffset) // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.MAX.<set-MAX>|<set-MAX>(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final var MAX_SECONDS // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.MAX_SECONDS|{}MAX_SECONDS[0]
            final fun <get-MAX_SECONDS>(): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.MAX_SECONDS.<get-MAX_SECONDS>|<get-MAX_SECONDS>(){}[0]
            final fun <set-MAX_SECONDS>(kotlinx.datetime.internal.JSJoda/ZoneOffset) // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.MAX_SECONDS.<set-MAX_SECONDS>|<set-MAX_SECONDS>(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final var MIN // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.MIN|{}MIN[0]
            final fun <get-MIN>(): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.MIN.<get-MIN>|<get-MIN>(){}[0]
            final fun <set-MIN>(kotlinx.datetime.internal.JSJoda/ZoneOffset) // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.MIN.<set-MIN>|<set-MIN>(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final var UTC // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.UTC|{}UTC[0]
            final fun <get-UTC>(): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.UTC.<get-UTC>|<get-UTC>(){}[0]
            final fun <set-UTC>(kotlinx.datetime.internal.JSJoda/ZoneOffset) // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.UTC.<set-UTC>|<set-UTC>(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]

        final fun of(kotlin/String): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.of|of(kotlin.String){}[0]
        final fun ofHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.ofHours|ofHours(kotlin.Int){}[0]
        final fun ofHoursMinutes(kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.ofHoursMinutes|ofHoursMinutes(kotlin.Int;kotlin.Int){}[0]
        final fun ofHoursMinutesSeconds(kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.ofHoursMinutesSeconds|ofHoursMinutesSeconds(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun ofTotalMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.ofTotalMinutes|ofTotalMinutes(kotlin.Int){}[0]
        final fun ofTotalSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffset.Companion.ofTotalSeconds|ofTotalSeconds(kotlin.Int){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneOffset.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneOffset.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/ZoneRegion : kotlinx.datetime.internal.JSJoda/ZoneId { // kotlinx.datetime.internal.JSJoda/ZoneRegion|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ZoneRegion.<init>|<init>(){}[0]

    open fun id(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneRegion.id|id(){}[0]
    open fun rules(): kotlinx.datetime.internal.JSJoda/ZoneRules // kotlinx.datetime.internal.JSJoda/ZoneRegion.rules|rules(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ZoneRegion.Companion|null[0]
        final fun ofId(kotlin/String): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneRegion.Companion.ofId|ofId(kotlin.String){}[0]
    }
}

// Targets: [js, wasmJs]
open class kotlinx.datetime.internal.JSJoda/ZonedDateTime : kotlinx.datetime.internal.JSJoda/ChronoZonedDateTime { // kotlinx.datetime.internal.JSJoda/ZonedDateTime|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ZonedDateTime.<init>|<init>(){}[0]

    open fun dayOfMonth(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZonedDateTime.dayOfMonth|dayOfMonth(){}[0]
    open fun dayOfWeek(): kotlinx.datetime.internal.JSJoda/DayOfWeek // kotlinx.datetime.internal.JSJoda/ZonedDateTime.dayOfWeek|dayOfWeek(){}[0]
    open fun dayOfYear(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZonedDateTime.dayOfYear|dayOfYear(){}[0]
    open fun format(kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlin/String // kotlinx.datetime.internal.JSJoda/ZonedDateTime.format|format(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZonedDateTime.hashCode|hashCode(){}[0]
    open fun hour(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZonedDateTime.hour|hour(){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZonedDateTime.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZonedDateTime.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.minus|minus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun minus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.minus|minus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun minusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.minusDays|minusDays(kotlin.Int){}[0]
    open fun minusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.minusHours|minusHours(kotlin.Int){}[0]
    open fun minusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.minusMinutes|minusMinutes(kotlin.Int){}[0]
    open fun minusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.minusMonths|minusMonths(kotlin.Int){}[0]
    open fun minusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.minusNanos|minusNanos(kotlin.Double){}[0]
    open fun minusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.minusSeconds|minusSeconds(kotlin.Int){}[0]
    open fun minusWeeks(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.minusWeeks|minusWeeks(kotlin.Int){}[0]
    open fun minusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.minusYears|minusYears(kotlin.Int){}[0]
    open fun minute(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZonedDateTime.minute|minute(){}[0]
    open fun month(): kotlinx.datetime.internal.JSJoda/Month // kotlinx.datetime.internal.JSJoda/ZonedDateTime.month|month(){}[0]
    open fun monthValue(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZonedDateTime.monthValue|monthValue(){}[0]
    open fun nano(): kotlin/Double // kotlinx.datetime.internal.JSJoda/ZonedDateTime.nano|nano(){}[0]
    open fun offset(): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZonedDateTime.offset|offset(){}[0]
    open fun plus(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plus|plus(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun plus(kotlinx.datetime.internal.JSJoda/TemporalAmount): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plus|plus(kotlinx.datetime.internal.JSJoda.TemporalAmount){}[0]
    open fun plusDays(kotlin/Double): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plusDays|plusDays(kotlin.Double){}[0]
    open fun plusDays(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plusDays|plusDays(kotlin.Int){}[0]
    open fun plusHours(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plusHours|plusHours(kotlin.Int){}[0]
    open fun plusMinutes(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plusMinutes|plusMinutes(kotlin.Int){}[0]
    open fun plusMonths(kotlin/Double): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plusMonths|plusMonths(kotlin.Double){}[0]
    open fun plusMonths(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plusMonths|plusMonths(kotlin.Int){}[0]
    open fun plusNanos(kotlin/Double): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plusNanos|plusNanos(kotlin.Double){}[0]
    open fun plusSeconds(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plusSeconds|plusSeconds(kotlin.Int){}[0]
    open fun plusWeeks(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plusWeeks|plusWeeks(kotlin.Int){}[0]
    open fun plusYears(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.plusYears|plusYears(kotlin.Int){}[0]
    open fun range(kotlinx.datetime.internal.JSJoda/TemporalField): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/ZonedDateTime.range|range(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun second(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZonedDateTime.second|second(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZonedDateTime.toJSON|toJSON(){}[0]
    open fun toLocalDate(): kotlinx.datetime.internal.JSJoda/LocalDate // kotlinx.datetime.internal.JSJoda/ZonedDateTime.toLocalDate|toLocalDate(){}[0]
    open fun toLocalDateTime(): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.toLocalDateTime|toLocalDateTime(){}[0]
    open fun toLocalTime(): kotlinx.datetime.internal.JSJoda/LocalTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.toLocalTime|toLocalTime(){}[0]
    open fun toOffsetDateTime(): kotlinx.datetime.internal.JSJoda/OffsetDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.toOffsetDateTime|toOffsetDateTime(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZonedDateTime.toString|toString(){}[0]
    open fun truncatedTo(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.truncatedTo|truncatedTo(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun until(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Double // kotlinx.datetime.internal.JSJoda/ZonedDateTime.until|until(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalAdjuster): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.with|with(kotlinx.datetime.internal.JSJoda.TemporalAdjuster){}[0]
    open fun with(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.with|with(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int){}[0]
    open fun withDayOfMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withDayOfMonth|withDayOfMonth(kotlin.Int){}[0]
    open fun withDayOfYear(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withDayOfYear|withDayOfYear(kotlin.Int){}[0]
    open fun withEarlierOffsetAtOverlap(): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withEarlierOffsetAtOverlap|withEarlierOffsetAtOverlap(){}[0]
    open fun withFixedOffsetZone(): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withFixedOffsetZone|withFixedOffsetZone(){}[0]
    open fun withHour(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withHour|withHour(kotlin.Int){}[0]
    open fun withLaterOffsetAtOverlap(): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withLaterOffsetAtOverlap|withLaterOffsetAtOverlap(){}[0]
    open fun withMinute(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withMinute|withMinute(kotlin.Int){}[0]
    open fun withMonth(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withMonth|withMonth(kotlin.Int){}[0]
    open fun withNano(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withNano|withNano(kotlin.Int){}[0]
    open fun withSecond(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withSecond|withSecond(kotlin.Int){}[0]
    open fun withYear(kotlin/Int): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withYear|withYear(kotlin.Int){}[0]
    open fun withZoneSameInstant(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withZoneSameInstant|withZoneSameInstant(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
    open fun withZoneSameLocal(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.withZoneSameLocal|withZoneSameLocal(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
    open fun year(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZonedDateTime.year|year(){}[0]
    open fun zone(): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZonedDateTime.zone|zone(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion|null[0]
        final var FROM // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.FROM|{}FROM[0]
            final fun <get-FROM>(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/ZonedDateTime> // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.FROM.<get-FROM>|<get-FROM>(){}[0]
            final fun <set-FROM>(kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/ZonedDateTime>) // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.FROM.<set-FROM>|<set-FROM>(kotlinx.datetime.internal.JSJoda.TemporalQuery<kotlinx.datetime.internal.JSJoda.ZonedDateTime>){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/Clock): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.now|now(kotlinx.datetime.internal.JSJoda.Clock){}[0]
        final fun now(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.now|now(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun of(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.of|of(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun of(kotlinx.datetime.internal.JSJoda/LocalDate, kotlinx.datetime.internal.JSJoda/LocalTime, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.of|of(kotlinx.datetime.internal.JSJoda.LocalDate;kotlinx.datetime.internal.JSJoda.LocalTime;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun of(kotlinx.datetime.internal.JSJoda/LocalDateTime, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.of|of(kotlinx.datetime.internal.JSJoda.LocalDateTime;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun ofInstant(kotlinx.datetime.internal.JSJoda/Instant, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.ofInstant|ofInstant(kotlinx.datetime.internal.JSJoda.Instant;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun ofInstant(kotlinx.datetime.internal.JSJoda/LocalDateTime, kotlinx.datetime.internal.JSJoda/ZoneOffset, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.ofInstant|ofInstant(kotlinx.datetime.internal.JSJoda.LocalDateTime;kotlinx.datetime.internal.JSJoda.ZoneOffset;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun ofLocal(kotlinx.datetime.internal.JSJoda/LocalDateTime, kotlinx.datetime.internal.JSJoda/ZoneId, kotlinx.datetime.internal.JSJoda/ZoneOffset?): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.ofLocal|ofLocal(kotlinx.datetime.internal.JSJoda.LocalDateTime;kotlinx.datetime.internal.JSJoda.ZoneId;kotlinx.datetime.internal.JSJoda.ZoneOffset?){}[0]
        final fun ofStrict(kotlinx.datetime.internal.JSJoda/LocalDateTime, kotlinx.datetime.internal.JSJoda/ZoneOffset, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.ofStrict|ofStrict(kotlinx.datetime.internal.JSJoda.LocalDateTime;kotlinx.datetime.internal.JSJoda.ZoneOffset;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun parse(kotlin/String): kotlinx.datetime.internal.JSJoda/ZonedDateTime // kotlinx.datetime.internal.JSJoda/ZonedDateTime.Companion.parse|parse(kotlin.String){}[0]
    }

    // Targets: [js]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZonedDateTime.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]

    // Targets: [wasmJs]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZonedDateTime.equals|equals(kotlin.js.JsAny){}[0]
}

// Targets: [js]
abstract interface kotlinx.datetime.internal.JSJoda/Locale : kotlinx.datetime.internal/InteropInterface // kotlinx.datetime.internal.JSJoda/Locale|null[0]

// Targets: [js]
abstract interface kotlinx.datetime.internal.JSJoda/T$0 : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/T$0|null[0]
    abstract var toDate // kotlinx.datetime.internal.JSJoda/T$0.toDate|{}toDate[0]
        abstract fun <get-toDate>(): kotlin/Function0<kotlin.js/Date> // kotlinx.datetime.internal.JSJoda/T$0.toDate.<get-toDate>|<get-toDate>(){}[0]
        abstract fun <set-toDate>(kotlin/Function0<kotlin.js/Date>) // kotlinx.datetime.internal.JSJoda/T$0.toDate.<set-toDate>|<set-toDate>(kotlin.Function0<kotlin.js.Date>){}[0]
    abstract var toEpochMilli // kotlinx.datetime.internal.JSJoda/T$0.toEpochMilli|{}toEpochMilli[0]
        abstract fun <get-toEpochMilli>(): kotlin/Function0<kotlin/Double> // kotlinx.datetime.internal.JSJoda/T$0.toEpochMilli.<get-toEpochMilli>|<get-toEpochMilli>(){}[0]
        abstract fun <set-toEpochMilli>(kotlin/Function0<kotlin/Double>) // kotlinx.datetime.internal.JSJoda/T$0.toEpochMilli.<set-toEpochMilli>|<set-toEpochMilli>(kotlin.Function0<kotlin.Double>){}[0]
}

// Targets: [js]
abstract interface kotlinx.datetime.internal.JSJoda/ZoneOffsetTransitionRule : kotlinx.datetime.internal/InteropInterface // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransitionRule|null[0]

// Targets: [js]
abstract interface kotlinx.datetime.internal/InteropInterface // kotlinx.datetime.internal/InteropInterface|null[0]

// Targets: [js]
open class <#A: kotlinx.datetime.internal/InteropInterface> kotlinx.datetime.internal.JSJoda/TemporalQuery : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/TemporalQuery|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalQuery.<init>|<init>(){}[0]

    open fun queryFrom(kotlinx.datetime.internal.JSJoda/TemporalAccessor): #A // kotlinx.datetime.internal.JSJoda/TemporalQuery.queryFrom|queryFrom(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/Clock : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/Clock|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/Clock.<init>|<init>(){}[0]

    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Clock.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]
    open fun instant(): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Clock.instant|instant(){}[0]
    open fun millis(): kotlin/Double // kotlinx.datetime.internal.JSJoda/Clock.millis|millis(){}[0]
    open fun withZone(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.withZone|withZone(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
    open fun zone(): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/Clock.zone|zone(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/Clock.Companion|null[0]
        final fun fixed(kotlinx.datetime.internal.JSJoda/Instant, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.Companion.fixed|fixed(kotlinx.datetime.internal.JSJoda.Instant;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun offset(kotlinx.datetime.internal.JSJoda/Clock, kotlinx.datetime.internal.JSJoda/Duration): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.Companion.offset|offset(kotlinx.datetime.internal.JSJoda.Clock;kotlinx.datetime.internal.JSJoda.Duration){}[0]
        final fun system(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.Companion.system|system(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun systemDefaultZone(): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.Companion.systemDefaultZone|systemDefaultZone(){}[0]
        final fun systemUTC(): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.Companion.systemUTC|systemUTC(){}[0]
    }
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/DateTimeFormatter : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/DateTimeFormatter|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal/InteropInterface> parse(kotlin/String, kotlinx.datetime.internal.JSJoda/TemporalQuery<#A1>): #A1 // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.parse|parse(kotlin.String;kotlinx.datetime.internal.JSJoda.TemporalQuery<0:0>){0ยง<kotlinx.datetime.internal.InteropInterface>}[0]
    open fun chronology(): kotlinx.datetime.internal.JSJoda/IsoChronology? // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.chronology|chronology(){}[0]
    open fun decimalStyle(): kotlinx.datetime.internal.JSJoda/DecimalStyle // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.decimalStyle|decimalStyle(){}[0]
    open fun format(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlin/String // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.format|format(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun locale(): kotlinx.datetime.internal/InteropInterface // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.locale|locale(){}[0]
    open fun parse(kotlin/String): kotlinx.datetime.internal.JSJoda/TemporalAccessor // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.parse|parse(kotlin.String){}[0]
    open fun parseUnresolved(kotlin/String, kotlinx.datetime.internal.JSJoda/ParsePosition): kotlinx.datetime.internal.JSJoda/TemporalAccessor // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.parseUnresolved|parseUnresolved(kotlin.String;kotlinx.datetime.internal.JSJoda.ParsePosition){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.toString|toString(){}[0]
    open fun withChronology(kotlinx.datetime.internal.JSJoda/IsoChronology): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.withChronology|withChronology(kotlinx.datetime.internal.JSJoda.IsoChronology){}[0]
    open fun withLocale(kotlinx.datetime.internal.JSJoda/Locale): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.withLocale|withLocale(kotlinx.datetime.internal.JSJoda.Locale){}[0]
    open fun withResolverStyle(kotlinx.datetime.internal.JSJoda/ResolverStyle): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.withResolverStyle|withResolverStyle(kotlinx.datetime.internal.JSJoda.ResolverStyle){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion|null[0]
        final var ISO_INSTANT // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_INSTANT|{}ISO_INSTANT[0]
            final fun <get-ISO_INSTANT>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_INSTANT.<get-ISO_INSTANT>|<get-ISO_INSTANT>(){}[0]
            final fun <set-ISO_INSTANT>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_INSTANT.<set-ISO_INSTANT>|<set-ISO_INSTANT>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
        final var ISO_LOCAL_DATE // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE|{}ISO_LOCAL_DATE[0]
            final fun <get-ISO_LOCAL_DATE>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE.<get-ISO_LOCAL_DATE>|<get-ISO_LOCAL_DATE>(){}[0]
            final fun <set-ISO_LOCAL_DATE>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE.<set-ISO_LOCAL_DATE>|<set-ISO_LOCAL_DATE>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
        final var ISO_LOCAL_DATE_TIME // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE_TIME|{}ISO_LOCAL_DATE_TIME[0]
            final fun <get-ISO_LOCAL_DATE_TIME>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE_TIME.<get-ISO_LOCAL_DATE_TIME>|<get-ISO_LOCAL_DATE_TIME>(){}[0]
            final fun <set-ISO_LOCAL_DATE_TIME>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE_TIME.<set-ISO_LOCAL_DATE_TIME>|<set-ISO_LOCAL_DATE_TIME>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
        final var ISO_LOCAL_TIME // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_TIME|{}ISO_LOCAL_TIME[0]
            final fun <get-ISO_LOCAL_TIME>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_TIME.<get-ISO_LOCAL_TIME>|<get-ISO_LOCAL_TIME>(){}[0]
            final fun <set-ISO_LOCAL_TIME>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_TIME.<set-ISO_LOCAL_TIME>|<set-ISO_LOCAL_TIME>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
        final var ISO_OFFSET_DATE_TIME // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_OFFSET_DATE_TIME|{}ISO_OFFSET_DATE_TIME[0]
            final fun <get-ISO_OFFSET_DATE_TIME>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_OFFSET_DATE_TIME.<get-ISO_OFFSET_DATE_TIME>|<get-ISO_OFFSET_DATE_TIME>(){}[0]
            final fun <set-ISO_OFFSET_DATE_TIME>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_OFFSET_DATE_TIME.<set-ISO_OFFSET_DATE_TIME>|<set-ISO_OFFSET_DATE_TIME>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
        final var ISO_ZONED_DATE_TIME // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_ZONED_DATE_TIME|{}ISO_ZONED_DATE_TIME[0]
            final fun <get-ISO_ZONED_DATE_TIME>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_ZONED_DATE_TIME.<get-ISO_ZONED_DATE_TIME>|<get-ISO_ZONED_DATE_TIME>(){}[0]
            final fun <set-ISO_ZONED_DATE_TIME>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_ZONED_DATE_TIME.<set-ISO_ZONED_DATE_TIME>|<set-ISO_ZONED_DATE_TIME>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]

        final fun ofPattern(kotlin/String): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ofPattern|ofPattern(kotlin.String){}[0]
        final fun parsedExcessDays(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/Period> // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.parsedExcessDays|parsedExcessDays(){}[0]
    }
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.<init>|<init>(){}[0]

    open fun append(kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.append|append(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    open fun appendFraction(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int, kotlin/Int, kotlin/Boolean): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendFraction|appendFraction(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]
    open fun appendInstant(kotlin/Int): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendInstant|appendInstant(kotlin.Int){}[0]
    open fun appendLiteral(kotlinx.datetime.internal/InteropInterface): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendLiteral|appendLiteral(kotlinx.datetime.internal.InteropInterface){}[0]
    open fun appendOffset(kotlin/String, kotlin/String): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendOffset|appendOffset(kotlin.String;kotlin.String){}[0]
    open fun appendOffsetId(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendOffsetId|appendOffsetId(){}[0]
    open fun appendPattern(kotlin/String): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendPattern|appendPattern(kotlin.String){}[0]
    open fun appendValue(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int, kotlin/Int, kotlinx.datetime.internal.JSJoda/SignStyle): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendValue|appendValue(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int;kotlin.Int;kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
    open fun appendValueReduced(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendValueReduced|appendValueReduced(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    open fun appendValueReduced(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int, kotlin/Int, kotlinx.datetime.internal.JSJoda/ChronoLocalDate): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendValueReduced|appendValueReduced(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int;kotlin.Int;kotlinx.datetime.internal.JSJoda.ChronoLocalDate){}[0]
    open fun appendZoneId(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendZoneId|appendZoneId(){}[0]
    open fun optionalEnd(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.optionalEnd|optionalEnd(){}[0]
    open fun optionalStart(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.optionalStart|optionalStart(){}[0]
    open fun padNext(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.padNext|padNext(){}[0]
    open fun parseCaseInsensitive(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.parseCaseInsensitive|parseCaseInsensitive(){}[0]
    open fun parseCaseSensitive(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.parseCaseSensitive|parseCaseSensitive(){}[0]
    open fun parseLenient(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.parseLenient|parseLenient(){}[0]
    open fun parseStrict(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.parseStrict|parseStrict(){}[0]
    open fun toFormatter(kotlinx.datetime.internal.JSJoda/ResolverStyle): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.toFormatter|toFormatter(kotlinx.datetime.internal.JSJoda.ResolverStyle){}[0]
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/DecimalStyle : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/DecimalStyle|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/DecimalStyle.<init>|<init>(){}[0]

    open fun decimalSeparator(): kotlin/String // kotlinx.datetime.internal.JSJoda/DecimalStyle.decimalSeparator|decimalSeparator(){}[0]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/DecimalStyle.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]
    open fun hashCode(): kotlinx.datetime.internal/InteropInterface // kotlinx.datetime.internal.JSJoda/DecimalStyle.hashCode|hashCode(){}[0]
    open fun negativeSign(): kotlin/String // kotlinx.datetime.internal.JSJoda/DecimalStyle.negativeSign|negativeSign(){}[0]
    open fun positiveSign(): kotlin/String // kotlinx.datetime.internal.JSJoda/DecimalStyle.positiveSign|positiveSign(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/DecimalStyle.toString|toString(){}[0]
    open fun zeroDigit(): kotlin/String // kotlinx.datetime.internal.JSJoda/DecimalStyle.zeroDigit|zeroDigit(){}[0]
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/IsoChronology : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/IsoChronology|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/IsoChronology.<init>|<init>(){}[0]

    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/IsoChronology.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]
    open fun resolveDate(kotlinx.datetime.internal/InteropInterface, kotlinx.datetime.internal/InteropInterface): kotlinx.datetime.internal/InteropInterface // kotlinx.datetime.internal.JSJoda/IsoChronology.resolveDate|resolveDate(kotlinx.datetime.internal.InteropInterface;kotlinx.datetime.internal.InteropInterface){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/IsoChronology.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/IsoChronology.Companion|null[0]
        final fun isLeapYear(kotlin/Int): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/IsoChronology.Companion.isLeapYear|isLeapYear(kotlin.Int){}[0]
    }
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/ParsePosition : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/ParsePosition|null[0]
    constructor <init>(kotlin/Int) // kotlinx.datetime.internal.JSJoda/ParsePosition.<init>|<init>(kotlin.Int){}[0]

    open fun getErrorIndex(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ParsePosition.getErrorIndex|getErrorIndex(){}[0]
    open fun getIndex(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ParsePosition.getIndex|getIndex(){}[0]
    open fun setErrorIndex(kotlin/Int) // kotlinx.datetime.internal.JSJoda/ParsePosition.setErrorIndex|setErrorIndex(kotlin.Int){}[0]
    open fun setIndex(kotlin/Int) // kotlinx.datetime.internal.JSJoda/ParsePosition.setIndex|setIndex(kotlin.Int){}[0]
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/ResolverStyle : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/ResolverStyle|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ResolverStyle.<init>|<init>(){}[0]

    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ResolverStyle.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/ResolverStyle.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ResolverStyle.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion|null[0]
        final var LENIENT // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.LENIENT|{}LENIENT[0]
            final fun <get-LENIENT>(): kotlinx.datetime.internal.JSJoda/ResolverStyle // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.LENIENT.<get-LENIENT>|<get-LENIENT>(){}[0]
            final fun <set-LENIENT>(kotlinx.datetime.internal.JSJoda/ResolverStyle) // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.LENIENT.<set-LENIENT>|<set-LENIENT>(kotlinx.datetime.internal.JSJoda.ResolverStyle){}[0]
        final var SMART // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.SMART|{}SMART[0]
            final fun <get-SMART>(): kotlinx.datetime.internal.JSJoda/ResolverStyle // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.SMART.<get-SMART>|<get-SMART>(){}[0]
            final fun <set-SMART>(kotlinx.datetime.internal.JSJoda/ResolverStyle) // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.SMART.<set-SMART>|<set-SMART>(kotlinx.datetime.internal.JSJoda.ResolverStyle){}[0]
        final var STRICT // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.STRICT|{}STRICT[0]
            final fun <get-STRICT>(): kotlinx.datetime.internal.JSJoda/ResolverStyle // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.STRICT.<get-STRICT>|<get-STRICT>(){}[0]
            final fun <set-STRICT>(kotlinx.datetime.internal.JSJoda/ResolverStyle) // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.STRICT.<set-STRICT>|<set-STRICT>(kotlinx.datetime.internal.JSJoda.ResolverStyle){}[0]
    }
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/SignStyle : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/SignStyle|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/SignStyle.<init>|<init>(){}[0]

    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/SignStyle.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/SignStyle.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/SignStyle.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/SignStyle.Companion|null[0]
        final var ALWAYS // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.ALWAYS|{}ALWAYS[0]
            final fun <get-ALWAYS>(): kotlinx.datetime.internal.JSJoda/SignStyle // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.ALWAYS.<get-ALWAYS>|<get-ALWAYS>(){}[0]
            final fun <set-ALWAYS>(kotlinx.datetime.internal.JSJoda/SignStyle) // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.ALWAYS.<set-ALWAYS>|<set-ALWAYS>(kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
        final var EXCEEDS_PAD // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.EXCEEDS_PAD|{}EXCEEDS_PAD[0]
            final fun <get-EXCEEDS_PAD>(): kotlinx.datetime.internal.JSJoda/SignStyle // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.EXCEEDS_PAD.<get-EXCEEDS_PAD>|<get-EXCEEDS_PAD>(){}[0]
            final fun <set-EXCEEDS_PAD>(kotlinx.datetime.internal.JSJoda/SignStyle) // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.EXCEEDS_PAD.<set-EXCEEDS_PAD>|<set-EXCEEDS_PAD>(kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
        final var NEVER // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NEVER|{}NEVER[0]
            final fun <get-NEVER>(): kotlinx.datetime.internal.JSJoda/SignStyle // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NEVER.<get-NEVER>|<get-NEVER>(){}[0]
            final fun <set-NEVER>(kotlinx.datetime.internal.JSJoda/SignStyle) // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NEVER.<set-NEVER>|<set-NEVER>(kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
        final var NORMAL // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NORMAL|{}NORMAL[0]
            final fun <get-NORMAL>(): kotlinx.datetime.internal.JSJoda/SignStyle // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NORMAL.<get-NORMAL>|<get-NORMAL>(){}[0]
            final fun <set-NORMAL>(kotlinx.datetime.internal.JSJoda/SignStyle) // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NORMAL.<set-NORMAL>|<set-NORMAL>(kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
        final var NOT_NEGATIVE // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NOT_NEGATIVE|{}NOT_NEGATIVE[0]
            final fun <get-NOT_NEGATIVE>(): kotlinx.datetime.internal.JSJoda/SignStyle // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NOT_NEGATIVE.<get-NOT_NEGATIVE>|<get-NOT_NEGATIVE>(){}[0]
            final fun <set-NOT_NEGATIVE>(kotlinx.datetime.internal.JSJoda/SignStyle) // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NOT_NEGATIVE.<set-NOT_NEGATIVE>|<set-NOT_NEGATIVE>(kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
    }
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/TemporalAccessor : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/TemporalAccessor|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalAccessor.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal/InteropInterface> query(kotlinx.datetime.internal.JSJoda/TemporalQuery<#A1>): #A1? // kotlinx.datetime.internal.JSJoda/TemporalAccessor.query|query(kotlinx.datetime.internal.JSJoda.TemporalQuery<0:0>){0ยง<kotlinx.datetime.internal.InteropInterface>}[0]
    open fun get(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Int // kotlinx.datetime.internal.JSJoda/TemporalAccessor.get|get(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalAccessor.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun range(kotlinx.datetime.internal.JSJoda/TemporalField): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/TemporalAccessor.range|range(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/TemporalAdjuster : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/TemporalAdjuster|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalAdjuster.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/TemporalAdjuster.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/TemporalAmount : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/TemporalAmount|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalAmount.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> addTo(#A1): #A1 // kotlinx.datetime.internal.JSJoda/TemporalAmount.addTo|addTo(0:0){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> subtractFrom(#A1): #A1 // kotlinx.datetime.internal.JSJoda/TemporalAmount.subtractFrom|subtractFrom(0:0){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun get(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Int // kotlinx.datetime.internal.JSJoda/TemporalAmount.get|get(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/TemporalField : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/TemporalField|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalField.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> adjustInto(#A1, kotlin/Int): #A1 // kotlinx.datetime.internal.JSJoda/TemporalField.adjustInto|adjustInto(0:0;kotlin.Int){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun baseUnit(): kotlinx.datetime.internal.JSJoda/TemporalUnit // kotlinx.datetime.internal.JSJoda/TemporalField.baseUnit|baseUnit(){}[0]
    open fun displayName(): kotlin/String // kotlinx.datetime.internal.JSJoda/TemporalField.displayName|displayName(){}[0]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalField.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]
    open fun getFrom(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlin/Int // kotlinx.datetime.internal.JSJoda/TemporalField.getFrom|getFrom(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun isDateBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalField.isDateBased|isDateBased(){}[0]
    open fun isSupportedBy(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalField.isSupportedBy|isSupportedBy(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun isTimeBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalField.isTimeBased|isTimeBased(){}[0]
    open fun name(): kotlin/String // kotlinx.datetime.internal.JSJoda/TemporalField.name|name(){}[0]
    open fun range(): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/TemporalField.range|range(){}[0]
    open fun rangeRefinedBy(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/TemporalField.rangeRefinedBy|rangeRefinedBy(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun rangeUnit(): kotlinx.datetime.internal.JSJoda/TemporalUnit // kotlinx.datetime.internal.JSJoda/TemporalField.rangeUnit|rangeUnit(){}[0]
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/TemporalUnit : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/TemporalUnit|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalUnit.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> addTo(#A1, kotlin/Int): #A1 // kotlinx.datetime.internal.JSJoda/TemporalUnit.addTo|addTo(0:0;kotlin.Int){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun between(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/Temporal): kotlin/Int // kotlinx.datetime.internal.JSJoda/TemporalUnit.between|between(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun duration(): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/TemporalUnit.duration|duration(){}[0]
    open fun isDateBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalUnit.isDateBased|isDateBased(){}[0]
    open fun isDurationEstimated(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalUnit.isDurationEstimated|isDurationEstimated(){}[0]
    open fun isSupportedBy(kotlinx.datetime.internal.JSJoda/Temporal): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalUnit.isSupportedBy|isSupportedBy(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun isTimeBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalUnit.isTimeBased|isTimeBased(){}[0]
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/TextStyle : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/TextStyle|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TextStyle.<init>|<init>(){}[0]

    open fun asNormal(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.asNormal|asNormal(){}[0]
    open fun asStandalone(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.asStandalone|asStandalone(){}[0]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TextStyle.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]
    open fun isStandalone(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TextStyle.isStandalone|isStandalone(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/TextStyle.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/TextStyle.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/TextStyle.Companion|null[0]
        final var FULL // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL|{}FULL[0]
            final fun <get-FULL>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL.<get-FULL>|<get-FULL>(){}[0]
            final fun <set-FULL>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL.<set-FULL>|<set-FULL>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
        final var FULL_STANDALONE // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL_STANDALONE|{}FULL_STANDALONE[0]
            final fun <get-FULL_STANDALONE>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL_STANDALONE.<get-FULL_STANDALONE>|<get-FULL_STANDALONE>(){}[0]
            final fun <set-FULL_STANDALONE>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL_STANDALONE.<set-FULL_STANDALONE>|<set-FULL_STANDALONE>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
        final var NARROW // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW|{}NARROW[0]
            final fun <get-NARROW>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW.<get-NARROW>|<get-NARROW>(){}[0]
            final fun <set-NARROW>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW.<set-NARROW>|<set-NARROW>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
        final var NARROW_STANDALONE // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW_STANDALONE|{}NARROW_STANDALONE[0]
            final fun <get-NARROW_STANDALONE>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW_STANDALONE.<get-NARROW_STANDALONE>|<get-NARROW_STANDALONE>(){}[0]
            final fun <set-NARROW_STANDALONE>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW_STANDALONE.<set-NARROW_STANDALONE>|<set-NARROW_STANDALONE>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
        final var SHORT // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT|{}SHORT[0]
            final fun <get-SHORT>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT.<get-SHORT>|<get-SHORT>(){}[0]
            final fun <set-SHORT>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT.<set-SHORT>|<set-SHORT>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
        final var SHORT_STANDALONE // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT_STANDALONE|{}SHORT_STANDALONE[0]
            final fun <get-SHORT_STANDALONE>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT_STANDALONE.<get-SHORT_STANDALONE>|<get-SHORT_STANDALONE>(){}[0]
            final fun <set-SHORT_STANDALONE>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT_STANDALONE.<set-SHORT_STANDALONE>|<set-SHORT_STANDALONE>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
    }
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/ValueRange : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/ValueRange|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ValueRange.<init>|<init>(){}[0]

    open fun checkValidIntValue(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.checkValidIntValue|checkValidIntValue(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun checkValidValue(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.checkValidValue|checkValidValue(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ValueRange.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.hashCode|hashCode(){}[0]
    open fun isFixed(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ValueRange.isFixed|isFixed(){}[0]
    open fun isIntValue(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ValueRange.isIntValue|isIntValue(){}[0]
    open fun isValidIntValue(kotlin/Int): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ValueRange.isValidIntValue|isValidIntValue(kotlin.Int){}[0]
    open fun isValidValue(kotlin/Int): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ValueRange.isValidValue|isValidValue(kotlin.Int){}[0]
    open fun largestMinimum(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.largestMinimum|largestMinimum(){}[0]
    open fun maximum(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.maximum|maximum(){}[0]
    open fun minimum(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.minimum|minimum(){}[0]
    open fun smallestMaximum(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.smallestMaximum|smallestMaximum(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ValueRange.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ValueRange.Companion|null[0]
        final fun of(kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/ValueRange.Companion.of|of(kotlin.Int;kotlin.Int){}[0]
        final fun of(kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/ValueRange.Companion.of|of(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun of(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/ValueRange.Companion.of|of(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    }
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/ZoneId : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/ZoneId|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ZoneId.<init>|<init>(){}[0]

    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneId.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneId.hashCode|hashCode(){}[0]
    open fun id(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneId.id|id(){}[0]
    open fun normalized(): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.normalized|normalized(){}[0]
    open fun rules(): kotlinx.datetime.internal.JSJoda/ZoneRules // kotlinx.datetime.internal.JSJoda/ZoneId.rules|rules(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneId.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneId.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ZoneId.Companion|null[0]
        final var SYSTEM // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.SYSTEM|{}SYSTEM[0]
            final fun <get-SYSTEM>(): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.SYSTEM.<get-SYSTEM>|<get-SYSTEM>(){}[0]
            final fun <set-SYSTEM>(kotlinx.datetime.internal.JSJoda/ZoneId) // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.SYSTEM.<set-SYSTEM>|<set-SYSTEM>(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final var UTC // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.UTC|{}UTC[0]
            final fun <get-UTC>(): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.UTC.<get-UTC>|<get-UTC>(){}[0]
            final fun <set-UTC>(kotlinx.datetime.internal.JSJoda/ZoneId) // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.UTC.<set-UTC>|<set-UTC>(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun getAvailableZoneIds(): kotlinx.datetime.internal/InteropInterface // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.getAvailableZoneIds|getAvailableZoneIds(){}[0]
        final fun of(kotlin/String): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.of|of(kotlin.String){}[0]
        final fun ofOffset(kotlin/String, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.ofOffset|ofOffset(kotlin.String;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final fun systemDefault(): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.systemDefault|systemDefault(){}[0]
    }
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.<init>|<init>(){}[0]

    open fun compareTo(kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.ZoneOffsetTransition){}[0]
    open fun dateTimeAfter(): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.dateTimeAfter|dateTimeAfter(){}[0]
    open fun dateTimeBefore(): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.dateTimeBefore|dateTimeBefore(){}[0]
    open fun duration(): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.duration|duration(){}[0]
    open fun durationSeconds(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.durationSeconds|durationSeconds(){}[0]
    open fun equals(kotlinx.datetime.internal/InteropInterface): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.equals|equals(kotlinx.datetime.internal.InteropInterface){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.hashCode|hashCode(){}[0]
    open fun instant(): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.instant|instant(){}[0]
    open fun isGap(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.isGap|isGap(){}[0]
    open fun isOverlap(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.isOverlap|isOverlap(){}[0]
    open fun isValidOffset(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.isValidOffset|isValidOffset(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    open fun offsetAfter(): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.offsetAfter|offsetAfter(){}[0]
    open fun offsetBefore(): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.offsetBefore|offsetBefore(){}[0]
    open fun toEpochSecond(): kotlin/Double // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.toEpochSecond|toEpochSecond(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.Companion|null[0]
        final fun of(kotlinx.datetime.internal.JSJoda/LocalDateTime, kotlinx.datetime.internal.JSJoda/ZoneOffset, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.Companion.of|of(kotlinx.datetime.internal.JSJoda.LocalDateTime;kotlinx.datetime.internal.JSJoda.ZoneOffset;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    }
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/ZoneRules : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/ZoneRules|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ZoneRules.<init>|<init>(){}[0]

    open fun daylightSavings(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/ZoneRules.daylightSavings|daylightSavings(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun isDaylightSavings(kotlinx.datetime.internal.JSJoda/Instant): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneRules.isDaylightSavings|isDaylightSavings(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun isFixedOffset(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneRules.isFixedOffset|isFixedOffset(){}[0]
    open fun isValidOffset(kotlinx.datetime.internal.JSJoda/LocalDateTime, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneRules.isValidOffset|isValidOffset(kotlinx.datetime.internal.JSJoda.LocalDateTime;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    open fun nextTransition(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition // kotlinx.datetime.internal.JSJoda/ZoneRules.nextTransition|nextTransition(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun offset(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.offset|offset(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun offset(kotlinx.datetime.internal.JSJoda/LocalDateTime): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.offset|offset(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]
    open fun offsetOfEpochMilli(kotlin/Double): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.offsetOfEpochMilli|offsetOfEpochMilli(kotlin.Double){}[0]
    open fun offsetOfInstant(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.offsetOfInstant|offsetOfInstant(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun offsetOfLocalDateTime(kotlinx.datetime.internal.JSJoda/LocalDateTime): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.offsetOfLocalDateTime|offsetOfLocalDateTime(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]
    open fun previousTransition(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition // kotlinx.datetime.internal.JSJoda/ZoneRules.previousTransition|previousTransition(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun standardOffset(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.standardOffset|standardOffset(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneRules.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneRules.toString|toString(){}[0]
    open fun transition(kotlinx.datetime.internal.JSJoda/LocalDateTime): kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition // kotlinx.datetime.internal.JSJoda/ZoneRules.transition|transition(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ZoneRules.Companion|null[0]
        final fun of(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/ZoneRules // kotlinx.datetime.internal.JSJoda/ZoneRules.Companion.of|of(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    }
}

// Targets: [js]
open class kotlinx.datetime.internal.JSJoda/ZoneRulesProvider : kotlinx.datetime.internal/InteropInterface { // kotlinx.datetime.internal.JSJoda/ZoneRulesProvider|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ZoneRulesProvider.<init>|<init>(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ZoneRulesProvider.Companion|null[0]
        final fun getRules(kotlin/String): kotlinx.datetime.internal.JSJoda/ZoneRules // kotlinx.datetime.internal.JSJoda/ZoneRulesProvider.Companion.getRules|getRules(kotlin.String){}[0]
    }
}

// Targets: [js]
final fun (kotlin.js/Date).kotlinx.datetime/toKotlinInstant(): kotlinx.datetime/Instant // kotlinx.datetime/toKotlinInstant|toKotlinInstant@kotlin.js.Date(){}[0]

// Targets: [js]
final fun (kotlinx.datetime/Instant).kotlinx.datetime/toJSDate(): kotlin.js/Date // kotlinx.datetime/toJSDate|toJSDate@kotlinx.datetime.Instant(){}[0]

// Targets: [js]
final fun kotlinx.datetime.internal.JSJoda/convert(kotlinx.datetime.internal.JSJoda/LocalDate): kotlinx.datetime.internal.JSJoda/T$0 // kotlinx.datetime.internal.JSJoda/convert|convert(kotlinx.datetime.internal.JSJoda.LocalDate){}[0]

// Targets: [js]
final fun kotlinx.datetime.internal.JSJoda/convert(kotlinx.datetime.internal.JSJoda/LocalDate, kotlinx.datetime.internal.JSJoda/ZoneId =...): kotlinx.datetime.internal.JSJoda/T$0 // kotlinx.datetime.internal.JSJoda/convert|convert(kotlinx.datetime.internal.JSJoda.LocalDate;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]

// Targets: [js]
final fun kotlinx.datetime.internal.JSJoda/convert(kotlinx.datetime.internal.JSJoda/LocalDateTime): kotlinx.datetime.internal.JSJoda/T$0 // kotlinx.datetime.internal.JSJoda/convert|convert(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]

// Targets: [js]
final fun kotlinx.datetime.internal.JSJoda/convert(kotlinx.datetime.internal.JSJoda/LocalDateTime, kotlinx.datetime.internal.JSJoda/ZoneId =...): kotlinx.datetime.internal.JSJoda/T$0 // kotlinx.datetime.internal.JSJoda/convert|convert(kotlinx.datetime.internal.JSJoda.LocalDateTime;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]

// Targets: [js]
final fun kotlinx.datetime.internal.JSJoda/convert(kotlinx.datetime.internal.JSJoda/ZonedDateTime): kotlinx.datetime.internal.JSJoda/T$0 // kotlinx.datetime.internal.JSJoda/convert|convert(kotlinx.datetime.internal.JSJoda.ZonedDateTime){}[0]

// Targets: [js]
final fun kotlinx.datetime.internal.JSJoda/convert(kotlinx.datetime.internal.JSJoda/ZonedDateTime, kotlinx.datetime.internal.JSJoda/ZoneId =...): kotlinx.datetime.internal.JSJoda/T$0 // kotlinx.datetime.internal.JSJoda/convert|convert(kotlinx.datetime.internal.JSJoda.ZonedDateTime;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]

// Targets: [js]
final fun kotlinx.datetime.internal.JSJoda/nativeJs(kotlin.js/Date): kotlinx.datetime.internal.JSJoda/TemporalAccessor // kotlinx.datetime.internal.JSJoda/nativeJs|nativeJs(kotlin.js.Date){}[0]

// Targets: [js]
final fun kotlinx.datetime.internal.JSJoda/nativeJs(kotlin.js/Date, kotlinx.datetime.internal.JSJoda/ZoneId =...): kotlinx.datetime.internal.JSJoda/TemporalAccessor // kotlinx.datetime.internal.JSJoda/nativeJs|nativeJs(kotlin.js.Date;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]

// Targets: [js]
final fun kotlinx.datetime.internal.JSJoda/nativeJs(kotlinx.datetime.internal/InteropInterface): kotlinx.datetime.internal.JSJoda/TemporalAccessor // kotlinx.datetime.internal.JSJoda/nativeJs|nativeJs(kotlinx.datetime.internal.InteropInterface){}[0]

// Targets: [js]
final fun kotlinx.datetime.internal.JSJoda/nativeJs(kotlinx.datetime.internal/InteropInterface, kotlinx.datetime.internal.JSJoda/ZoneId =...): kotlinx.datetime.internal.JSJoda/TemporalAccessor // kotlinx.datetime.internal.JSJoda/nativeJs|nativeJs(kotlinx.datetime.internal.InteropInterface;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]

// Targets: [js]
final fun kotlinx.datetime.internal.JSJoda/use(kotlin/Function0<kotlinx.datetime.internal/InteropInterface>): kotlinx.datetime.internal/InteropInterface // kotlinx.datetime.internal.JSJoda/use|use(kotlin.Function0<kotlinx.datetime.internal.InteropInterface>){}[0]

// Targets: [wasmJs]
open annotation class kotlinx.datetime.internal/JsNonModule : kotlin/Annotation { // kotlinx.datetime.internal/JsNonModule|null[1]
    constructor <init>() // kotlinx.datetime.internal/JsNonModule.<init>|<init>(){}[1]
}

// Targets: [wasmJs]
abstract interface kotlinx.datetime.internal.JSJoda/Locale : kotlin.js/JsAny // kotlinx.datetime.internal.JSJoda/Locale|null[0]

// Targets: [wasmJs]
abstract interface kotlinx.datetime.internal.JSJoda/ZoneOffsetTransitionRule : kotlin.js/JsAny // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransitionRule|null[0]

// Targets: [wasmJs]
open class <#A: kotlin.js/JsAny> kotlinx.datetime.internal.JSJoda/TemporalQuery : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/TemporalQuery|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalQuery.<init>|<init>(){}[0]

    open fun queryFrom(kotlinx.datetime.internal.JSJoda/TemporalAccessor): #A // kotlinx.datetime.internal.JSJoda/TemporalQuery.queryFrom|queryFrom(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/Clock : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/Clock|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/Clock.<init>|<init>(){}[0]

    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/Clock.equals|equals(kotlin.js.JsAny){}[0]
    open fun instant(): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/Clock.instant|instant(){}[0]
    open fun millis(): kotlin/Double // kotlinx.datetime.internal.JSJoda/Clock.millis|millis(){}[0]
    open fun withZone(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.withZone|withZone(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
    open fun zone(): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/Clock.zone|zone(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/Clock.Companion|null[0]
        final fun fixed(kotlinx.datetime.internal.JSJoda/Instant, kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.Companion.fixed|fixed(kotlinx.datetime.internal.JSJoda.Instant;kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun offset(kotlinx.datetime.internal.JSJoda/Clock, kotlinx.datetime.internal.JSJoda/Duration): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.Companion.offset|offset(kotlinx.datetime.internal.JSJoda.Clock;kotlinx.datetime.internal.JSJoda.Duration){}[0]
        final fun system(kotlinx.datetime.internal.JSJoda/ZoneId): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.Companion.system|system(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final fun systemDefaultZone(): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.Companion.systemDefaultZone|systemDefaultZone(){}[0]
        final fun systemUTC(): kotlinx.datetime.internal.JSJoda/Clock // kotlinx.datetime.internal.JSJoda/Clock.Companion.systemUTC|systemUTC(){}[0]
    }
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/DateTimeFormatter : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/DateTimeFormatter|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.<init>|<init>(){}[0]

    open fun <#A1: kotlin.js/JsAny> parse(kotlin/String, kotlinx.datetime.internal.JSJoda/TemporalQuery<#A1>): #A1 // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.parse|parse(kotlin.String;kotlinx.datetime.internal.JSJoda.TemporalQuery<0:0>){0ยง<kotlin.js.JsAny>}[0]
    open fun chronology(): kotlinx.datetime.internal.JSJoda/IsoChronology? // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.chronology|chronology(){}[0]
    open fun decimalStyle(): kotlinx.datetime.internal.JSJoda/DecimalStyle // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.decimalStyle|decimalStyle(){}[0]
    open fun format(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlin/String // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.format|format(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun locale(): kotlin.js/JsAny // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.locale|locale(){}[0]
    open fun parse(kotlin/String): kotlinx.datetime.internal.JSJoda/TemporalAccessor // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.parse|parse(kotlin.String){}[0]
    open fun parseUnresolved(kotlin/String, kotlinx.datetime.internal.JSJoda/ParsePosition): kotlinx.datetime.internal.JSJoda/TemporalAccessor // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.parseUnresolved|parseUnresolved(kotlin.String;kotlinx.datetime.internal.JSJoda.ParsePosition){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.toString|toString(){}[0]
    open fun withChronology(kotlinx.datetime.internal.JSJoda/IsoChronology): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.withChronology|withChronology(kotlinx.datetime.internal.JSJoda.IsoChronology){}[0]
    open fun withLocale(kotlinx.datetime.internal.JSJoda/Locale): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.withLocale|withLocale(kotlinx.datetime.internal.JSJoda.Locale){}[0]
    open fun withResolverStyle(kotlinx.datetime.internal.JSJoda/ResolverStyle): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.withResolverStyle|withResolverStyle(kotlinx.datetime.internal.JSJoda.ResolverStyle){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion|null[0]
        final var ISO_INSTANT // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_INSTANT|{}ISO_INSTANT[0]
            final fun <get-ISO_INSTANT>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_INSTANT.<get-ISO_INSTANT>|<get-ISO_INSTANT>(){}[0]
            final fun <set-ISO_INSTANT>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_INSTANT.<set-ISO_INSTANT>|<set-ISO_INSTANT>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
        final var ISO_LOCAL_DATE // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE|{}ISO_LOCAL_DATE[0]
            final fun <get-ISO_LOCAL_DATE>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE.<get-ISO_LOCAL_DATE>|<get-ISO_LOCAL_DATE>(){}[0]
            final fun <set-ISO_LOCAL_DATE>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE.<set-ISO_LOCAL_DATE>|<set-ISO_LOCAL_DATE>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
        final var ISO_LOCAL_DATE_TIME // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE_TIME|{}ISO_LOCAL_DATE_TIME[0]
            final fun <get-ISO_LOCAL_DATE_TIME>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE_TIME.<get-ISO_LOCAL_DATE_TIME>|<get-ISO_LOCAL_DATE_TIME>(){}[0]
            final fun <set-ISO_LOCAL_DATE_TIME>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_DATE_TIME.<set-ISO_LOCAL_DATE_TIME>|<set-ISO_LOCAL_DATE_TIME>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
        final var ISO_LOCAL_TIME // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_TIME|{}ISO_LOCAL_TIME[0]
            final fun <get-ISO_LOCAL_TIME>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_TIME.<get-ISO_LOCAL_TIME>|<get-ISO_LOCAL_TIME>(){}[0]
            final fun <set-ISO_LOCAL_TIME>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_LOCAL_TIME.<set-ISO_LOCAL_TIME>|<set-ISO_LOCAL_TIME>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
        final var ISO_OFFSET_DATE_TIME // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_OFFSET_DATE_TIME|{}ISO_OFFSET_DATE_TIME[0]
            final fun <get-ISO_OFFSET_DATE_TIME>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_OFFSET_DATE_TIME.<get-ISO_OFFSET_DATE_TIME>|<get-ISO_OFFSET_DATE_TIME>(){}[0]
            final fun <set-ISO_OFFSET_DATE_TIME>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_OFFSET_DATE_TIME.<set-ISO_OFFSET_DATE_TIME>|<set-ISO_OFFSET_DATE_TIME>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
        final var ISO_ZONED_DATE_TIME // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_ZONED_DATE_TIME|{}ISO_ZONED_DATE_TIME[0]
            final fun <get-ISO_ZONED_DATE_TIME>(): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_ZONED_DATE_TIME.<get-ISO_ZONED_DATE_TIME>|<get-ISO_ZONED_DATE_TIME>(){}[0]
            final fun <set-ISO_ZONED_DATE_TIME>(kotlinx.datetime.internal.JSJoda/DateTimeFormatter) // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ISO_ZONED_DATE_TIME.<set-ISO_ZONED_DATE_TIME>|<set-ISO_ZONED_DATE_TIME>(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]

        final fun ofPattern(kotlin/String): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.ofPattern|ofPattern(kotlin.String){}[0]
        final fun parsedExcessDays(): kotlinx.datetime.internal.JSJoda/TemporalQuery<kotlinx.datetime.internal.JSJoda/Period> // kotlinx.datetime.internal.JSJoda/DateTimeFormatter.Companion.parsedExcessDays|parsedExcessDays(){}[0]
    }
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.<init>|<init>(){}[0]

    open fun append(kotlinx.datetime.internal.JSJoda/DateTimeFormatter): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.append|append(kotlinx.datetime.internal.JSJoda.DateTimeFormatter){}[0]
    open fun appendFraction(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int, kotlin/Int, kotlin/Boolean): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendFraction|appendFraction(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]
    open fun appendInstant(kotlin/Int): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendInstant|appendInstant(kotlin.Int){}[0]
    open fun appendLiteral(kotlin.js/JsAny): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendLiteral|appendLiteral(kotlin.js.JsAny){}[0]
    open fun appendOffset(kotlin/String, kotlin/String): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendOffset|appendOffset(kotlin.String;kotlin.String){}[0]
    open fun appendOffsetId(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendOffsetId|appendOffsetId(){}[0]
    open fun appendPattern(kotlin/String): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendPattern|appendPattern(kotlin.String){}[0]
    open fun appendValue(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int, kotlin/Int, kotlinx.datetime.internal.JSJoda/SignStyle): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendValue|appendValue(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int;kotlin.Int;kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
    open fun appendValueReduced(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendValueReduced|appendValueReduced(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    open fun appendValueReduced(kotlinx.datetime.internal.JSJoda/TemporalField, kotlin/Int, kotlin/Int, kotlinx.datetime.internal.JSJoda/ChronoLocalDate): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendValueReduced|appendValueReduced(kotlinx.datetime.internal.JSJoda.TemporalField;kotlin.Int;kotlin.Int;kotlinx.datetime.internal.JSJoda.ChronoLocalDate){}[0]
    open fun appendZoneId(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.appendZoneId|appendZoneId(){}[0]
    open fun optionalEnd(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.optionalEnd|optionalEnd(){}[0]
    open fun optionalStart(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.optionalStart|optionalStart(){}[0]
    open fun padNext(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.padNext|padNext(){}[0]
    open fun parseCaseInsensitive(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.parseCaseInsensitive|parseCaseInsensitive(){}[0]
    open fun parseCaseSensitive(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.parseCaseSensitive|parseCaseSensitive(){}[0]
    open fun parseLenient(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.parseLenient|parseLenient(){}[0]
    open fun parseStrict(): kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.parseStrict|parseStrict(){}[0]
    open fun toFormatter(kotlinx.datetime.internal.JSJoda/ResolverStyle): kotlinx.datetime.internal.JSJoda/DateTimeFormatter // kotlinx.datetime.internal.JSJoda/DateTimeFormatterBuilder.toFormatter|toFormatter(kotlinx.datetime.internal.JSJoda.ResolverStyle){}[0]
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/DecimalStyle : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/DecimalStyle|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/DecimalStyle.<init>|<init>(){}[0]

    open fun decimalSeparator(): kotlin/String // kotlinx.datetime.internal.JSJoda/DecimalStyle.decimalSeparator|decimalSeparator(){}[0]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/DecimalStyle.equals|equals(kotlin.js.JsAny){}[0]
    open fun hashCode(): kotlin.js/JsAny // kotlinx.datetime.internal.JSJoda/DecimalStyle.hashCode|hashCode(){}[0]
    open fun negativeSign(): kotlin/String // kotlinx.datetime.internal.JSJoda/DecimalStyle.negativeSign|negativeSign(){}[0]
    open fun positiveSign(): kotlin/String // kotlinx.datetime.internal.JSJoda/DecimalStyle.positiveSign|positiveSign(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/DecimalStyle.toString|toString(){}[0]
    open fun zeroDigit(): kotlin/String // kotlinx.datetime.internal.JSJoda/DecimalStyle.zeroDigit|zeroDigit(){}[0]
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/IsoChronology : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/IsoChronology|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/IsoChronology.<init>|<init>(){}[0]

    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/IsoChronology.equals|equals(kotlin.js.JsAny){}[0]
    open fun resolveDate(kotlin.js/JsAny, kotlin.js/JsAny): kotlin.js/JsAny // kotlinx.datetime.internal.JSJoda/IsoChronology.resolveDate|resolveDate(kotlin.js.JsAny;kotlin.js.JsAny){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/IsoChronology.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/IsoChronology.Companion|null[0]
        final fun isLeapYear(kotlin/Int): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/IsoChronology.Companion.isLeapYear|isLeapYear(kotlin.Int){}[0]
    }
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/ParsePosition : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/ParsePosition|null[0]
    constructor <init>(kotlin/Int) // kotlinx.datetime.internal.JSJoda/ParsePosition.<init>|<init>(kotlin.Int){}[0]

    open fun getErrorIndex(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ParsePosition.getErrorIndex|getErrorIndex(){}[0]
    open fun getIndex(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ParsePosition.getIndex|getIndex(){}[0]
    open fun setErrorIndex(kotlin/Int) // kotlinx.datetime.internal.JSJoda/ParsePosition.setErrorIndex|setErrorIndex(kotlin.Int){}[0]
    open fun setIndex(kotlin/Int) // kotlinx.datetime.internal.JSJoda/ParsePosition.setIndex|setIndex(kotlin.Int){}[0]
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/ResolverStyle : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/ResolverStyle|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ResolverStyle.<init>|<init>(){}[0]

    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ResolverStyle.equals|equals(kotlin.js.JsAny){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/ResolverStyle.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ResolverStyle.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion|null[0]
        final var LENIENT // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.LENIENT|{}LENIENT[0]
            final fun <get-LENIENT>(): kotlinx.datetime.internal.JSJoda/ResolverStyle // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.LENIENT.<get-LENIENT>|<get-LENIENT>(){}[0]
            final fun <set-LENIENT>(kotlinx.datetime.internal.JSJoda/ResolverStyle) // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.LENIENT.<set-LENIENT>|<set-LENIENT>(kotlinx.datetime.internal.JSJoda.ResolverStyle){}[0]
        final var SMART // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.SMART|{}SMART[0]
            final fun <get-SMART>(): kotlinx.datetime.internal.JSJoda/ResolverStyle // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.SMART.<get-SMART>|<get-SMART>(){}[0]
            final fun <set-SMART>(kotlinx.datetime.internal.JSJoda/ResolverStyle) // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.SMART.<set-SMART>|<set-SMART>(kotlinx.datetime.internal.JSJoda.ResolverStyle){}[0]
        final var STRICT // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.STRICT|{}STRICT[0]
            final fun <get-STRICT>(): kotlinx.datetime.internal.JSJoda/ResolverStyle // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.STRICT.<get-STRICT>|<get-STRICT>(){}[0]
            final fun <set-STRICT>(kotlinx.datetime.internal.JSJoda/ResolverStyle) // kotlinx.datetime.internal.JSJoda/ResolverStyle.Companion.STRICT.<set-STRICT>|<set-STRICT>(kotlinx.datetime.internal.JSJoda.ResolverStyle){}[0]
    }
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/SignStyle : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/SignStyle|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/SignStyle.<init>|<init>(){}[0]

    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/SignStyle.equals|equals(kotlin.js.JsAny){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/SignStyle.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/SignStyle.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/SignStyle.Companion|null[0]
        final var ALWAYS // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.ALWAYS|{}ALWAYS[0]
            final fun <get-ALWAYS>(): kotlinx.datetime.internal.JSJoda/SignStyle // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.ALWAYS.<get-ALWAYS>|<get-ALWAYS>(){}[0]
            final fun <set-ALWAYS>(kotlinx.datetime.internal.JSJoda/SignStyle) // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.ALWAYS.<set-ALWAYS>|<set-ALWAYS>(kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
        final var EXCEEDS_PAD // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.EXCEEDS_PAD|{}EXCEEDS_PAD[0]
            final fun <get-EXCEEDS_PAD>(): kotlinx.datetime.internal.JSJoda/SignStyle // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.EXCEEDS_PAD.<get-EXCEEDS_PAD>|<get-EXCEEDS_PAD>(){}[0]
            final fun <set-EXCEEDS_PAD>(kotlinx.datetime.internal.JSJoda/SignStyle) // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.EXCEEDS_PAD.<set-EXCEEDS_PAD>|<set-EXCEEDS_PAD>(kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
        final var NEVER // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NEVER|{}NEVER[0]
            final fun <get-NEVER>(): kotlinx.datetime.internal.JSJoda/SignStyle // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NEVER.<get-NEVER>|<get-NEVER>(){}[0]
            final fun <set-NEVER>(kotlinx.datetime.internal.JSJoda/SignStyle) // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NEVER.<set-NEVER>|<set-NEVER>(kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
        final var NORMAL // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NORMAL|{}NORMAL[0]
            final fun <get-NORMAL>(): kotlinx.datetime.internal.JSJoda/SignStyle // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NORMAL.<get-NORMAL>|<get-NORMAL>(){}[0]
            final fun <set-NORMAL>(kotlinx.datetime.internal.JSJoda/SignStyle) // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NORMAL.<set-NORMAL>|<set-NORMAL>(kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
        final var NOT_NEGATIVE // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NOT_NEGATIVE|{}NOT_NEGATIVE[0]
            final fun <get-NOT_NEGATIVE>(): kotlinx.datetime.internal.JSJoda/SignStyle // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NOT_NEGATIVE.<get-NOT_NEGATIVE>|<get-NOT_NEGATIVE>(){}[0]
            final fun <set-NOT_NEGATIVE>(kotlinx.datetime.internal.JSJoda/SignStyle) // kotlinx.datetime.internal.JSJoda/SignStyle.Companion.NOT_NEGATIVE.<set-NOT_NEGATIVE>|<set-NOT_NEGATIVE>(kotlinx.datetime.internal.JSJoda.SignStyle){}[0]
    }
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/TemporalAccessor : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/TemporalAccessor|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalAccessor.<init>|<init>(){}[0]

    open fun <#A1: kotlin.js/JsAny> query(kotlinx.datetime.internal.JSJoda/TemporalQuery<#A1>): #A1? // kotlinx.datetime.internal.JSJoda/TemporalAccessor.query|query(kotlinx.datetime.internal.JSJoda.TemporalQuery<0:0>){0ยง<kotlin.js.JsAny>}[0]
    open fun get(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Int // kotlinx.datetime.internal.JSJoda/TemporalAccessor.get|get(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun isSupported(kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalAccessor.isSupported|isSupported(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun range(kotlinx.datetime.internal.JSJoda/TemporalField): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/TemporalAccessor.range|range(kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/TemporalAdjuster : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/TemporalAdjuster|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalAdjuster.<init>|<init>(){}[0]

    open fun adjustInto(kotlinx.datetime.internal.JSJoda/Temporal): kotlinx.datetime.internal.JSJoda/Temporal // kotlinx.datetime.internal.JSJoda/TemporalAdjuster.adjustInto|adjustInto(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/TemporalAmount : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/TemporalAmount|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalAmount.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> addTo(#A1): #A1 // kotlinx.datetime.internal.JSJoda/TemporalAmount.addTo|addTo(0:0){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> subtractFrom(#A1): #A1 // kotlinx.datetime.internal.JSJoda/TemporalAmount.subtractFrom|subtractFrom(0:0){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun get(kotlinx.datetime.internal.JSJoda/TemporalUnit): kotlin/Int // kotlinx.datetime.internal.JSJoda/TemporalAmount.get|get(kotlinx.datetime.internal.JSJoda.TemporalUnit){}[0]
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/TemporalField : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/TemporalField|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalField.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> adjustInto(#A1, kotlin/Int): #A1 // kotlinx.datetime.internal.JSJoda/TemporalField.adjustInto|adjustInto(0:0;kotlin.Int){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun baseUnit(): kotlinx.datetime.internal.JSJoda/TemporalUnit // kotlinx.datetime.internal.JSJoda/TemporalField.baseUnit|baseUnit(){}[0]
    open fun displayName(): kotlin/String // kotlinx.datetime.internal.JSJoda/TemporalField.displayName|displayName(){}[0]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalField.equals|equals(kotlin.js.JsAny){}[0]
    open fun getFrom(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlin/Int // kotlinx.datetime.internal.JSJoda/TemporalField.getFrom|getFrom(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun isDateBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalField.isDateBased|isDateBased(){}[0]
    open fun isSupportedBy(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalField.isSupportedBy|isSupportedBy(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun isTimeBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalField.isTimeBased|isTimeBased(){}[0]
    open fun name(): kotlin/String // kotlinx.datetime.internal.JSJoda/TemporalField.name|name(){}[0]
    open fun range(): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/TemporalField.range|range(){}[0]
    open fun rangeRefinedBy(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/TemporalField.rangeRefinedBy|rangeRefinedBy(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
    open fun rangeUnit(): kotlinx.datetime.internal.JSJoda/TemporalUnit // kotlinx.datetime.internal.JSJoda/TemporalField.rangeUnit|rangeUnit(){}[0]
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/TemporalUnit : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/TemporalUnit|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TemporalUnit.<init>|<init>(){}[0]

    open fun <#A1: kotlinx.datetime.internal.JSJoda/Temporal> addTo(#A1, kotlin/Int): #A1 // kotlinx.datetime.internal.JSJoda/TemporalUnit.addTo|addTo(0:0;kotlin.Int){0ยง<kotlinx.datetime.internal.JSJoda.Temporal>}[0]
    open fun between(kotlinx.datetime.internal.JSJoda/Temporal, kotlinx.datetime.internal.JSJoda/Temporal): kotlin/Int // kotlinx.datetime.internal.JSJoda/TemporalUnit.between|between(kotlinx.datetime.internal.JSJoda.Temporal;kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun duration(): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/TemporalUnit.duration|duration(){}[0]
    open fun isDateBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalUnit.isDateBased|isDateBased(){}[0]
    open fun isDurationEstimated(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalUnit.isDurationEstimated|isDurationEstimated(){}[0]
    open fun isSupportedBy(kotlinx.datetime.internal.JSJoda/Temporal): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalUnit.isSupportedBy|isSupportedBy(kotlinx.datetime.internal.JSJoda.Temporal){}[0]
    open fun isTimeBased(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TemporalUnit.isTimeBased|isTimeBased(){}[0]
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/TextStyle : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/TextStyle|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/TextStyle.<init>|<init>(){}[0]

    open fun asNormal(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.asNormal|asNormal(){}[0]
    open fun asStandalone(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.asStandalone|asStandalone(){}[0]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TextStyle.equals|equals(kotlin.js.JsAny){}[0]
    open fun isStandalone(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/TextStyle.isStandalone|isStandalone(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/TextStyle.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/TextStyle.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/TextStyle.Companion|null[0]
        final var FULL // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL|{}FULL[0]
            final fun <get-FULL>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL.<get-FULL>|<get-FULL>(){}[0]
            final fun <set-FULL>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL.<set-FULL>|<set-FULL>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
        final var FULL_STANDALONE // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL_STANDALONE|{}FULL_STANDALONE[0]
            final fun <get-FULL_STANDALONE>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL_STANDALONE.<get-FULL_STANDALONE>|<get-FULL_STANDALONE>(){}[0]
            final fun <set-FULL_STANDALONE>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.FULL_STANDALONE.<set-FULL_STANDALONE>|<set-FULL_STANDALONE>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
        final var NARROW // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW|{}NARROW[0]
            final fun <get-NARROW>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW.<get-NARROW>|<get-NARROW>(){}[0]
            final fun <set-NARROW>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW.<set-NARROW>|<set-NARROW>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
        final var NARROW_STANDALONE // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW_STANDALONE|{}NARROW_STANDALONE[0]
            final fun <get-NARROW_STANDALONE>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW_STANDALONE.<get-NARROW_STANDALONE>|<get-NARROW_STANDALONE>(){}[0]
            final fun <set-NARROW_STANDALONE>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.NARROW_STANDALONE.<set-NARROW_STANDALONE>|<set-NARROW_STANDALONE>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
        final var SHORT // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT|{}SHORT[0]
            final fun <get-SHORT>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT.<get-SHORT>|<get-SHORT>(){}[0]
            final fun <set-SHORT>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT.<set-SHORT>|<set-SHORT>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
        final var SHORT_STANDALONE // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT_STANDALONE|{}SHORT_STANDALONE[0]
            final fun <get-SHORT_STANDALONE>(): kotlinx.datetime.internal.JSJoda/TextStyle // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT_STANDALONE.<get-SHORT_STANDALONE>|<get-SHORT_STANDALONE>(){}[0]
            final fun <set-SHORT_STANDALONE>(kotlinx.datetime.internal.JSJoda/TextStyle) // kotlinx.datetime.internal.JSJoda/TextStyle.Companion.SHORT_STANDALONE.<set-SHORT_STANDALONE>|<set-SHORT_STANDALONE>(kotlinx.datetime.internal.JSJoda.TextStyle){}[0]
    }
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/ValueRange : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/ValueRange|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ValueRange.<init>|<init>(){}[0]

    open fun checkValidIntValue(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.checkValidIntValue|checkValidIntValue(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun checkValidValue(kotlin/Int, kotlinx.datetime.internal.JSJoda/TemporalField): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.checkValidValue|checkValidValue(kotlin.Int;kotlinx.datetime.internal.JSJoda.TemporalField){}[0]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ValueRange.equals|equals(kotlin.js.JsAny){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.hashCode|hashCode(){}[0]
    open fun isFixed(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ValueRange.isFixed|isFixed(){}[0]
    open fun isIntValue(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ValueRange.isIntValue|isIntValue(){}[0]
    open fun isValidIntValue(kotlin/Int): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ValueRange.isValidIntValue|isValidIntValue(kotlin.Int){}[0]
    open fun isValidValue(kotlin/Int): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ValueRange.isValidValue|isValidValue(kotlin.Int){}[0]
    open fun largestMinimum(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.largestMinimum|largestMinimum(){}[0]
    open fun maximum(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.maximum|maximum(){}[0]
    open fun minimum(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.minimum|minimum(){}[0]
    open fun smallestMaximum(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ValueRange.smallestMaximum|smallestMaximum(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ValueRange.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ValueRange.Companion|null[0]
        final fun of(kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/ValueRange.Companion.of|of(kotlin.Int;kotlin.Int){}[0]
        final fun of(kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/ValueRange.Companion.of|of(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun of(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.datetime.internal.JSJoda/ValueRange // kotlinx.datetime.internal.JSJoda/ValueRange.Companion.of|of(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    }
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/ZoneId : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/ZoneId|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ZoneId.<init>|<init>(){}[0]

    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneId.equals|equals(kotlin.js.JsAny){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneId.hashCode|hashCode(){}[0]
    open fun id(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneId.id|id(){}[0]
    open fun normalized(): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.normalized|normalized(){}[0]
    open fun rules(): kotlinx.datetime.internal.JSJoda/ZoneRules // kotlinx.datetime.internal.JSJoda/ZoneId.rules|rules(){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneId.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneId.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ZoneId.Companion|null[0]
        final var SYSTEM // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.SYSTEM|{}SYSTEM[0]
            final fun <get-SYSTEM>(): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.SYSTEM.<get-SYSTEM>|<get-SYSTEM>(){}[0]
            final fun <set-SYSTEM>(kotlinx.datetime.internal.JSJoda/ZoneId) // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.SYSTEM.<set-SYSTEM>|<set-SYSTEM>(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]
        final var UTC // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.UTC|{}UTC[0]
            final fun <get-UTC>(): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.UTC.<get-UTC>|<get-UTC>(){}[0]
            final fun <set-UTC>(kotlinx.datetime.internal.JSJoda/ZoneId) // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.UTC.<set-UTC>|<set-UTC>(kotlinx.datetime.internal.JSJoda.ZoneId){}[0]

        final fun from(kotlinx.datetime.internal.JSJoda/TemporalAccessor): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.from|from(kotlinx.datetime.internal.JSJoda.TemporalAccessor){}[0]
        final fun getAvailableZoneIds(): kotlin.js/JsAny // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.getAvailableZoneIds|getAvailableZoneIds(){}[0]
        final fun of(kotlin/String): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.of|of(kotlin.String){}[0]
        final fun ofOffset(kotlin/String, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.ofOffset|ofOffset(kotlin.String;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
        final fun systemDefault(): kotlinx.datetime.internal.JSJoda/ZoneId // kotlinx.datetime.internal.JSJoda/ZoneId.Companion.systemDefault|systemDefault(){}[0]
    }
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.<init>|<init>(){}[0]

    open fun compareTo(kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.compareTo|compareTo(kotlinx.datetime.internal.JSJoda.ZoneOffsetTransition){}[0]
    open fun dateTimeAfter(): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.dateTimeAfter|dateTimeAfter(){}[0]
    open fun dateTimeBefore(): kotlinx.datetime.internal.JSJoda/LocalDateTime // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.dateTimeBefore|dateTimeBefore(){}[0]
    open fun duration(): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.duration|duration(){}[0]
    open fun durationSeconds(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.durationSeconds|durationSeconds(){}[0]
    open fun equals(kotlin.js/JsAny): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.equals|equals(kotlin.js.JsAny){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.hashCode|hashCode(){}[0]
    open fun instant(): kotlinx.datetime.internal.JSJoda/Instant // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.instant|instant(){}[0]
    open fun isGap(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.isGap|isGap(){}[0]
    open fun isOverlap(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.isOverlap|isOverlap(){}[0]
    open fun isValidOffset(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.isValidOffset|isValidOffset(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    open fun offsetAfter(): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.offsetAfter|offsetAfter(){}[0]
    open fun offsetBefore(): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.offsetBefore|offsetBefore(){}[0]
    open fun toEpochSecond(): kotlin/Double // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.toEpochSecond|toEpochSecond(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.toString|toString(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.Companion|null[0]
        final fun of(kotlinx.datetime.internal.JSJoda/LocalDateTime, kotlinx.datetime.internal.JSJoda/ZoneOffset, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition // kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition.Companion.of|of(kotlinx.datetime.internal.JSJoda.LocalDateTime;kotlinx.datetime.internal.JSJoda.ZoneOffset;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    }
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/ZoneRules : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/ZoneRules|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ZoneRules.<init>|<init>(){}[0]

    open fun daylightSavings(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/Duration // kotlinx.datetime.internal.JSJoda/ZoneRules.daylightSavings|daylightSavings(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun isDaylightSavings(kotlinx.datetime.internal.JSJoda/Instant): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneRules.isDaylightSavings|isDaylightSavings(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun isFixedOffset(): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneRules.isFixedOffset|isFixedOffset(){}[0]
    open fun isValidOffset(kotlinx.datetime.internal.JSJoda/LocalDateTime, kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlin/Boolean // kotlinx.datetime.internal.JSJoda/ZoneRules.isValidOffset|isValidOffset(kotlinx.datetime.internal.JSJoda.LocalDateTime;kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    open fun nextTransition(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition // kotlinx.datetime.internal.JSJoda/ZoneRules.nextTransition|nextTransition(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun offset(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.offset|offset(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun offset(kotlinx.datetime.internal.JSJoda/LocalDateTime): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.offset|offset(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]
    open fun offsetOfEpochMilli(kotlin/Double): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.offsetOfEpochMilli|offsetOfEpochMilli(kotlin.Double){}[0]
    open fun offsetOfInstant(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.offsetOfInstant|offsetOfInstant(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun offsetOfLocalDateTime(kotlinx.datetime.internal.JSJoda/LocalDateTime): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.offsetOfLocalDateTime|offsetOfLocalDateTime(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]
    open fun previousTransition(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition // kotlinx.datetime.internal.JSJoda/ZoneRules.previousTransition|previousTransition(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun standardOffset(kotlinx.datetime.internal.JSJoda/Instant): kotlinx.datetime.internal.JSJoda/ZoneOffset // kotlinx.datetime.internal.JSJoda/ZoneRules.standardOffset|standardOffset(kotlinx.datetime.internal.JSJoda.Instant){}[0]
    open fun toJSON(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneRules.toJSON|toJSON(){}[0]
    open fun toString(): kotlin/String // kotlinx.datetime.internal.JSJoda/ZoneRules.toString|toString(){}[0]
    open fun transition(kotlinx.datetime.internal.JSJoda/LocalDateTime): kotlinx.datetime.internal.JSJoda/ZoneOffsetTransition // kotlinx.datetime.internal.JSJoda/ZoneRules.transition|transition(kotlinx.datetime.internal.JSJoda.LocalDateTime){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ZoneRules.Companion|null[0]
        final fun of(kotlinx.datetime.internal.JSJoda/ZoneOffset): kotlinx.datetime.internal.JSJoda/ZoneRules // kotlinx.datetime.internal.JSJoda/ZoneRules.Companion.of|of(kotlinx.datetime.internal.JSJoda.ZoneOffset){}[0]
    }
}

// Targets: [wasmJs]
open class kotlinx.datetime.internal.JSJoda/ZoneRulesProvider : kotlin.js/JsAny { // kotlinx.datetime.internal.JSJoda/ZoneRulesProvider|null[0]
    constructor <init>() // kotlinx.datetime.internal.JSJoda/ZoneRulesProvider.<init>|<init>(){}[0]

    final object Companion { // kotlinx.datetime.internal.JSJoda/ZoneRulesProvider.Companion|null[0]
        final fun getRules(kotlin/String): kotlinx.datetime.internal.JSJoda/ZoneRules // kotlinx.datetime.internal.JSJoda/ZoneRulesProvider.Companion.getRules|getRules(kotlin.String){}[0]
    }
}

// Targets: [wasmJs]
final fun kotlinx.datetime.internal.JSJoda/use(kotlin/Function0<kotlin.js/JsAny>): kotlin.js/JsAny // kotlinx.datetime.internal.JSJoda/use|use(kotlin.Function0<kotlin.js.JsAny>){}[0]

// Targets: [wasmWasi]
abstract interface kotlinx.datetime.internal/TimeZonesProvider { // kotlinx.datetime.internal/TimeZonesProvider|null[0]
    abstract fun getTimeZones(): kotlin.collections/Set<kotlin/String> // kotlinx.datetime.internal/TimeZonesProvider.getTimeZones|getTimeZones(){}[0]
    abstract fun zoneDataByName(kotlin/String): kotlin/ByteArray // kotlinx.datetime.internal/TimeZonesProvider.zoneDataByName|zoneDataByName(kotlin.String){}[0]
}

// Targets: [wasmWasi]
final fun kotlinx.datetime.internal/initializeTimeZonesProvider(kotlinx.datetime.internal/TimeZonesProvider) // kotlinx.datetime.internal/initializeTimeZonesProvider|initializeTimeZonesProvider(kotlinx.datetime.internal.TimeZonesProvider){}[0]
